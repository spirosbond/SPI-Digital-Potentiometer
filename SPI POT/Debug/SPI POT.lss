
SPI POT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000160  00802000  00003fc8  0000405c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001af  00802160  00802160  000041bc  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000041bc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006a8  00000000  00000000  00004218  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000d47a  00000000  00000000  000048c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f55  00000000  00000000  00011d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000a354  00000000  00000000  00014c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001260  00000000  00000000  0001efe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002f7c3  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000053d4  00000000  00000000  0004fa07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005c0  00000000  00000000  00054de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000c612  00000000  00000000  000553a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8f c1       	rjmp	.+798    	; 0x320 <__ctors_end>
       2:	00 00       	nop
       4:	ae c1       	rjmp	.+860    	; 0x362 <__bad_interrupt>
       6:	00 00       	nop
       8:	ac c1       	rjmp	.+856    	; 0x362 <__bad_interrupt>
       a:	00 00       	nop
       c:	aa c1       	rjmp	.+852    	; 0x362 <__bad_interrupt>
       e:	00 00       	nop
      10:	a8 c1       	rjmp	.+848    	; 0x362 <__bad_interrupt>
      12:	00 00       	nop
      14:	a6 c1       	rjmp	.+844    	; 0x362 <__bad_interrupt>
      16:	00 00       	nop
      18:	a4 c1       	rjmp	.+840    	; 0x362 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a2 c1       	rjmp	.+836    	; 0x362 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a0 c1       	rjmp	.+832    	; 0x362 <__bad_interrupt>
      22:	00 00       	nop
      24:	9e c1       	rjmp	.+828    	; 0x362 <__bad_interrupt>
      26:	00 00       	nop
      28:	9c c1       	rjmp	.+824    	; 0x362 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9a c1       	rjmp	.+820    	; 0x362 <__bad_interrupt>
      2e:	00 00       	nop
      30:	98 c1       	rjmp	.+816    	; 0x362 <__bad_interrupt>
      32:	00 00       	nop
      34:	96 c1       	rjmp	.+812    	; 0x362 <__bad_interrupt>
      36:	00 00       	nop
      38:	94 c1       	rjmp	.+808    	; 0x362 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	92 c1       	rjmp	.+804    	; 0x362 <__bad_interrupt>
      3e:	00 00       	nop
      40:	90 c1       	rjmp	.+800    	; 0x362 <__bad_interrupt>
      42:	00 00       	nop
      44:	8e c1       	rjmp	.+796    	; 0x362 <__bad_interrupt>
      46:	00 00       	nop
      48:	8c c1       	rjmp	.+792    	; 0x362 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8a c1       	rjmp	.+788    	; 0x362 <__bad_interrupt>
      4e:	00 00       	nop
      50:	88 c1       	rjmp	.+784    	; 0x362 <__bad_interrupt>
      52:	00 00       	nop
      54:	86 c1       	rjmp	.+780    	; 0x362 <__bad_interrupt>
      56:	00 00       	nop
      58:	84 c1       	rjmp	.+776    	; 0x362 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	82 c1       	rjmp	.+772    	; 0x362 <__bad_interrupt>
      5e:	00 00       	nop
      60:	80 c1       	rjmp	.+768    	; 0x362 <__bad_interrupt>
      62:	00 00       	nop
      64:	7e c1       	rjmp	.+764    	; 0x362 <__bad_interrupt>
      66:	00 00       	nop
      68:	7c c1       	rjmp	.+760    	; 0x362 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7a c1       	rjmp	.+756    	; 0x362 <__bad_interrupt>
      6e:	00 00       	nop
      70:	78 c1       	rjmp	.+752    	; 0x362 <__bad_interrupt>
      72:	00 00       	nop
      74:	76 c1       	rjmp	.+748    	; 0x362 <__bad_interrupt>
      76:	00 00       	nop
      78:	74 c1       	rjmp	.+744    	; 0x362 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	72 c1       	rjmp	.+740    	; 0x362 <__bad_interrupt>
      7e:	00 00       	nop
      80:	70 c1       	rjmp	.+736    	; 0x362 <__bad_interrupt>
      82:	00 00       	nop
      84:	6e c1       	rjmp	.+732    	; 0x362 <__bad_interrupt>
      86:	00 00       	nop
      88:	6c c1       	rjmp	.+728    	; 0x362 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6a c1       	rjmp	.+724    	; 0x362 <__bad_interrupt>
      8e:	00 00       	nop
      90:	68 c1       	rjmp	.+720    	; 0x362 <__bad_interrupt>
      92:	00 00       	nop
      94:	66 c1       	rjmp	.+716    	; 0x362 <__bad_interrupt>
      96:	00 00       	nop
      98:	64 c1       	rjmp	.+712    	; 0x362 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	62 c1       	rjmp	.+708    	; 0x362 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	60 c1       	rjmp	.+704    	; 0x362 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5e c1       	rjmp	.+700    	; 0x362 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5c c1       	rjmp	.+696    	; 0x362 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5a c1       	rjmp	.+692    	; 0x362 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	58 c1       	rjmp	.+688    	; 0x362 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	56 c1       	rjmp	.+684    	; 0x362 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	54 c1       	rjmp	.+680    	; 0x362 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	52 c1       	rjmp	.+676    	; 0x362 <__bad_interrupt>
      be:	00 00       	nop
      c0:	50 c1       	rjmp	.+672    	; 0x362 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4e c1       	rjmp	.+668    	; 0x362 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4c c1       	rjmp	.+664    	; 0x362 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4a c1       	rjmp	.+660    	; 0x362 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	48 c1       	rjmp	.+656    	; 0x362 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	46 c1       	rjmp	.+652    	; 0x362 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	44 c1       	rjmp	.+648    	; 0x362 <__bad_interrupt>
      da:	00 00       	nop
      dc:	42 c1       	rjmp	.+644    	; 0x362 <__bad_interrupt>
      de:	00 00       	nop
      e0:	40 c1       	rjmp	.+640    	; 0x362 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3e c1       	rjmp	.+636    	; 0x362 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	3c c1       	rjmp	.+632    	; 0x362 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	3a c1       	rjmp	.+628    	; 0x362 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	38 c1       	rjmp	.+624    	; 0x362 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	36 c1       	rjmp	.+620    	; 0x362 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	34 c1       	rjmp	.+616    	; 0x362 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	32 c1       	rjmp	.+612    	; 0x362 <__bad_interrupt>
      fe:	00 00       	nop
     100:	30 c1       	rjmp	.+608    	; 0x362 <__bad_interrupt>
     102:	00 00       	nop
     104:	2e c1       	rjmp	.+604    	; 0x362 <__bad_interrupt>
     106:	00 00       	nop
     108:	2c c1       	rjmp	.+600    	; 0x362 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	2a c1       	rjmp	.+596    	; 0x362 <__bad_interrupt>
     10e:	00 00       	nop
     110:	28 c1       	rjmp	.+592    	; 0x362 <__bad_interrupt>
     112:	00 00       	nop
     114:	26 c1       	rjmp	.+588    	; 0x362 <__bad_interrupt>
     116:	00 00       	nop
     118:	24 c1       	rjmp	.+584    	; 0x362 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	62 c1       	rjmp	.+708    	; 0x3e2 <__vector_71>
     11e:	00 00       	nop
     120:	20 c1       	rjmp	.+576    	; 0x362 <__bad_interrupt>
     122:	00 00       	nop
     124:	1e c1       	rjmp	.+572    	; 0x362 <__bad_interrupt>
     126:	00 00       	nop
     128:	1c c1       	rjmp	.+568    	; 0x362 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	1a c1       	rjmp	.+564    	; 0x362 <__bad_interrupt>
     12e:	00 00       	nop
     130:	18 c1       	rjmp	.+560    	; 0x362 <__bad_interrupt>
     132:	00 00       	nop
     134:	16 c1       	rjmp	.+556    	; 0x362 <__bad_interrupt>
     136:	00 00       	nop
     138:	14 c1       	rjmp	.+552    	; 0x362 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	12 c1       	rjmp	.+548    	; 0x362 <__bad_interrupt>
     13e:	00 00       	nop
     140:	10 c1       	rjmp	.+544    	; 0x362 <__bad_interrupt>
     142:	00 00       	nop
     144:	0e c1       	rjmp	.+540    	; 0x362 <__bad_interrupt>
     146:	00 00       	nop
     148:	0c c1       	rjmp	.+536    	; 0x362 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0a c1       	rjmp	.+532    	; 0x362 <__bad_interrupt>
     14e:	00 00       	nop
     150:	08 c1       	rjmp	.+528    	; 0x362 <__bad_interrupt>
     152:	00 00       	nop
     154:	06 c1       	rjmp	.+524    	; 0x362 <__bad_interrupt>
     156:	00 00       	nop
     158:	04 c1       	rjmp	.+520    	; 0x362 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	02 c1       	rjmp	.+516    	; 0x362 <__bad_interrupt>
     15e:	00 00       	nop
     160:	00 c1       	rjmp	.+512    	; 0x362 <__bad_interrupt>
     162:	00 00       	nop
     164:	fe c0       	rjmp	.+508    	; 0x362 <__bad_interrupt>
     166:	00 00       	nop
     168:	fc c0       	rjmp	.+504    	; 0x362 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	fa c0       	rjmp	.+500    	; 0x362 <__bad_interrupt>
     16e:	00 00       	nop
     170:	f8 c0       	rjmp	.+496    	; 0x362 <__bad_interrupt>
     172:	00 00       	nop
     174:	f6 c0       	rjmp	.+492    	; 0x362 <__bad_interrupt>
     176:	00 00       	nop
     178:	f4 c0       	rjmp	.+488    	; 0x362 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	f2 c0       	rjmp	.+484    	; 0x362 <__bad_interrupt>
     17e:	00 00       	nop
     180:	f0 c0       	rjmp	.+480    	; 0x362 <__bad_interrupt>
     182:	00 00       	nop
     184:	ee c0       	rjmp	.+476    	; 0x362 <__bad_interrupt>
     186:	00 00       	nop
     188:	ec c0       	rjmp	.+472    	; 0x362 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	ea c0       	rjmp	.+468    	; 0x362 <__bad_interrupt>
     18e:	00 00       	nop
     190:	e8 c0       	rjmp	.+464    	; 0x362 <__bad_interrupt>
     192:	00 00       	nop
     194:	e6 c0       	rjmp	.+460    	; 0x362 <__bad_interrupt>
     196:	00 00       	nop
     198:	e4 c0       	rjmp	.+456    	; 0x362 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	e2 c0       	rjmp	.+452    	; 0x362 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	e0 c0       	rjmp	.+448    	; 0x362 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	de c0       	rjmp	.+444    	; 0x362 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	dc c0       	rjmp	.+440    	; 0x362 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	da c0       	rjmp	.+436    	; 0x362 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	d8 c0       	rjmp	.+432    	; 0x362 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	d6 c0       	rjmp	.+428    	; 0x362 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	d4 c0       	rjmp	.+424    	; 0x362 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	d2 c0       	rjmp	.+420    	; 0x362 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	d0 c0       	rjmp	.+416    	; 0x362 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	ce c0       	rjmp	.+412    	; 0x362 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	cc c0       	rjmp	.+408    	; 0x362 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	ca c0       	rjmp	.+404    	; 0x362 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	c8 c0       	rjmp	.+400    	; 0x362 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	c6 c0       	rjmp	.+396    	; 0x362 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	c4 c0       	rjmp	.+392    	; 0x362 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	c2 c0       	rjmp	.+388    	; 0x362 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	c0 c0       	rjmp	.+384    	; 0x362 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	be c0       	rjmp	.+380    	; 0x362 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	bc c0       	rjmp	.+376    	; 0x362 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	ba c0       	rjmp	.+372    	; 0x362 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	b8 c0       	rjmp	.+368    	; 0x362 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__vector_125>
     1f8:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__vector_126>
     1fc:	21 0f       	add	r18, r17
     1fe:	0f 0f       	add	r16, r31
     200:	12 0f       	add	r17, r18
     202:	15 0f       	add	r17, r21
     204:	18 0f       	add	r17, r24
     206:	1b 0f       	add	r17, r27
     208:	1e 0f       	add	r17, r30
     20a:	6a 16       	cp	r6, r26
     20c:	7e 16       	cp	r7, r30
     20e:	6c 16       	cp	r6, r28
     210:	6e 16       	cp	r6, r30
     212:	70 16       	cp	r7, r16
     214:	72 16       	cp	r7, r18
     216:	74 16       	cp	r7, r20
     218:	76 16       	cp	r7, r22
     21a:	78 16       	cp	r7, r24
     21c:	7a 16       	cp	r7, r26

0000021e <__trampolines_end>:
     21e:	6e 61       	ori	r22, 0x1E	; 30
     220:	6e 00       	.word	0x006e	; ????

00000222 <__c.2159>:
     222:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     232:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     242:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     252:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     262:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     272:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     282:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     292:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2a2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2b2:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2c2:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2d2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2e2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2f2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     302:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     312:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000320 <__ctors_end>:
     320:	11 24       	eor	r1, r1
     322:	1f be       	out	0x3f, r1	; 63
     324:	cf ef       	ldi	r28, 0xFF	; 255
     326:	cd bf       	out	0x3d, r28	; 61
     328:	df e9       	ldi	r29, 0x9F	; 159
     32a:	de bf       	out	0x3e, r29	; 62
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	0c bf       	out	0x3c, r16	; 60

00000330 <__do_copy_data>:
     330:	11 e2       	ldi	r17, 0x21	; 33
     332:	a0 e0       	ldi	r26, 0x00	; 0
     334:	b0 e2       	ldi	r27, 0x20	; 32
     336:	e8 ec       	ldi	r30, 0xC8	; 200
     338:	ff e3       	ldi	r31, 0x3F	; 63
     33a:	00 e0       	ldi	r16, 0x00	; 0
     33c:	0b bf       	out	0x3b, r16	; 59
     33e:	02 c0       	rjmp	.+4      	; 0x344 <__do_copy_data+0x14>
     340:	07 90       	elpm	r0, Z+
     342:	0d 92       	st	X+, r0
     344:	a0 36       	cpi	r26, 0x60	; 96
     346:	b1 07       	cpc	r27, r17
     348:	d9 f7       	brne	.-10     	; 0x340 <__do_copy_data+0x10>

0000034a <__do_clear_bss>:
     34a:	23 e2       	ldi	r18, 0x23	; 35
     34c:	a0 e6       	ldi	r26, 0x60	; 96
     34e:	b1 e2       	ldi	r27, 0x21	; 33
     350:	01 c0       	rjmp	.+2      	; 0x354 <.do_clear_bss_start>

00000352 <.do_clear_bss_loop>:
     352:	1d 92       	st	X+, r1

00000354 <.do_clear_bss_start>:
     354:	af 30       	cpi	r26, 0x0F	; 15
     356:	b2 07       	cpc	r27, r18
     358:	e1 f7       	brne	.-8      	; 0x352 <.do_clear_bss_loop>
     35a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <main>
     35e:	0c 94 e2 1f 	jmp	0x3fc4	; 0x3fc4 <_exit>

00000362 <__bad_interrupt>:
     362:	4e ce       	rjmp	.-868    	; 0x0 <__vectors>

00000364 <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     364:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     366:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     368:	81 15       	cp	r24, r1
     36a:	92 40       	sbci	r25, 0x02	; 2
     36c:	21 f4       	brne	.+8      	; 0x376 <adc_set_callback+0x12>
		adca_callback = callback;
     36e:	60 93 e9 22 	sts	0x22E9, r22
     372:	70 93 ea 22 	sts	0x22EA, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     376:	2f bf       	out	0x3f, r18	; 63
     378:	08 95       	ret

0000037a <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     37a:	81 15       	cp	r24, r1
     37c:	92 40       	sbci	r25, 0x02	; 2
     37e:	59 f4       	brne	.+22     	; 0x396 <adc_enable_clock+0x1c>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     380:	80 91 60 21 	lds	r24, 0x2160
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	98 0f       	add	r25, r24
     388:	90 93 60 21 	sts	0x2160, r25
     38c:	81 11       	cpse	r24, r1
     38e:	03 c0       	rjmp	.+6      	; 0x396 <adc_enable_clock+0x1c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     390:	62 e0       	ldi	r22, 0x02	; 2
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	80 c5       	rjmp	.+2816   	; 0xe96 <sysclk_enable_module>
     396:	08 95       	ret

00000398 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     398:	81 15       	cp	r24, r1
     39a:	92 40       	sbci	r25, 0x02	; 2
     39c:	51 f4       	brne	.+20     	; 0x3b2 <adc_disable_clock+0x1a>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     39e:	80 91 60 21 	lds	r24, 0x2160
     3a2:	81 50       	subi	r24, 0x01	; 1
     3a4:	80 93 60 21 	sts	0x2160, r24
     3a8:	81 11       	cpse	r24, r1
     3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <adc_disable_clock+0x1a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     3ac:	62 e0       	ldi	r22, 0x02	; 2
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	7e c5       	rjmp	.+2812   	; 0xeae <sysclk_disable_module>
     3b2:	08 95       	ret

000003b4 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     3bc:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     3be:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     3c0:	dc df       	rcall	.-72     	; 0x37a <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     3c2:	88 81       	ld	r24, Y
     3c4:	81 60       	ori	r24, 0x01	; 1
     3c6:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3c8:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     3ca:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     3cc:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     3ce:	e6 ef       	ldi	r30, 0xF6	; 246
     3d0:	f2 e2       	ldi	r31, 0x22	; 34
     3d2:	90 81       	ld	r25, Z
     3d4:	9f 5f       	subi	r25, 0xFF	; 255
     3d6:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3d8:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	08 95       	ret

000003e2 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     3e2:	1f 92       	push	r1
     3e4:	0f 92       	push	r0
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	0f 92       	push	r0
     3ea:	11 24       	eor	r1, r1
     3ec:	0b b6       	in	r0, 0x3b	; 59
     3ee:	0f 92       	push	r0
     3f0:	2f 93       	push	r18
     3f2:	3f 93       	push	r19
     3f4:	4f 93       	push	r20
     3f6:	5f 93       	push	r21
     3f8:	6f 93       	push	r22
     3fa:	7f 93       	push	r23
     3fc:	8f 93       	push	r24
     3fe:	9f 93       	push	r25
     400:	af 93       	push	r26
     402:	bf 93       	push	r27
     404:	ef 93       	push	r30
     406:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     408:	e0 e0       	ldi	r30, 0x00	; 0
     40a:	f2 e0       	ldi	r31, 0x02	; 2
     40c:	44 a1       	ldd	r20, Z+36	; 0x24
     40e:	55 a1       	ldd	r21, Z+37	; 0x25
     410:	e0 91 e9 22 	lds	r30, 0x22E9
     414:	f0 91 ea 22 	lds	r31, 0x22EA
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	19 95       	eicall
}
     420:	ff 91       	pop	r31
     422:	ef 91       	pop	r30
     424:	bf 91       	pop	r27
     426:	af 91       	pop	r26
     428:	9f 91       	pop	r25
     42a:	8f 91       	pop	r24
     42c:	7f 91       	pop	r23
     42e:	6f 91       	pop	r22
     430:	5f 91       	pop	r21
     432:	4f 91       	pop	r20
     434:	3f 91       	pop	r19
     436:	2f 91       	pop	r18
     438:	0f 90       	pop	r0
     43a:	0b be       	out	0x3b, r0	; 59
     43c:	0f 90       	pop	r0
     43e:	0f be       	out	0x3f, r0	; 63
     440:	0f 90       	pop	r0
     442:	1f 90       	pop	r1
     444:	18 95       	reti

00000446 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	ec 01       	movw	r28, r24
     456:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     458:	c1 15       	cp	r28, r1
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	d8 07       	cpc	r29, r24
     45e:	51 f5       	brne	.+84     	; 0x4b4 <adc_write_configuration+0x6e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     460:	61 e2       	ldi	r22, 0x21	; 33
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     46a:	e8 2e       	mov	r14, r24
     46c:	f1 2c       	mov	r15, r1
     46e:	60 e2       	ldi	r22, 0x20	; 32
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <nvm_read_byte>
		data <<= 8;
     478:	fe 2c       	mov	r15, r14
     47a:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
     47c:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     47e:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
     480:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     482:	ce 01       	movw	r24, r28
     484:	7a df       	rcall	.-268    	; 0x37a <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     486:	28 81       	ld	r18, Y
     488:	21 70       	andi	r18, 0x01	; 1

	adc->CTRLA = ADC_FLUSH_bm;
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	88 83       	st	Y, r24
	adc->CAL = cal;
     48e:	ec 86       	std	Y+12, r14	; 0x0c
     490:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
     492:	f8 01       	movw	r30, r16
     494:	84 81       	ldd	r24, Z+4	; 0x04
     496:	95 81       	ldd	r25, Z+5	; 0x05
     498:	88 8f       	std	Y+24, r24	; 0x18
     49a:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
     49c:	81 81       	ldd	r24, Z+1	; 0x01
     49e:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
     4a0:	83 81       	ldd	r24, Z+3	; 0x03
     4a2:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
     4a4:	82 81       	ldd	r24, Z+2	; 0x02
     4a6:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
     4a8:	80 81       	ld	r24, Z
     4aa:	89 83       	std	Y+1, r24	; 0x01

	adc->CTRLA = enable;
     4ac:	28 83       	st	Y, r18

	adc_disable_clock(adc);
     4ae:	ce 01       	movw	r24, r28
     4b0:	73 df       	rcall	.-282    	; 0x398 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4b2:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	ff 90       	pop	r15
     4be:	ef 90       	pop	r14
     4c0:	df 90       	pop	r13
     4c2:	08 95       	ret

000004c4 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	ec 01       	movw	r28, r24
     4d0:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     4d2:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     4d4:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     4d6:	51 df       	rcall	.-350    	; 0x37a <adc_enable_clock>

	conf->cmp = adc->CMP;
     4d8:	88 8d       	ldd	r24, Y+24	; 0x18
     4da:	99 8d       	ldd	r25, Y+25	; 0x19
     4dc:	f8 01       	movw	r30, r16
     4de:	84 83       	std	Z+4, r24	; 0x04
     4e0:	95 83       	std	Z+5, r25	; 0x05
	conf->refctrl = adc->REFCTRL;
     4e2:	8a 81       	ldd	r24, Y+2	; 0x02
     4e4:	81 83       	std	Z+1, r24	; 0x01
	conf->prescaler = adc->PRESCALER;
     4e6:	8c 81       	ldd	r24, Y+4	; 0x04
     4e8:	83 83       	std	Z+3, r24	; 0x03
	conf->evctrl = adc->EVCTRL;
     4ea:	8b 81       	ldd	r24, Y+3	; 0x03
     4ec:	82 83       	std	Z+2, r24	; 0x02
	conf->ctrlb = adc->CTRLB;
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	80 83       	st	Z, r24

	adc_disable_clock(adc);
     4f2:	ce 01       	movw	r24, r28
     4f4:	51 df       	rcall	.-350    	; 0x398 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4f6:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	08 95       	ret

00000504 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ec 01       	movw	r28, r24
     510:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     512:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     514:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     516:	31 df       	rcall	.-414    	; 0x37a <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     518:	f8 01       	movw	r30, r16
     51a:	80 81       	ld	r24, Z
     51c:	88 a3       	std	Y+32, r24	; 0x20
	adc_ch->INTCTRL = ch_conf->intctrl;
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	8a a3       	std	Y+34, r24	; 0x22
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     522:	81 81       	ldd	r24, Z+1	; 0x01
     524:	89 a3       	std	Y+33, r24	; 0x21
	adc_ch->SCAN = ch_conf->scan;
     526:	83 81       	ldd	r24, Z+3	; 0x03
     528:	8e a3       	std	Y+38, r24	; 0x26
	adc_disable_clock(adc);
     52a:	ce 01       	movw	r24, r28
     52c:	35 df       	rcall	.-406    	; 0x398 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     52e:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	08 95       	ret

0000053c <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	ec 01       	movw	r28, r24
     548:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     54a:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     54c:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     54e:	15 df       	rcall	.-470    	; 0x37a <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     550:	88 a1       	ldd	r24, Y+32	; 0x20
     552:	f8 01       	movw	r30, r16
     554:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     556:	8a a1       	ldd	r24, Y+34	; 0x22
     558:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     55a:	89 a1       	ldd	r24, Y+33	; 0x21
     55c:	81 83       	std	Z+1, r24	; 0x01
	ch_conf->scan = adc_ch->SCAN;
     55e:	8e a1       	ldd	r24, Y+38	; 0x26
     560:	83 83       	std	Z+3, r24	; 0x03
	adc_disable_clock(adc);
     562:	ce 01       	movw	r24, r28
     564:	19 df       	rcall	.-462    	; 0x398 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     566:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	08 95       	ret

00000574 <adc_handler>:
	return getPVVADCVoltage()*ADC_PVV_RATIO;
}

double getPVCVoltage(void){
	return getPVCADCVoltage();
}
     574:	08 95       	ret

00000576 <adc_init>:
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	e0 e2       	ldi	r30, 0x20	; 32
     57c:	f6 e0       	ldi	r31, 0x06	; 6
     57e:	80 e1       	ldi	r24, 0x10	; 16
     580:	82 83       	std	Z+2, r24	; 0x02
     582:	80 e2       	ldi	r24, 0x20	; 32
     584:	82 83       	std	Z+2, r24	; 0x02
     586:	6b ee       	ldi	r22, 0xEB	; 235
     588:	72 e2       	ldi	r23, 0x22	; 34
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	9a df       	rcall	.-204    	; 0x4c4 <adc_read_configuration>
     590:	41 ef       	ldi	r20, 0xF1	; 241
     592:	52 e2       	ldi	r21, 0x22	; 34
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	d0 df       	rcall	.-96     	; 0x53c <adcch_read_configuration>
     59c:	cb ee       	ldi	r28, 0xEB	; 235
     59e:	d2 e2       	ldi	r29, 0x22	; 34
     5a0:	88 81       	ld	r24, Y
     5a2:	ec ee       	ldi	r30, 0xEC	; 236
     5a4:	f2 e2       	ldi	r31, 0x22	; 34
     5a6:	90 81       	ld	r25, Z
     5a8:	9f 78       	andi	r25, 0x8F	; 143
     5aa:	90 83       	st	Z, r25
     5ac:	81 7e       	andi	r24, 0xE1	; 225
     5ae:	80 61       	ori	r24, 0x10	; 16
     5b0:	88 83       	st	Y, r24
     5b2:	10 92 ed 22 	sts	0x22ED, r1
     5b6:	87 e0       	ldi	r24, 0x07	; 7
     5b8:	80 93 ee 22 	sts	0x22EE, r24
     5bc:	6a eb       	ldi	r22, 0xBA	; 186
     5be:	72 e0       	ldi	r23, 0x02	; 2
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	cf de       	rcall	.-610    	; 0x364 <adc_set_callback>
     5c6:	e3 ef       	ldi	r30, 0xF3	; 243
     5c8:	f2 e2       	ldi	r31, 0x22	; 34
     5ca:	80 81       	ld	r24, Z
     5cc:	8c 7f       	andi	r24, 0xFC	; 252
     5ce:	81 60       	ori	r24, 0x01	; 1
     5d0:	80 83       	st	Z, r24
     5d2:	88 81       	ld	r24, Y
     5d4:	80 66       	ori	r24, 0x60	; 96
     5d6:	88 83       	st	Y, r24
     5d8:	be 01       	movw	r22, r28
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	33 df       	rcall	.-410    	; 0x446 <adc_write_configuration>
     5e0:	41 ef       	ldi	r20, 0xF1	; 241
     5e2:	52 e2       	ldi	r21, 0x22	; 34
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	8c df       	rcall	.-232    	; 0x504 <adcch_write_configuration>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	e1 de       	rcall	.-574    	; 0x3b4 <adc_enable>
     5f2:	41 e0       	ldi	r20, 0x01	; 1
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	80 ea       	ldi	r24, 0xA0	; 160
     5fa:	96 e0       	ldi	r25, 0x06	; 6
     5fc:	99 d4       	rcall	.+2354   	; 0xf30 <ioport_configure_port_pin>
     5fe:	43 e0       	ldi	r20, 0x03	; 3
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	62 e0       	ldi	r22, 0x02	; 2
     604:	80 ea       	ldi	r24, 0xA0	; 160
     606:	96 e0       	ldi	r25, 0x06	; 6
     608:	93 d4       	rcall	.+2342   	; 0xf30 <ioport_configure_port_pin>
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <getADCValue>:
     610:	4f 92       	push	r4
     612:	5f 92       	push	r5
     614:	6f 92       	push	r6
     616:	7f 92       	push	r7
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	c8 2f       	mov	r28, r24
     62e:	6a 01       	movw	r12, r20
     630:	7b 01       	movw	r14, r22
     632:	41 ef       	ldi	r20, 0xF1	; 241
     634:	52 e2       	ldi	r21, 0x22	; 34
     636:	61 e0       	ldi	r22, 0x01	; 1
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	7f df       	rcall	.-258    	; 0x53c <adcch_read_configuration>
     63e:	c0 31       	cpi	r28, 0x10	; 16
     640:	48 f0       	brcs	.+18     	; 0x654 <getADCValue+0x44>
     642:	10 92 f1 22 	sts	0x22F1, r1
     646:	c0 51       	subi	r28, 0x10	; 16
     648:	cc 0f       	add	r28, r28
     64a:	cc 0f       	add	r28, r28
     64c:	cc 0f       	add	r28, r28
     64e:	c0 93 f2 22 	sts	0x22F2, r28
     652:	08 c0       	rjmp	.+16     	; 0x664 <getADCValue+0x54>
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 f1 22 	sts	0x22F1, r24
     65a:	cc 0f       	add	r28, r28
     65c:	cc 0f       	add	r28, r28
     65e:	cc 0f       	add	r28, r28
     660:	c0 93 f2 22 	sts	0x22F2, r28
     664:	41 ef       	ldi	r20, 0xF1	; 241
     666:	52 e2       	ldi	r21, 0x22	; 34
     668:	61 e0       	ldi	r22, 0x01	; 1
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	4a df       	rcall	.-364    	; 0x504 <adcch_write_configuration>
     670:	e8 e4       	ldi	r30, 0x48	; 72
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	81 7f       	andi	r24, 0xF1	; 241
     678:	80 83       	st	Z, r24
     67a:	80 81       	ld	r24, Z
     67c:	81 60       	ori	r24, 0x01	; 1
     67e:	80 83       	st	Z, r24
     680:	8f b7       	in	r24, 0x3f	; 63
     682:	f8 94       	cli
     684:	e0 e0       	ldi	r30, 0x00	; 0
     686:	f2 e0       	ldi	r31, 0x02	; 2
     688:	90 81       	ld	r25, Z
     68a:	94 60       	ori	r25, 0x04	; 4
     68c:	90 83       	st	Z, r25
     68e:	8f bf       	out	0x3f, r24	; 63
     690:	88 95       	sleep
     692:	e8 e4       	ldi	r30, 0x48	; 72
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	8e 7f       	andi	r24, 0xFE	; 254
     69a:	80 83       	st	Z, r24
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	a9 01       	movw	r20, r18
     6a2:	c7 01       	movw	r24, r14
     6a4:	b6 01       	movw	r22, r12
     6a6:	0e 94 bc 18 	call	0x3178	; 0x3178 <__gesf2>
     6aa:	18 16       	cp	r1, r24
     6ac:	0c f0       	brlt	.+2      	; 0x6b0 <getADCValue+0xa0>
     6ae:	3f c0       	rjmp	.+126    	; 0x72e <getADCValue+0x11e>
     6b0:	41 2c       	mov	r4, r1
     6b2:	51 2c       	mov	r5, r1
     6b4:	32 01       	movw	r6, r4
     6b6:	00 e0       	ldi	r16, 0x00	; 0
     6b8:	10 e0       	ldi	r17, 0x00	; 0
     6ba:	c8 e4       	ldi	r28, 0x48	; 72
     6bc:	d0 e0       	ldi	r29, 0x00	; 0
     6be:	a1 2c       	mov	r10, r1
     6c0:	68 94       	set
     6c2:	bb 24       	eor	r11, r11
     6c4:	b1 f8       	bld	r11, 1
     6c6:	88 81       	ld	r24, Y
     6c8:	81 7f       	andi	r24, 0xF1	; 241
     6ca:	88 83       	st	Y, r24
     6cc:	88 81       	ld	r24, Y
     6ce:	81 60       	ori	r24, 0x01	; 1
     6d0:	88 83       	st	Y, r24
     6d2:	8f b7       	in	r24, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	f5 01       	movw	r30, r10
     6d8:	90 81       	ld	r25, Z
     6da:	94 60       	ori	r25, 0x04	; 4
     6dc:	90 83       	st	Z, r25
     6de:	8f bf       	out	0x3f, r24	; 63
     6e0:	88 95       	sleep
     6e2:	88 81       	ld	r24, Y
     6e4:	8e 7f       	andi	r24, 0xFE	; 254
     6e6:	88 83       	st	Y, r24
     6e8:	f5 01       	movw	r30, r10
     6ea:	64 a1       	ldd	r22, Z+36	; 0x24
     6ec:	75 a1       	ldd	r23, Z+37	; 0x25
     6ee:	88 27       	eor	r24, r24
     6f0:	77 fd       	sbrc	r23, 7
     6f2:	80 95       	com	r24
     6f4:	98 2f       	mov	r25, r24
     6f6:	0e 94 0c 18 	call	0x3018	; 0x3018 <__floatsisf>
     6fa:	a7 01       	movw	r20, r14
     6fc:	96 01       	movw	r18, r12
     6fe:	0e 94 76 17 	call	0x2eec	; 0x2eec <__divsf3>
     702:	9b 01       	movw	r18, r22
     704:	ac 01       	movw	r20, r24
     706:	c3 01       	movw	r24, r6
     708:	b2 01       	movw	r22, r4
     70a:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__addsf3>
     70e:	2b 01       	movw	r4, r22
     710:	3c 01       	movw	r6, r24
     712:	0f 5f       	subi	r16, 0xFF	; 255
     714:	1f 4f       	sbci	r17, 0xFF	; 255
     716:	b8 01       	movw	r22, r16
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 0a 18 	call	0x3014	; 0x3014 <__floatunsisf>
     720:	a7 01       	movw	r20, r14
     722:	96 01       	movw	r18, r12
     724:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__cmpsf2>
     728:	88 23       	and	r24, r24
     72a:	6c f2       	brlt	.-102    	; 0x6c6 <getADCValue+0xb6>
     72c:	03 c0       	rjmp	.+6      	; 0x734 <getADCValue+0x124>
     72e:	41 2c       	mov	r4, r1
     730:	51 2c       	mov	r5, r1
     732:	32 01       	movw	r6, r4
     734:	c3 01       	movw	r24, r6
     736:	b2 01       	movw	r22, r4
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	7f 90       	pop	r7
     74e:	6f 90       	pop	r6
     750:	5f 90       	pop	r5
     752:	4f 90       	pop	r4
     754:	08 95       	ret

00000756 <getPVVADCValue>:
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	60 e8       	ldi	r22, 0x80	; 128
     75c:	73 e4       	ldi	r23, 0x43	; 67
     75e:	8c e0       	ldi	r24, 0x0C	; 12
     760:	57 cf       	rjmp	.-338    	; 0x610 <getADCValue>
     762:	08 95       	ret

00000764 <getPVCADCValue>:
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	60 e8       	ldi	r22, 0x80	; 128
     76a:	73 e4       	ldi	r23, 0x43	; 67
     76c:	8d e0       	ldi	r24, 0x0D	; 13
     76e:	50 cf       	rjmp	.-352    	; 0x610 <getADCValue>
     770:	08 95       	ret

00000772 <getPVVADCVoltage>:
     772:	f1 df       	rcall	.-30     	; 0x756 <getPVVADCValue>
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 ee       	ldi	r19, 0xE0	; 224
     778:	4f ef       	ldi	r20, 0xFF	; 255
     77a:	54 e4       	ldi	r21, 0x44	; 68
     77c:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__divsf3>
     780:	08 95       	ret

00000782 <getPVCADCVoltage>:
     782:	f0 df       	rcall	.-32     	; 0x764 <getPVCADCValue>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 ee       	ldi	r19, 0xE0	; 224
     788:	4f ef       	ldi	r20, 0xFF	; 255
     78a:	54 e4       	ldi	r21, 0x44	; 68
     78c:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__divsf3>
     790:	08 95       	ret

00000792 <getPVVVoltage>:
     792:	ef df       	rcall	.-34     	; 0x772 <getPVVADCVoltage>
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e8       	ldi	r19, 0x80	; 128
     798:	46 e1       	ldi	r20, 0x16	; 22
     79a:	54 e4       	ldi	r21, 0x44	; 68
     79c:	0e 94 c0 18 	call	0x3180	; 0x3180 <__mulsf3>
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	48 e4       	ldi	r20, 0x48	; 72
     7a6:	53 e4       	ldi	r21, 0x43	; 67
     7a8:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__divsf3>
     7ac:	08 95       	ret

000007ae <getPVCCurrent>:

double getPVCCurrent(void){
	return (getPVCADCVoltage() * ADC_PVC_RATIO) / ADC_PVC_RSENSE;
     7ae:	e9 df       	rcall	.-46     	; 0x782 <getPVCADCVoltage>
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	4f e7       	ldi	r20, 0x7F	; 127
     7b6:	53 e4       	ldi	r21, 0x43	; 67
     7b8:	0e 94 c0 18 	call	0x3180	; 0x3180 <__mulsf3>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	44 ea       	ldi	r20, 0xA4	; 164
     7c2:	51 e4       	ldi	r21, 0x41	; 65
     7c4:	0e 94 76 17 	call	0x2eec	; 0x2eec <__divsf3>
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	40 e2       	ldi	r20, 0x20	; 32
     7ce:	51 e4       	ldi	r21, 0x41	; 65
     7d0:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__divsf3>
}
     7d4:	08 95       	ret

000007d6 <getPVPower>:

double getPVPower(void){
     7d6:	cf 92       	push	r12
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
	double voltage = getPVVVoltage();
     7de:	d9 df       	rcall	.-78     	; 0x792 <getPVVVoltage>
     7e0:	6b 01       	movw	r12, r22
     7e2:	7c 01       	movw	r14, r24
	double current = getPVCCurrent();
     7e4:	e4 df       	rcall	.-56     	; 0x7ae <getPVCCurrent>
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
	return voltage*current;
     7ea:	c7 01       	movw	r24, r14
     7ec:	b6 01       	movw	r22, r12
     7ee:	0e 94 c0 18 	call	0x3180	; 0x3180 <__mulsf3>
}
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	df 90       	pop	r13
     7f8:	cf 90       	pop	r12
     7fa:	08 95       	ret

000007fc <getPVVoc>:

double getPVVoc(void){
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     800:	e0 ea       	ldi	r30, 0xA0	; 160
     802:	f6 e0       	ldi	r31, 0x06	; 6
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	86 83       	std	Z+6, r24	; 0x06
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	86 83       	std	Z+6, r24	; 0x06
     80c:	80 e4       	ldi	r24, 0x40	; 64
     80e:	9d e0       	ldi	r25, 0x0D	; 13
     810:	a3 e0       	ldi	r26, 0x03	; 3
     812:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	a1 09       	sbc	r26, r1
     818:	b1 09       	sbc	r27, r1
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	a1 05       	cpc	r26, r1
     81e:	b1 05       	cpc	r27, r1
     820:	c9 f7       	brne	.-14     	; 0x814 <getPVVoc+0x18>
	gpio_set_pin_low(ADC_PVVOC_CTRL);
	gpio_set_pin_low(ADC_PVISC_CTRL);
	delay_ms(100);
	double pVVoc = getPVVVoltage();
     822:	b7 df       	rcall	.-146    	; 0x792 <getPVVVoltage>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     824:	22 e0       	ldi	r18, 0x02	; 2
     826:	e0 ea       	ldi	r30, 0xA0	; 160
     828:	f6 e0       	ldi	r31, 0x06	; 6
     82a:	25 83       	std	Z+5, r18	; 0x05
     82c:	00 e4       	ldi	r16, 0x40	; 64
     82e:	1d e0       	ldi	r17, 0x0D	; 13
     830:	23 e0       	ldi	r18, 0x03	; 3
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	01 50       	subi	r16, 0x01	; 1
     836:	11 09       	sbc	r17, r1
     838:	21 09       	sbc	r18, r1
     83a:	31 09       	sbc	r19, r1
     83c:	01 15       	cp	r16, r1
     83e:	11 05       	cpc	r17, r1
     840:	21 05       	cpc	r18, r1
     842:	31 05       	cpc	r19, r1
     844:	b9 f7       	brne	.-18     	; 0x834 <getPVVoc+0x38>
	gpio_set_pin_high(ADC_PVVOC_CTRL);
	delay_ms(100);
	return pVVoc;
}
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	08 95       	ret

0000084c <getPVIsc>:

double getPVIsc(void){
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     850:	e0 ea       	ldi	r30, 0xA0	; 160
     852:	f6 e0       	ldi	r31, 0x06	; 6
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	85 83       	std	Z+5, r24	; 0x05
     85c:	80 e4       	ldi	r24, 0x40	; 64
     85e:	9d e0       	ldi	r25, 0x0D	; 13
     860:	a3 e0       	ldi	r26, 0x03	; 3
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	a1 09       	sbc	r26, r1
     868:	b1 09       	sbc	r27, r1
     86a:	00 97       	sbiw	r24, 0x00	; 0
     86c:	a1 05       	cpc	r26, r1
     86e:	b1 05       	cpc	r27, r1
     870:	c9 f7       	brne	.-14     	; 0x864 <getPVIsc+0x18>
	gpio_set_pin_low(ADC_PVVOC_CTRL);
	gpio_set_pin_high(ADC_PVISC_CTRL);
	delay_ms(100);
	double pVIsc = getPVCCurrent();
     872:	9d df       	rcall	.-198    	; 0x7ae <getPVCCurrent>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     874:	e0 ea       	ldi	r30, 0xA0	; 160
     876:	f6 e0       	ldi	r31, 0x06	; 6
     878:	21 e0       	ldi	r18, 0x01	; 1
     87a:	26 83       	std	Z+6, r18	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     87c:	22 e0       	ldi	r18, 0x02	; 2
     87e:	25 83       	std	Z+5, r18	; 0x05
     880:	00 e4       	ldi	r16, 0x40	; 64
     882:	1d e0       	ldi	r17, 0x0D	; 13
     884:	23 e0       	ldi	r18, 0x03	; 3
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	01 50       	subi	r16, 0x01	; 1
     88a:	11 09       	sbc	r17, r1
     88c:	21 09       	sbc	r18, r1
     88e:	31 09       	sbc	r19, r1
     890:	01 15       	cp	r16, r1
     892:	11 05       	cpc	r17, r1
     894:	21 05       	cpc	r18, r1
     896:	31 05       	cpc	r19, r1
     898:	b9 f7       	brne	.-18     	; 0x888 <getPVIsc+0x3c>
	gpio_set_pin_low(ADC_PVISC_CTRL);
	gpio_set_pin_high(ADC_PVVOC_CTRL);
	delay_ms(100);
	return pVIsc;
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	08 95       	ret

000008a0 <getUIntFromReport>:
#include "usbUtils.h"
#include "fontUtils.h"
#include "DPot.h"
#include "measurements.h"

uint16_t getUIntFromReport(uint8_t *report){
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
	uint8_t numOfDigits = 0;
	int i;
	while(report[numOfDigits]!=0){
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 81       	ld	r18, Z
     8b4:	22 23       	and	r18, r18
     8b6:	89 f1       	breq	.+98     	; 0x91a <getUIntFromReport+0x7a>
#include "fontUtils.h"
#include "DPot.h"
#include "measurements.h"

uint16_t getUIntFromReport(uint8_t *report){
	uint8_t numOfDigits = 0;
     8b8:	e1 2c       	mov	r14, r1
	int i;
	while(report[numOfDigits]!=0){
		numOfDigits++;
     8ba:	e3 94       	inc	r14
#include "measurements.h"

uint16_t getUIntFromReport(uint8_t *report){
	uint8_t numOfDigits = 0;
	int i;
	while(report[numOfDigits]!=0){
     8bc:	fc 01       	movw	r30, r24
     8be:	ee 0d       	add	r30, r14
     8c0:	f1 1d       	adc	r31, r1
     8c2:	20 81       	ld	r18, Z
     8c4:	21 11       	cpse	r18, r1
     8c6:	f9 cf       	rjmp	.-14     	; 0x8ba <getUIntFromReport+0x1a>
		numOfDigits++;
	}
	uint16_t value = 0, dec = 1;
	for(i=numOfDigits-1; i>=0; i--){
     8c8:	0e 2d       	mov	r16, r14
     8ca:	10 e0       	ldi	r17, 0x00	; 0
     8cc:	01 50       	subi	r16, 0x01	; 1
     8ce:	11 09       	sbc	r17, r1
     8d0:	11 23       	and	r17, r17
     8d2:	34 f1       	brlt	.+76     	; 0x920 <getUIntFromReport+0x80>
     8d4:	7f 01       	movw	r14, r30
	uint8_t numOfDigits = 0;
	int i;
	while(report[numOfDigits]!=0){
		numOfDigits++;
	}
	uint16_t value = 0, dec = 1;
     8d6:	c1 e0       	ldi	r28, 0x01	; 1
     8d8:	d0 e0       	ldi	r29, 0x00	; 0
     8da:	c1 2c       	mov	r12, r1
     8dc:	d1 2c       	mov	r13, r1
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	ef 1a       	sub	r14, r31
     8e2:	f1 08       	sbc	r15, r1
	for(i=numOfDigits-1; i>=0; i--){
		value += getCharAsDigit(report[i]) * dec;
     8e4:	f7 01       	movw	r30, r14
     8e6:	80 81       	ld	r24, Z
     8e8:	0e 94 5d 16 	call	0x2cba	; 0x2cba <getCharAsDigit>
     8ec:	f8 2f       	mov	r31, r24
     8ee:	fc 9f       	mul	r31, r28
     8f0:	c0 01       	movw	r24, r0
     8f2:	fd 9f       	mul	r31, r29
     8f4:	90 0d       	add	r25, r0
     8f6:	11 24       	eor	r1, r1
     8f8:	c8 0e       	add	r12, r24
     8fa:	d9 1e       	adc	r13, r25
		dec*=10;
     8fc:	ce 01       	movw	r24, r28
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	cc 0f       	add	r28, r28
     904:	dd 1f       	adc	r29, r29
     906:	cc 0f       	add	r28, r28
     908:	dd 1f       	adc	r29, r29
     90a:	cc 0f       	add	r28, r28
     90c:	dd 1f       	adc	r29, r29
     90e:	c8 0f       	add	r28, r24
     910:	d9 1f       	adc	r29, r25
	int i;
	while(report[numOfDigits]!=0){
		numOfDigits++;
	}
	uint16_t value = 0, dec = 1;
	for(i=numOfDigits-1; i>=0; i--){
     912:	01 50       	subi	r16, 0x01	; 1
     914:	11 09       	sbc	r17, r1
     916:	18 f7       	brcc	.-58     	; 0x8de <getUIntFromReport+0x3e>
     918:	05 c0       	rjmp	.+10     	; 0x924 <getUIntFromReport+0x84>
	uint8_t numOfDigits = 0;
	int i;
	while(report[numOfDigits]!=0){
		numOfDigits++;
	}
	uint16_t value = 0, dec = 1;
     91a:	c1 2c       	mov	r12, r1
     91c:	d1 2c       	mov	r13, r1
     91e:	02 c0       	rjmp	.+4      	; 0x924 <getUIntFromReport+0x84>
     920:	c1 2c       	mov	r12, r1
     922:	d1 2c       	mov	r13, r1
		value += getCharAsDigit(report[i]) * dec;
		dec*=10;
	}
	
	return value;
}
     924:	c6 01       	movw	r24, r12
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	cf 90       	pop	r12
     936:	08 95       	ret

00000938 <my_callback_generic_report_out>:

void my_callback_generic_report_out(uint8_t *report){
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	c0 54       	subi	r28, 0x40	; 64
     94c:	d1 09       	sbc	r29, r1
     94e:	cd bf       	out	0x3d, r28	; 61
     950:	de bf       	out	0x3e, r29	; 62
	char cmd = report[0];
     952:	dc 01       	movw	r26, r24
     954:	dd 90       	ld	r13, X+
     956:	cd 01       	movw	r24, r26
	uint16_t v = getUIntFromReport(&report[1]);
     958:	a3 df       	rcall	.-186    	; 0x8a0 <getUIntFromReport>
     95a:	f8 2e       	mov	r15, r24
     95c:	e9 2e       	mov	r14, r25
	char * c = getIntAsString(v);
     95e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <getIntAsString>
     962:	8c 01       	movw	r16, r24
	char * res;
	char resp[64];
	memset(resp, 0, sizeof(cmd) * UDI_HID_REPORT_IN_SIZE);
     964:	fe 01       	movw	r30, r28
     966:	31 96       	adiw	r30, 0x01	; 1
     968:	80 e4       	ldi	r24, 0x40	; 64
     96a:	df 01       	movw	r26, r30
     96c:	1d 92       	st	X+, r1
     96e:	8a 95       	dec	r24
     970:	e9 f7       	brne	.-6      	; 0x96c <my_callback_generic_report_out+0x34>
	switch(cmd){
     972:	b3 e3       	ldi	r27, 0x33	; 51
     974:	db 16       	cp	r13, r27
     976:	09 f4       	brne	.+2      	; 0x97a <my_callback_generic_report_out+0x42>
     978:	45 c0       	rjmp	.+138    	; 0xa04 <my_callback_generic_report_out+0xcc>
     97a:	bd 15       	cp	r27, r13
     97c:	3c f0       	brlt	.+14     	; 0x98c <my_callback_generic_report_out+0x54>
     97e:	e1 e3       	ldi	r30, 0x31	; 49
     980:	de 16       	cp	r13, r30
     982:	81 f0       	breq	.+32     	; 0x9a4 <my_callback_generic_report_out+0x6c>
     984:	f2 e3       	ldi	r31, 0x32	; 50
     986:	df 16       	cp	r13, r31
     988:	39 f1       	breq	.+78     	; 0x9d8 <my_callback_generic_report_out+0xa0>
     98a:	a1 c0       	rjmp	.+322    	; 0xace <my_callback_generic_report_out+0x196>
     98c:	25 e3       	ldi	r18, 0x35	; 53
     98e:	d2 16       	cp	r13, r18
     990:	09 f4       	brne	.+2      	; 0x994 <my_callback_generic_report_out+0x5c>
     992:	68 c0       	rjmp	.+208    	; 0xa64 <my_callback_generic_report_out+0x12c>
     994:	d2 16       	cp	r13, r18
     996:	0c f4       	brge	.+2      	; 0x99a <my_callback_generic_report_out+0x62>
     998:	4b c0       	rjmp	.+150    	; 0xa30 <my_callback_generic_report_out+0xf8>
     99a:	36 e3       	ldi	r19, 0x36	; 54
     99c:	d3 16       	cp	r13, r19
     99e:	09 f4       	brne	.+2      	; 0x9a2 <my_callback_generic_report_out+0x6a>
     9a0:	7b c0       	rjmp	.+246    	; 0xa98 <my_callback_generic_report_out+0x160>
     9a2:	95 c0       	rjmp	.+298    	; 0xace <my_callback_generic_report_out+0x196>
		case '1':
			//udi_hid_generic_send_report_in("Nominal Resistance set to: ");
			res = getDoubleAsString(dPotCalibrate());
     9a4:	0e 94 dd 15 	call	0x2bba	; 0x2bba <dPotCalibrate>
     9a8:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <getDoubleAsString>
     9ac:	7c 01       	movw	r14, r24
			strcpy(resp, USB_CMD1_RESP);
     9ae:	8c e1       	ldi	r24, 0x1C	; 28
     9b0:	e7 e9       	ldi	r30, 0x97	; 151
     9b2:	f0 e2       	ldi	r31, 0x20	; 32
     9b4:	de 01       	movw	r26, r28
     9b6:	11 96       	adiw	r26, 0x01	; 1
     9b8:	01 90       	ld	r0, Z+
     9ba:	0d 92       	st	X+, r0
     9bc:	8a 95       	dec	r24
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <my_callback_generic_report_out+0x80>
			strcat(resp, res);
     9c0:	b7 01       	movw	r22, r14
     9c2:	ce 01       	movw	r24, r28
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <strcat>
			udi_hid_generic_send_report_in((uint8_t*) resp); //Send report to host
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	ba d3       	rcall	.+1908   	; 0x1144 <udi_hid_generic_send_report_in>
			free(res);
     9d0:	c7 01       	movw	r24, r14
     9d2:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <free>
			//dPotSetNomRes(v);
			break;
     9d6:	a9 c0       	rjmp	.+338    	; 0xb2a <my_callback_generic_report_out+0x1f2>
		case '2':
			//udi_hid_generic_send_report_in("Var Resistance set to: ");
			strcpy(resp, USB_CMD2_RESP);
     9d8:	88 e1       	ldi	r24, 0x18	; 24
     9da:	e3 eb       	ldi	r30, 0xB3	; 179
     9dc:	f0 e2       	ldi	r31, 0x20	; 32
     9de:	de 01       	movw	r26, r28
     9e0:	11 96       	adiw	r26, 0x01	; 1
     9e2:	01 90       	ld	r0, Z+
     9e4:	0d 92       	st	X+, r0
     9e6:	8a 95       	dec	r24
     9e8:	e1 f7       	brne	.-8      	; 0x9e2 <my_callback_generic_report_out+0xaa>
			strcat(resp,c);
     9ea:	b8 01       	movw	r22, r16
     9ec:	ce 01       	movw	r24, r28
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <strcat>
			udi_hid_generic_send_report_in((uint8_t*) resp); //Send report to host
     9f4:	ce 01       	movw	r24, r28
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	a5 d3       	rcall	.+1866   	; 0x1144 <udi_hid_generic_send_report_in>
			dPotSetRes(v);
     9fa:	8f 2d       	mov	r24, r15
     9fc:	9e 2d       	mov	r25, r14
     9fe:	0e 94 41 15 	call	0x2a82	; 0x2a82 <dPotSetRes>
			break;
     a02:	93 c0       	rjmp	.+294    	; 0xb2a <my_callback_generic_report_out+0x1f2>
		case '3':
			//udi_hid_generic_send_report_in("Var Resistance set to: ");
			strcpy(resp, USB_CMD3_RESP);
     a04:	8e e1       	ldi	r24, 0x1E	; 30
     a06:	eb ec       	ldi	r30, 0xCB	; 203
     a08:	f0 e2       	ldi	r31, 0x20	; 32
     a0a:	de 01       	movw	r26, r28
     a0c:	11 96       	adiw	r26, 0x01	; 1
     a0e:	01 90       	ld	r0, Z+
     a10:	0d 92       	st	X+, r0
     a12:	8a 95       	dec	r24
     a14:	e1 f7       	brne	.-8      	; 0xa0e <my_callback_generic_report_out+0xd6>
			strcat(resp,c);
     a16:	b8 01       	movw	r22, r16
     a18:	ce 01       	movw	r24, r28
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <strcat>
			udi_hid_generic_send_report_in((uint8_t*) resp); //Send report to host
     a20:	ce 01       	movw	r24, r28
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	8f d3       	rcall	.+1822   	; 0x1144 <udi_hid_generic_send_report_in>
			dPotSetValue(v);
     a26:	8f 2d       	mov	r24, r15
     a28:	9e 2d       	mov	r25, r14
     a2a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <dPotSetValue>
			break;
     a2e:	7d c0       	rjmp	.+250    	; 0xb2a <my_callback_generic_report_out+0x1f2>
		case '4':
			res = getDoubleAsString(dPotReadRes());
     a30:	0e 94 91 15 	call	0x2b22	; 0x2b22 <dPotReadRes>
     a34:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <getDoubleAsString>
     a38:	7c 01       	movw	r14, r24
			strcpy(resp, USB_CMD4_RESP);
     a3a:	85 e1       	ldi	r24, 0x15	; 21
     a3c:	e9 ee       	ldi	r30, 0xE9	; 233
     a3e:	f0 e2       	ldi	r31, 0x20	; 32
     a40:	de 01       	movw	r26, r28
     a42:	11 96       	adiw	r26, 0x01	; 1
     a44:	01 90       	ld	r0, Z+
     a46:	0d 92       	st	X+, r0
     a48:	8a 95       	dec	r24
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <my_callback_generic_report_out+0x10c>
			strcat(resp,res);
     a4c:	b7 01       	movw	r22, r14
     a4e:	ce 01       	movw	r24, r28
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <strcat>
			udi_hid_generic_send_report_in((uint8_t*) resp); //Send report to host
     a56:	ce 01       	movw	r24, r28
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	74 d3       	rcall	.+1768   	; 0x1144 <udi_hid_generic_send_report_in>
			free(res);
     a5c:	c7 01       	movw	r24, r14
     a5e:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <free>
			break;
     a62:	63 c0       	rjmp	.+198    	; 0xb2a <my_callback_generic_report_out+0x1f2>
		case '5':
			res = getIntAsString(dPotReadRDAC());
     a64:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <dPotReadRDAC>
     a68:	0e 94 80 16 	call	0x2d00	; 0x2d00 <getIntAsString>
     a6c:	7c 01       	movw	r14, r24
			strcpy(resp, USB_CMD5_RESP);
     a6e:	80 e1       	ldi	r24, 0x10	; 16
     a70:	ee ef       	ldi	r30, 0xFE	; 254
     a72:	f0 e2       	ldi	r31, 0x20	; 32
     a74:	de 01       	movw	r26, r28
     a76:	11 96       	adiw	r26, 0x01	; 1
     a78:	01 90       	ld	r0, Z+
     a7a:	0d 92       	st	X+, r0
     a7c:	8a 95       	dec	r24
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <my_callback_generic_report_out+0x140>
			strcat(resp,res);
     a80:	b7 01       	movw	r22, r14
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <strcat>
			udi_hid_generic_send_report_in((uint8_t*) resp); //Send report to host
     a8a:	ce 01       	movw	r24, r28
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	5a d3       	rcall	.+1716   	; 0x1144 <udi_hid_generic_send_report_in>
			free(res);
     a90:	c7 01       	movw	r24, r14
     a92:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <free>
			break;
     a96:	49 c0       	rjmp	.+146    	; 0xb2a <my_callback_generic_report_out+0x1f2>
		case '6':
			res = getIntAsString(dPotReadFromMem(v));
     a98:	8f 2d       	mov	r24, r15
     a9a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <dPotReadFromMem>
     a9e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <getIntAsString>
     aa2:	7c 01       	movw	r14, r24
			strcpy(resp, USB_CMD6_RESP);
     aa4:	83 e1       	ldi	r24, 0x13	; 19
     aa6:	ee e0       	ldi	r30, 0x0E	; 14
     aa8:	f1 e2       	ldi	r31, 0x21	; 33
     aaa:	de 01       	movw	r26, r28
     aac:	11 96       	adiw	r26, 0x01	; 1
     aae:	01 90       	ld	r0, Z+
     ab0:	0d 92       	st	X+, r0
     ab2:	8a 95       	dec	r24
     ab4:	e1 f7       	brne	.-8      	; 0xaae <my_callback_generic_report_out+0x176>
			strcat(resp,res);
     ab6:	b7 01       	movw	r22, r14
     ab8:	ce 01       	movw	r24, r28
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <strcat>
			udi_hid_generic_send_report_in((uint8_t*) resp); //Send report to host
     ac0:	ce 01       	movw	r24, r28
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	3f d3       	rcall	.+1662   	; 0x1144 <udi_hid_generic_send_report_in>
			free(res);
     ac6:	c7 01       	movw	r24, r14
     ac8:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <free>
			break;
     acc:	2e c0       	rjmp	.+92     	; 0xb2a <my_callback_generic_report_out+0x1f2>
		default:
			//udi_hid_generic_send_report_in("Unidentified Command: ");
			strcpy(resp,"Unidentified Command ");
     ace:	86 e1       	ldi	r24, 0x16	; 22
     ad0:	e1 e2       	ldi	r30, 0x21	; 33
     ad2:	f1 e2       	ldi	r31, 0x21	; 33
     ad4:	de 01       	movw	r26, r28
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	7d 01       	movw	r14, r26
     ada:	01 90       	ld	r0, Z+
     adc:	0d 92       	st	X+, r0
     ade:	8a 95       	dec	r24
     ae0:	e1 f7       	brne	.-8      	; 0xada <my_callback_generic_report_out+0x1a2>
			uint8_t cur_len = strlen(resp);
     ae2:	f7 01       	movw	r30, r14
     ae4:	01 90       	ld	r0, Z+
     ae6:	00 20       	and	r0, r0
     ae8:	e9 f7       	brne	.-6      	; 0xae4 <my_callback_generic_report_out+0x1ac>
     aea:	31 97       	sbiw	r30, 0x01	; 1
     aec:	ee 19       	sub	r30, r14
     aee:	ff 09       	sbc	r31, r15
     af0:	ff 27       	eor	r31, r31
			resp[cur_len] = cmd;
     af2:	d7 01       	movw	r26, r14
     af4:	ae 0f       	add	r26, r30
     af6:	bf 1f       	adc	r27, r31
     af8:	dc 92       	st	X, r13
			resp[cur_len + 1] = '\0';
     afa:	ec 0f       	add	r30, r28
     afc:	fd 1f       	adc	r31, r29
     afe:	12 82       	std	Z+2, r1	; 0x02
			strcat(resp,": ");
     b00:	f7 01       	movw	r30, r14
     b02:	01 90       	ld	r0, Z+
     b04:	00 20       	and	r0, r0
     b06:	e9 f7       	brne	.-6      	; 0xb02 <my_callback_generic_report_out+0x1ca>
     b08:	31 97       	sbiw	r30, 0x01	; 1
     b0a:	2a e3       	ldi	r18, 0x3A	; 58
     b0c:	30 e2       	ldi	r19, 0x20	; 32
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	20 83       	st	Z, r18
     b12:	31 83       	std	Z+1, r19	; 0x01
     b14:	42 83       	std	Z+2, r20	; 0x02
			strcat(resp,c);
     b16:	b8 01       	movw	r22, r16
     b18:	c7 01       	movw	r24, r14
     b1a:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <strcat>
			udi_hid_generic_send_report_in((uint8_t*) resp); //Send report to host
     b1e:	c7 01       	movw	r24, r14
     b20:	11 d3       	rcall	.+1570   	; 0x1144 <udi_hid_generic_send_report_in>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	e0 ee       	ldi	r30, 0xE0	; 224
     b26:	f7 e0       	ldi	r31, 0x07	; 7
     b28:	86 83       	std	Z+6, r24	; 0x06
			LED_On(LED0);
			break;
	}
	
	free(c);
     b2a:	c8 01       	movw	r24, r16
     b2c:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <free>
	
	
}
     b30:	c0 5c       	subi	r28, 0xC0	; 192
     b32:	df 4f       	sbci	r29, 0xFF	; 255
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	08 95       	ret

00000b48 <usbSendPVVVoltage>:

void usbSendPVVVoltage(void){
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	c0 54       	subi	r28, 0x40	; 64
     b5a:	d1 09       	sbc	r29, r1
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	de bf       	out	0x3e, r29	; 62
	double pvVVV = getPVVVoltage();
     b60:	18 de       	rcall	.-976    	; 0x792 <getPVVVoltage>
	char resp[64];
	memset(resp, 0, sizeof(char) * UDI_HID_REPORT_IN_SIZE);
     b62:	8e 01       	movw	r16, r28
     b64:	0f 5f       	subi	r16, 0xFF	; 255
     b66:	1f 4f       	sbci	r17, 0xFF	; 255
     b68:	20 e4       	ldi	r18, 0x40	; 64
     b6a:	f8 01       	movw	r30, r16
     b6c:	11 92       	st	Z+, r1
     b6e:	2a 95       	dec	r18
     b70:	e9 f7       	brne	.-6      	; 0xb6c <usbSendPVVVoltage+0x24>
	char * res = getDoubleAsString(pvVVV);
     b72:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <getDoubleAsString>
     b76:	7c 01       	movw	r14, r24
	strcpy(resp,USB_PVVV_RESP);
     b78:	86 e0       	ldi	r24, 0x06	; 6
     b7a:	e7 e3       	ldi	r30, 0x37	; 55
     b7c:	f1 e2       	ldi	r31, 0x21	; 33
     b7e:	d8 01       	movw	r26, r16
     b80:	01 90       	ld	r0, Z+
     b82:	0d 92       	st	X+, r0
     b84:	8a 95       	dec	r24
     b86:	e1 f7       	brne	.-8      	; 0xb80 <usbSendPVVVoltage+0x38>
	strcat(resp,res);
     b88:	b7 01       	movw	r22, r14
     b8a:	c8 01       	movw	r24, r16
     b8c:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <strcat>
	udi_hid_generic_send_report_in((uint8_t*) resp);
     b90:	c8 01       	movw	r24, r16
     b92:	d8 d2       	rcall	.+1456   	; 0x1144 <udi_hid_generic_send_report_in>
	free(res);
     b94:	c7 01       	movw	r24, r14
     b96:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <free>
     b9a:	80 ec       	ldi	r24, 0xC0	; 192
     b9c:	97 e2       	ldi	r25, 0x27	; 39
     b9e:	a9 e0       	ldi	r26, 0x09	; 9
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	a1 09       	sbc	r26, r1
     ba6:	b1 09       	sbc	r27, r1
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	a1 05       	cpc	r26, r1
     bac:	b1 05       	cpc	r27, r1
     bae:	c9 f7       	brne	.-14     	; 0xba2 <usbSendPVVVoltage+0x5a>
	delay_ms(300);
}
     bb0:	c0 5c       	subi	r28, 0xC0	; 192
     bb2:	df 4f       	sbci	r29, 0xFF	; 255
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	08 95       	ret

00000bc6 <usbSendPVCCurrent>:

void usbSendPVCCurrent(void){
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	c0 54       	subi	r28, 0x40	; 64
     bd8:	d1 09       	sbc	r29, r1
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	de bf       	out	0x3e, r29	; 62
	double pvCC = getPVCCurrent();
     bde:	e7 dd       	rcall	.-1074   	; 0x7ae <getPVCCurrent>
	char resp[64];
	memset(resp, 0, sizeof(char) * UDI_HID_REPORT_IN_SIZE);
     be0:	8e 01       	movw	r16, r28
     be2:	0f 5f       	subi	r16, 0xFF	; 255
     be4:	1f 4f       	sbci	r17, 0xFF	; 255
     be6:	20 e4       	ldi	r18, 0x40	; 64
     be8:	f8 01       	movw	r30, r16
     bea:	11 92       	st	Z+, r1
     bec:	2a 95       	dec	r18
     bee:	e9 f7       	brne	.-6      	; 0xbea <usbSendPVCCurrent+0x24>
	char * res = getDoubleAsString(pvCC);
     bf0:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <getDoubleAsString>
     bf4:	7c 01       	movw	r14, r24
	strcpy(resp,USB_PVCC_RESP);
     bf6:	86 e0       	ldi	r24, 0x06	; 6
     bf8:	ed e3       	ldi	r30, 0x3D	; 61
     bfa:	f1 e2       	ldi	r31, 0x21	; 33
     bfc:	d8 01       	movw	r26, r16
     bfe:	01 90       	ld	r0, Z+
     c00:	0d 92       	st	X+, r0
     c02:	8a 95       	dec	r24
     c04:	e1 f7       	brne	.-8      	; 0xbfe <usbSendPVCCurrent+0x38>
	strcat(resp,res);
     c06:	b7 01       	movw	r22, r14
     c08:	c8 01       	movw	r24, r16
     c0a:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <strcat>
	udi_hid_generic_send_report_in((uint8_t*) resp);
     c0e:	c8 01       	movw	r24, r16
     c10:	99 d2       	rcall	.+1330   	; 0x1144 <udi_hid_generic_send_report_in>
	free(res);
     c12:	c7 01       	movw	r24, r14
     c14:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <free>
     c18:	80 ec       	ldi	r24, 0xC0	; 192
     c1a:	97 e2       	ldi	r25, 0x27	; 39
     c1c:	a9 e0       	ldi	r26, 0x09	; 9
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	a1 09       	sbc	r26, r1
     c24:	b1 09       	sbc	r27, r1
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	a1 05       	cpc	r26, r1
     c2a:	b1 05       	cpc	r27, r1
     c2c:	c9 f7       	brne	.-14     	; 0xc20 <usbSendPVCCurrent+0x5a>
	delay_ms(300);
}
     c2e:	c0 5c       	subi	r28, 0xC0	; 192
     c30:	df 4f       	sbci	r29, 0xFF	; 255
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	08 95       	ret

00000c44 <usbSendPVPower>:

void usbSendPVPower(void){
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	c0 54       	subi	r28, 0x40	; 64
     c56:	d1 09       	sbc	r29, r1
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	de bf       	out	0x3e, r29	; 62
	double pvP = getPVPower();
     c5c:	bc dd       	rcall	.-1160   	; 0x7d6 <getPVPower>
	char resp[64];
	memset(resp, 0, sizeof(char) * UDI_HID_REPORT_IN_SIZE);
     c5e:	8e 01       	movw	r16, r28
     c60:	0f 5f       	subi	r16, 0xFF	; 255
     c62:	1f 4f       	sbci	r17, 0xFF	; 255
     c64:	20 e4       	ldi	r18, 0x40	; 64
     c66:	f8 01       	movw	r30, r16
     c68:	11 92       	st	Z+, r1
     c6a:	2a 95       	dec	r18
     c6c:	e9 f7       	brne	.-6      	; 0xc68 <usbSendPVPower+0x24>
	char * res = getDoubleAsString(pvP);
     c6e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <getDoubleAsString>
     c72:	7c 01       	movw	r14, r24
	strcpy(resp,USB_PVP_RESP);
     c74:	85 e0       	ldi	r24, 0x05	; 5
     c76:	e3 e4       	ldi	r30, 0x43	; 67
     c78:	f1 e2       	ldi	r31, 0x21	; 33
     c7a:	d8 01       	movw	r26, r16
     c7c:	01 90       	ld	r0, Z+
     c7e:	0d 92       	st	X+, r0
     c80:	8a 95       	dec	r24
     c82:	e1 f7       	brne	.-8      	; 0xc7c <usbSendPVPower+0x38>
	strcat(resp,res);
     c84:	b7 01       	movw	r22, r14
     c86:	c8 01       	movw	r24, r16
     c88:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <strcat>
	udi_hid_generic_send_report_in((uint8_t*) resp);
     c8c:	c8 01       	movw	r24, r16
     c8e:	5a d2       	rcall	.+1204   	; 0x1144 <udi_hid_generic_send_report_in>
	free(res);
     c90:	c7 01       	movw	r24, r14
     c92:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <free>
     c96:	80 ec       	ldi	r24, 0xC0	; 192
     c98:	97 e2       	ldi	r25, 0x27	; 39
     c9a:	a9 e0       	ldi	r26, 0x09	; 9
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	a1 05       	cpc	r26, r1
     ca8:	b1 05       	cpc	r27, r1
     caa:	c9 f7       	brne	.-14     	; 0xc9e <usbSendPVPower+0x5a>
	delay_ms(300);
}
     cac:	c0 5c       	subi	r28, 0xC0	; 192
     cae:	df 4f       	sbci	r29, 0xFF	; 255
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	08 95       	ret

00000cc2 <usbSendPVVoc>:

void usbSendPVVoc(void){
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	c0 54       	subi	r28, 0x40	; 64
     cd4:	d1 09       	sbc	r29, r1
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	de bf       	out	0x3e, r29	; 62
	double pvVoc = getPVVoc();
     cda:	90 dd       	rcall	.-1248   	; 0x7fc <getPVVoc>
	char resp[64];
	memset(resp, 0, sizeof(char) * UDI_HID_REPORT_IN_SIZE);
     cdc:	8e 01       	movw	r16, r28
     cde:	0f 5f       	subi	r16, 0xFF	; 255
     ce0:	1f 4f       	sbci	r17, 0xFF	; 255
     ce2:	20 e4       	ldi	r18, 0x40	; 64
     ce4:	f8 01       	movw	r30, r16
     ce6:	11 92       	st	Z+, r1
     ce8:	2a 95       	dec	r18
     cea:	e9 f7       	brne	.-6      	; 0xce6 <usbSendPVVoc+0x24>
	char * res = getDoubleAsString(pvVoc);
     cec:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <getDoubleAsString>
     cf0:	7c 01       	movw	r14, r24
	strcpy(resp,USB_PVVOC_RESP);
     cf2:	87 e0       	ldi	r24, 0x07	; 7
     cf4:	e8 e4       	ldi	r30, 0x48	; 72
     cf6:	f1 e2       	ldi	r31, 0x21	; 33
     cf8:	d8 01       	movw	r26, r16
     cfa:	01 90       	ld	r0, Z+
     cfc:	0d 92       	st	X+, r0
     cfe:	8a 95       	dec	r24
     d00:	e1 f7       	brne	.-8      	; 0xcfa <usbSendPVVoc+0x38>
	strcat(resp,res);
     d02:	b7 01       	movw	r22, r14
     d04:	c8 01       	movw	r24, r16
     d06:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <strcat>
	udi_hid_generic_send_report_in((uint8_t*) resp);
     d0a:	c8 01       	movw	r24, r16
     d0c:	1b d2       	rcall	.+1078   	; 0x1144 <udi_hid_generic_send_report_in>
	free(res);
     d0e:	c7 01       	movw	r24, r14
     d10:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <free>
     d14:	80 ec       	ldi	r24, 0xC0	; 192
     d16:	97 e2       	ldi	r25, 0x27	; 39
     d18:	a9 e0       	ldi	r26, 0x09	; 9
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	a1 09       	sbc	r26, r1
     d20:	b1 09       	sbc	r27, r1
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	a1 05       	cpc	r26, r1
     d26:	b1 05       	cpc	r27, r1
     d28:	c9 f7       	brne	.-14     	; 0xd1c <usbSendPVVoc+0x5a>
	delay_ms(300);
}
     d2a:	c0 5c       	subi	r28, 0xC0	; 192
     d2c:	df 4f       	sbci	r29, 0xFF	; 255
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	08 95       	ret

00000d40 <usbSendPVIsc>:

void usbSendPVIsc(void){
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	c0 54       	subi	r28, 0x40	; 64
     d52:	d1 09       	sbc	r29, r1
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	de bf       	out	0x3e, r29	; 62
	double pvIsc = getPVIsc();
     d58:	79 dd       	rcall	.-1294   	; 0x84c <getPVIsc>
	char resp[64];
	memset(resp, 0, sizeof(char) * UDI_HID_REPORT_IN_SIZE);
     d5a:	8e 01       	movw	r16, r28
     d5c:	0f 5f       	subi	r16, 0xFF	; 255
     d5e:	1f 4f       	sbci	r17, 0xFF	; 255
     d60:	20 e4       	ldi	r18, 0x40	; 64
     d62:	f8 01       	movw	r30, r16
     d64:	11 92       	st	Z+, r1
     d66:	2a 95       	dec	r18
     d68:	e9 f7       	brne	.-6      	; 0xd64 <usbSendPVIsc+0x24>
	char * res = getDoubleAsString(pvIsc);
     d6a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <getDoubleAsString>
     d6e:	7c 01       	movw	r14, r24
	strcpy(resp,USB_PVISC_RESP);
     d70:	87 e0       	ldi	r24, 0x07	; 7
     d72:	ef e4       	ldi	r30, 0x4F	; 79
     d74:	f1 e2       	ldi	r31, 0x21	; 33
     d76:	d8 01       	movw	r26, r16
     d78:	01 90       	ld	r0, Z+
     d7a:	0d 92       	st	X+, r0
     d7c:	8a 95       	dec	r24
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <usbSendPVIsc+0x38>
	strcat(resp,res);
     d80:	b7 01       	movw	r22, r14
     d82:	c8 01       	movw	r24, r16
     d84:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <strcat>
	udi_hid_generic_send_report_in((uint8_t*) resp);
     d88:	c8 01       	movw	r24, r16
     d8a:	dc d1       	rcall	.+952    	; 0x1144 <udi_hid_generic_send_report_in>
	free(res);
     d8c:	c7 01       	movw	r24, r14
     d8e:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <free>
     d92:	80 ec       	ldi	r24, 0xC0	; 192
     d94:	97 e2       	ldi	r25, 0x27	; 39
     d96:	a9 e0       	ldi	r26, 0x09	; 9
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	a1 09       	sbc	r26, r1
     d9e:	b1 09       	sbc	r27, r1
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	a1 05       	cpc	r26, r1
     da4:	b1 05       	cpc	r27, r1
     da6:	c9 f7       	brne	.-14     	; 0xd9a <usbSendPVIsc+0x5a>
	delay_ms(300);
     da8:	c0 5c       	subi	r28, 0xC0	; 192
     daa:	df 4f       	sbci	r29, 0xFF	; 255
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	ff 90       	pop	r15
     dba:	ef 90       	pop	r14
     dbc:	08 95       	ret

00000dbe <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <sysclk_init+0x6>
     dc4:	1f 92       	push	r1
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	80 93 70 00 	sts	0x0070, r24
     dd0:	80 93 71 00 	sts	0x0071, r24
     dd4:	80 93 72 00 	sts	0x0072, r24
     dd8:	80 93 73 00 	sts	0x0073, r24
     ddc:	80 93 74 00 	sts	0x0074, r24
     de0:	80 93 75 00 	sts	0x0075, r24
     de4:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     de8:	65 e0       	ldi	r22, 0x05	; 5
     dea:	81 e4       	ldi	r24, 0x41	; 65
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	d3 d6       	rcall	.+3494   	; 0x1b96 <ccp_write_io>
     df0:	6c e1       	ldi	r22, 0x1C	; 28
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	d5 d6       	rcall	.+3498   	; 0x1ba2 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
     df8:	8a 83       	std	Y+2, r24	; 0x02
     dfa:	6d e1       	ldi	r22, 0x1D	; 29
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	d0 d6       	rcall	.+3488   	; 0x1ba2 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
     e02:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	21 f4       	brne	.+8      	; 0xe14 <sysclk_init+0x56>
		cal = 0x2340;
     e0c:	80 e4       	ldi	r24, 0x40	; 64
     e0e:	93 e2       	ldi	r25, 0x23	; 35
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	8b 83       	std	Y+3, r24	; 0x03
     e1a:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
     e1c:	e0 e6       	ldi	r30, 0x60	; 96
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
     e22:	8c 81       	ldd	r24, Y+4	; 0x04
     e24:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     e26:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     e28:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     e2a:	e0 e5       	ldi	r30, 0x50	; 80
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	90 81       	ld	r25, Z
     e30:	92 60       	ori	r25, 0x02	; 2
     e32:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e34:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e36:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     e38:	81 ff       	sbrs	r24, 1
     e3a:	fd cf       	rjmp	.-6      	; 0xe36 <sysclk_init+0x78>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     e3c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     e3e:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     e40:	a0 e5       	ldi	r26, 0x50	; 80
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	16 96       	adiw	r26, 0x06	; 6
     e46:	9c 91       	ld	r25, X
     e48:	16 97       	sbiw	r26, 0x06	; 6
     e4a:	99 7f       	andi	r25, 0xF9	; 249
     e4c:	16 96       	adiw	r26, 0x06	; 6
     e4e:	9c 93       	st	X, r25
     e50:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     e52:	e0 e6       	ldi	r30, 0x60	; 96
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	90 e8       	ldi	r25, 0x80	; 128
     e58:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     e5a:	9b eb       	ldi	r25, 0xBB	; 187
     e5c:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     e5e:	16 96       	adiw	r26, 0x06	; 6
     e60:	9c 91       	ld	r25, X
     e62:	16 97       	sbiw	r26, 0x06	; 6
     e64:	94 60       	ori	r25, 0x04	; 4
     e66:	16 96       	adiw	r26, 0x06	; 6
     e68:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     e6a:	90 81       	ld	r25, Z
     e6c:	91 60       	ori	r25, 0x01	; 1
     e6e:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e70:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	80 e4       	ldi	r24, 0x40	; 64
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	8e d6       	rcall	.+3356   	; 0x1b96 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     e7a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     e7c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     e7e:	e0 e5       	ldi	r30, 0x50	; 80
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	90 81       	ld	r25, Z
     e84:	9e 7f       	andi	r25, 0xFE	; 254
     e86:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e88:	8f bf       	out	0x3f, r24	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     e8a:	24 96       	adiw	r28, 0x04	; 4
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	08 95       	ret

00000e96 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     e96:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     e98:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     e9a:	e8 2f       	mov	r30, r24
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	e0 59       	subi	r30, 0x90	; 144
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	60 95       	com	r22
     ea4:	80 81       	ld	r24, Z
     ea6:	68 23       	and	r22, r24
     ea8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     eaa:	9f bf       	out	0x3f, r25	; 63
     eac:	08 95       	ret

00000eae <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     eae:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     eb0:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     eb2:	e8 2f       	mov	r30, r24
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	e0 59       	subi	r30, 0x90	; 144
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	80 81       	ld	r24, Z
     ebc:	68 2b       	or	r22, r24
     ebe:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ec0:	9f bf       	out	0x3f, r25	; 63
     ec2:	08 95       	ret

00000ec4 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     ec4:	86 30       	cpi	r24, 0x06	; 6
     ec6:	11 f4       	brne	.+4      	; 0xecc <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
     ec8:	68 e1       	ldi	r22, 0x18	; 24
     eca:	01 c0       	rjmp	.+2      	; 0xece <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
     ecc:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     ece:	e0 e5       	ldi	r30, 0x50	; 80
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     ed4:	81 fd       	sbrc	r24, 1
     ed6:	24 c0       	rjmp	.+72     	; 0xf20 <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     ed8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     eda:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     edc:	90 81       	ld	r25, Z
     ede:	92 60       	ori	r25, 0x02	; 2
     ee0:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ee2:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	81 ff       	sbrs	r24, 1
     ee8:	fd cf       	rjmp	.-6      	; 0xee4 <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     eea:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     eec:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     eee:	a0 e5       	ldi	r26, 0x50	; 80
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	16 96       	adiw	r26, 0x06	; 6
     ef4:	9c 91       	ld	r25, X
     ef6:	16 97       	sbiw	r26, 0x06	; 6
     ef8:	99 7f       	andi	r25, 0xF9	; 249
     efa:	16 96       	adiw	r26, 0x06	; 6
     efc:	9c 93       	st	X, r25
     efe:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     f00:	e0 e6       	ldi	r30, 0x60	; 96
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	90 e8       	ldi	r25, 0x80	; 128
     f06:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     f08:	9b eb       	ldi	r25, 0xBB	; 187
     f0a:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     f0c:	16 96       	adiw	r26, 0x06	; 6
     f0e:	9c 91       	ld	r25, X
     f10:	16 97       	sbiw	r26, 0x06	; 6
     f12:	94 60       	ori	r25, 0x04	; 4
     f14:	16 96       	adiw	r26, 0x06	; 6
     f16:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     f18:	90 81       	ld	r25, Z
     f1a:	91 60       	ori	r25, 0x01	; 1
     f1c:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f1e:	8f bf       	out	0x3f, r24	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     f20:	63 60       	ori	r22, 0x03	; 3
     f22:	84 e4       	ldi	r24, 0x44	; 68
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	37 d6       	rcall	.+3182   	; 0x1b96 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     f28:	60 e4       	ldi	r22, 0x40	; 64
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	b4 cf       	rjmp	.-152    	; 0xe96 <sysclk_enable_module>
     f2e:	08 95       	ret

00000f30 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	fc 01       	movw	r30, r24
     f36:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     f3c:	c6 2f       	mov	r28, r22
     f3e:	d0 e0       	ldi	r29, 0x00	; 0
     f40:	de 01       	movw	r26, r28
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <ioport_configure_port_pin+0x1a>
     f46:	b5 95       	asr	r27
     f48:	a7 95       	ror	r26
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <ioport_configure_port_pin+0x16>
     f4e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     f50:	50 83       	st	Z, r21
     f52:	2f 5f       	subi	r18, 0xFF	; 255
     f54:	3f 4f       	sbci	r19, 0xFF	; 255
     f56:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     f58:	28 30       	cpi	r18, 0x08	; 8
     f5a:	31 05       	cpc	r19, r1
     f5c:	89 f7       	brne	.-30     	; 0xf40 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     f5e:	40 ff       	sbrs	r20, 0
     f60:	0a c0       	rjmp	.+20     	; 0xf76 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     f62:	41 ff       	sbrs	r20, 1
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     f66:	fc 01       	movw	r30, r24
     f68:	65 83       	std	Z+5, r22	; 0x05
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     f6c:	fc 01       	movw	r30, r24
     f6e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     f70:	fc 01       	movw	r30, r24
     f72:	61 83       	std	Z+1, r22	; 0x01
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     f76:	fc 01       	movw	r30, r24
     f78:	62 83       	std	Z+2, r22	; 0x02
	}
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     f86:	c0 3c       	cpi	r28, 0xC0	; 192
     f88:	28 e0       	ldi	r18, 0x08	; 8
     f8a:	d2 07       	cpc	r29, r18
     f8c:	21 f4       	brne	.+8      	; 0xf96 <spi_master_init+0x16>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     f8e:	68 e0       	ldi	r22, 0x08	; 8
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	81 df       	rcall	.-254    	; 0xe96 <sysclk_enable_module>
     f94:	06 c0       	rjmp	.+12     	; 0xfa2 <spi_master_init+0x22>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     f96:	80 3c       	cpi	r24, 0xC0	; 192
     f98:	99 40       	sbci	r25, 0x09	; 9
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <spi_master_init+0x22>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     f9c:	68 e0       	ldi	r22, 0x08	; 8
     f9e:	84 e0       	ldi	r24, 0x04	; 4
     fa0:	7a df       	rcall	.-268    	; 0xe96 <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     fa2:	88 81       	ld	r24, Y
     fa4:	80 61       	ori	r24, 0x10	; 16
     fa6:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	ec 01       	movw	r28, r24
     fba:	f4 2e       	mov	r15, r20
     fbc:	b9 01       	movw	r22, r18
     fbe:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     fc0:	00 e0       	ldi	r16, 0x00	; 0
     fc2:	1b e1       	ldi	r17, 0x1B	; 27
     fc4:	27 eb       	ldi	r18, 0xB7	; 183
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	f6 d5       	rcall	.+3052   	; 0x1bb6 <spi_xmega_set_baud_div>
     fca:	88 23       	and	r24, r24
     fcc:	4c f0       	brlt	.+18     	; 0xfe0 <spi_master_setup_device+0x32>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     fce:	88 81       	ld	r24, Y
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     fd0:	9f 2d       	mov	r25, r15
     fd2:	99 0f       	add	r25, r25
     fd4:	99 0f       	add	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     fd6:	9c 70       	andi	r25, 0x0C	; 12
     fd8:	83 7f       	andi	r24, 0xF3	; 243
     fda:	f9 2e       	mov	r15, r25
     fdc:	f8 2a       	or	r15, r24
     fde:	f8 82       	st	Y, r15
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	08 95       	ret

00000fec <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     fec:	fc 01       	movw	r30, r24
     fee:	db 01       	movw	r26, r22
     ff0:	46 0f       	add	r20, r22
     ff2:	57 1f       	adc	r21, r23
	while (len--) {
     ff4:	05 c0       	rjmp	.+10     	; 0x1000 <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
     ff6:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     ff8:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     ffa:	82 81       	ldd	r24, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
     ffc:	88 23       	and	r24, r24
     ffe:	ec f7       	brge	.-6      	; 0xffa <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
    1000:	a4 17       	cp	r26, r20
    1002:	b5 07       	cpc	r27, r21
    1004:	c1 f7       	brne	.-16     	; 0xff6 <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	08 95       	ret

0000100a <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
    100a:	fc 01       	movw	r30, r24
    100c:	db 01       	movw	r26, r22
	while (len--) {
    100e:	41 15       	cp	r20, r1
    1010:	51 05       	cpc	r21, r1
    1012:	61 f0       	breq	.+24     	; 0x102c <spi_read_packet+0x22>
    1014:	46 0f       	add	r20, r22
    1016:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    1018:	9f ef       	ldi	r25, 0xFF	; 255
    101a:	93 83       	std	Z+3, r25	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    101c:	82 81       	ldd	r24, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
    101e:	88 23       	and	r24, r24
    1020:	ec f7       	brge	.-6      	; 0x101c <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
    1022:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
    1024:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
    1026:	a4 17       	cp	r26, r20
    1028:	b5 07       	cpc	r27, r21
    102a:	b9 f7       	brne	.-18     	; 0x101a <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	08 95       	ret

00001030 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
    1030:	fb 01       	movw	r30, r22
    1032:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    1034:	e8 2f       	mov	r30, r24
    1036:	e6 95       	lsr	r30
    1038:	e6 95       	lsr	r30
    103a:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    103c:	40 e2       	ldi	r20, 0x20	; 32
    103e:	e4 9f       	mul	r30, r20
    1040:	f0 01       	movw	r30, r0
    1042:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1044:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1046:	87 70       	andi	r24, 0x07	; 7
    1048:	21 e0       	ldi	r18, 0x01	; 1
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	a9 01       	movw	r20, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <spi_select_device+0x24>
    1050:	44 0f       	add	r20, r20
    1052:	55 1f       	adc	r21, r21
    1054:	8a 95       	dec	r24
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1058:	46 83       	std	Z+6, r20	; 0x06
    105a:	08 95       	ret

0000105c <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
    105c:	fb 01       	movw	r30, r22
    105e:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    1060:	e8 2f       	mov	r30, r24
    1062:	e6 95       	lsr	r30
    1064:	e6 95       	lsr	r30
    1066:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1068:	40 e2       	ldi	r20, 0x20	; 32
    106a:	e4 9f       	mul	r30, r20
    106c:	f0 01       	movw	r30, r0
    106e:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1070:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1072:	87 70       	andi	r24, 0x07	; 7
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	a9 01       	movw	r20, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <spi_deselect_device+0x24>
    107c:	44 0f       	add	r20, r20
    107e:	55 1f       	adc	r21, r21
    1080:	8a 95       	dec	r24
    1082:	e2 f7       	brpl	.-8      	; 0x107c <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1084:	45 83       	std	Z+5, r20	; 0x05
    1086:	08 95       	ret

00001088 <udi_hid_generic_disable>:
	return UDI_HID_GENERIC_ENABLE_EXT();
}


void udi_hid_generic_disable(void)
{
    1088:	08 95       	ret

0000108a <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	08 95       	ret

0000108e <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    108e:	30 91 fd 22 	lds	r19, 0x22FD
    1092:	20 91 fe 22 	lds	r18, 0x22FE
    1096:	82 2f       	mov	r24, r18
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	03 97       	sbiw	r24, 0x03	; 3
    109c:	e1 f4       	brne	.+56     	; 0x10d6 <udi_hid_generic_setreport+0x48>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    109e:	31 11       	cpse	r19, r1
    10a0:	1c c0       	rjmp	.+56     	; 0x10da <udi_hid_generic_setreport+0x4c>
			&& (sizeof(udi_hid_generic_report_feature) ==
    10a2:	80 91 01 23 	lds	r24, 0x2301
    10a6:	90 91 02 23 	lds	r25, 0x2302
    10aa:	04 97       	sbiw	r24, 0x04	; 4
    10ac:	c1 f4       	brne	.+48     	; 0x10de <udi_hid_generic_setreport+0x50>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
    10ae:	82 e6       	ldi	r24, 0x62	; 98
    10b0:	91 e2       	ldi	r25, 0x21	; 33
    10b2:	80 93 03 23 	sts	0x2303, r24
    10b6:	90 93 04 23 	sts	0x2304, r25
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    10ba:	81 e7       	ldi	r24, 0x71	; 113
    10bc:	98 e0       	ldi	r25, 0x08	; 8
    10be:	80 93 07 23 	sts	0x2307, r24
    10c2:	90 93 08 23 	sts	0x2308, r25
		udd_g_ctrlreq.payload_size =
    10c6:	84 e0       	ldi	r24, 0x04	; 4
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	80 93 05 23 	sts	0x2305, r24
    10ce:	90 93 06 23 	sts	0x2306, r25
				sizeof(udi_hid_generic_report_feature);
		return true;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	08 95       	ret
	}
	return false;
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	08 95       	ret
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	08 95       	ret
    10de:	80 e0       	ldi	r24, 0x00	; 0
}
    10e0:	08 95       	ret

000010e2 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
    10e2:	08 95       	ret

000010e4 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	80 93 e6 21 	sts	0x21E6, r24
    10ea:	08 95       	ret

000010ec <udi_hid_generic_report_out_enable>:
	udi_hid_generic_report_out_enable();
}


static bool udi_hid_generic_report_out_enable(void)
{
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
    10f0:	0e e8       	ldi	r16, 0x8E	; 142
    10f2:	18 e0       	ldi	r17, 0x08	; 8
    10f4:	20 e4       	ldi	r18, 0x40	; 64
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	46 e6       	ldi	r20, 0x66	; 102
    10fa:	51 e2       	ldi	r21, 0x21	; 33
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	0e 94 0c 12 	call	0x2418	; 0x2418 <udd_ep_run>
							false,
							(uint8_t *) & udi_hid_generic_report_out,
							sizeof(udi_hid_generic_report_out),
							udi_hid_generic_report_out_received);
}
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	08 95       	ret

0000110a <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
    110a:	10 92 ea 21 	sts	0x21EA, r1
	udi_hid_generic_protocol = 0;
    110e:	10 92 e8 21 	sts	0x21E8, r1
	udi_hid_generic_b_report_in_free = true;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 e6 21 	sts	0x21E6, r24
	if (!udi_hid_generic_report_out_enable())
    1118:	e9 cf       	rjmp	.-46     	; 0x10ec <udi_hid_generic_report_out_enable>
		return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
}
    111a:	08 95       	ret

0000111c <udi_hid_generic_report_out_received>:

static void udi_hid_generic_report_out_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status)
    111c:	81 11       	cpse	r24, r1
    111e:	07 c0       	rjmp	.+14     	; 0x112e <udi_hid_generic_report_out_received+0x12>
		return;	// Abort reception

	if (sizeof(udi_hid_generic_report_out) == nb_received) {
    1120:	60 34       	cpi	r22, 0x40	; 64
    1122:	71 05       	cpc	r23, r1
    1124:	19 f4       	brne	.+6      	; 0x112c <udi_hid_generic_report_out_received+0x10>
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
    1126:	86 e6       	ldi	r24, 0x66	; 102
    1128:	91 e2       	ldi	r25, 0x21	; 33
    112a:	06 dc       	rcall	.-2036   	; 0x938 <my_callback_generic_report_out>
	}
	udi_hid_generic_report_out_enable();
    112c:	df cf       	rjmp	.-66     	; 0x10ec <udi_hid_generic_report_out_enable>
    112e:	08 95       	ret

00001130 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
    1130:	27 e4       	ldi	r18, 0x47	; 71
    1132:	38 e0       	ldi	r19, 0x08	; 8
    1134:	46 e0       	ldi	r20, 0x06	; 6
    1136:	50 e2       	ldi	r21, 0x20	; 32
    1138:	68 ee       	ldi	r22, 0xE8	; 232
    113a:	71 e2       	ldi	r23, 0x21	; 33
    113c:	8a ee       	ldi	r24, 0xEA	; 234
    113e:	91 e2       	ldi	r25, 0x21	; 33
    1140:	32 c0       	rjmp	.+100    	; 0x11a6 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
    1142:	08 95       	ret

00001144 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
	if (!udi_hid_generic_b_report_in_free)
    114a:	20 91 e6 21 	lds	r18, 0x21E6
    114e:	22 23       	and	r18, r18
    1150:	29 f1       	breq	.+74     	; 0x119c <udi_hid_generic_send_report_in+0x58>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1152:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    1154:	f8 94       	cli
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
    1156:	20 e4       	ldi	r18, 0x40	; 64
    1158:	e6 ea       	ldi	r30, 0xA6	; 166
    115a:	f1 e2       	ldi	r31, 0x21	; 33
    115c:	df 01       	movw	r26, r30
    115e:	1d 92       	st	X+, r1
    1160:	2a 95       	dec	r18
    1162:	e9 f7       	brne	.-6      	; 0x115e <udi_hid_generic_send_report_in+0x1a>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
    1164:	20 e4       	ldi	r18, 0x40	; 64
    1166:	fc 01       	movw	r30, r24
    1168:	a6 ea       	ldi	r26, 0xA6	; 166
    116a:	b1 e2       	ldi	r27, 0x21	; 33
    116c:	01 90       	ld	r0, Z+
    116e:	0d 92       	st	X+, r0
    1170:	2a 95       	dec	r18
    1172:	e1 f7       	brne	.-8      	; 0x116c <udi_hid_generic_send_report_in+0x28>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    1174:	02 e7       	ldi	r16, 0x72	; 114
    1176:	18 e0       	ldi	r17, 0x08	; 8
    1178:	20 e4       	ldi	r18, 0x40	; 64
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	46 ea       	ldi	r20, 0xA6	; 166
    117e:	51 e2       	ldi	r21, 0x21	; 33
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	81 e8       	ldi	r24, 0x81	; 129
    1184:	0e 94 0c 12 	call	0x2418	; 0x2418 <udd_ep_run>
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	89 27       	eor	r24, r25
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
    118c:	80 93 e6 21 	sts	0x21E6, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1190:	cf bf       	out	0x3f, r28	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
    1192:	90 91 e6 21 	lds	r25, 0x21E6
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	89 27       	eor	r24, r25
    119a:	01 c0       	rjmp	.+2      	; 0x119e <udi_hid_generic_send_report_in+0x5a>
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
	if (!udi_hid_generic_b_report_in_free)
		return false;
    119c:	80 e0       	ldi	r24, 0x00	; 0
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;

}
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	08 95       	ret

000011a6 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*set_report)(void) )
{
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    11ac:	40 91 fb 22 	lds	r20, 0x22FB
    11b0:	44 23       	and	r20, r20
    11b2:	0c f0       	brlt	.+2      	; 0x11b6 <udi_hid_setup+0x10>
    11b4:	62 c0       	rjmp	.+196    	; 0x127a <udi_hid_setup+0xd4>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    11b6:	40 76       	andi	r20, 0x60	; 96
    11b8:	09 f0       	breq	.+2      	; 0x11bc <udi_hid_setup+0x16>
    11ba:	40 c0       	rjmp	.+128    	; 0x123c <udi_hid_setup+0x96>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    11bc:	20 91 fc 22 	lds	r18, 0x22FC
    11c0:	26 30       	cpi	r18, 0x06	; 6
    11c2:	e1 f5       	brne	.+120    	; 0x123c <udi_hid_setup+0x96>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    11c4:	6e d1       	rcall	.+732    	; 0x14a2 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    11c6:	fc 01       	movw	r30, r24
    11c8:	22 85       	ldd	r18, Z+10	; 0x0a
    11ca:	21 32       	cpi	r18, 0x21	; 33
    11cc:	99 f5       	brne	.+102    	; 0x1234 <udi_hid_setup+0x8e>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    11ce:	20 91 fe 22 	lds	r18, 0x22FE
    11d2:	21 32       	cpi	r18, 0x21	; 33
    11d4:	b9 f4       	brne	.+46     	; 0x1204 <udi_hid_setup+0x5e>
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    11d6:	9c 01       	movw	r18, r24
    11d8:	27 5f       	subi	r18, 0xF7	; 247
    11da:	3f 4f       	sbci	r19, 0xFF	; 255
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    11dc:	20 93 03 23 	sts	0x2303, r18
    11e0:	30 93 04 23 	sts	0x2304, r19
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    11e4:	81 85       	ldd	r24, Z+9	; 0x09
    11e6:	20 91 01 23 	lds	r18, 0x2301
    11ea:	30 91 02 23 	lds	r19, 0x2302
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	28 17       	cp	r18, r24
    11f2:	39 07       	cpc	r19, r25
    11f4:	08 f4       	brcc	.+2      	; 0x11f8 <udi_hid_setup+0x52>
    11f6:	c9 01       	movw	r24, r18
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    11f8:	80 93 05 23 	sts	0x2305, r24
    11fc:	90 93 06 23 	sts	0x2306, r25
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	64 c0       	rjmp	.+200    	; 0x12cc <udi_hid_setup+0x126>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1204:	fc 01       	movw	r30, r24
    1206:	37 85       	ldd	r19, Z+15	; 0x0f
    1208:	23 13       	cpse	r18, r19
    120a:	16 c0       	rjmp	.+44     	; 0x1238 <udi_hid_setup+0x92>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    120c:	c0 93 03 23 	sts	0x2303, r28
    1210:	d0 93 04 23 	sts	0x2304, r29
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    1214:	20 89       	ldd	r18, Z+16	; 0x10
    1216:	31 89       	ldd	r19, Z+17	; 0x11
    1218:	80 91 01 23 	lds	r24, 0x2301
    121c:	90 91 02 23 	lds	r25, 0x2302
    1220:	28 17       	cp	r18, r24
    1222:	39 07       	cpc	r19, r25
    1224:	08 f4       	brcc	.+2      	; 0x1228 <udi_hid_setup+0x82>
    1226:	c9 01       	movw	r24, r18
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    1228:	80 93 05 23 	sts	0x2305, r24
    122c:	90 93 06 23 	sts	0x2306, r25
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	4c c0       	rjmp	.+152    	; 0x12cc <udi_hid_setup+0x126>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	4a c0       	rjmp	.+148    	; 0x12cc <udi_hid_setup+0x126>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1238:	80 e0       	ldi	r24, 0x00	; 0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    123a:	48 c0       	rjmp	.+144    	; 0x12cc <udi_hid_setup+0x126>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    123c:	40 32       	cpi	r20, 0x20	; 32
    123e:	e9 f5       	brne	.+122    	; 0x12ba <udi_hid_setup+0x114>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1240:	20 91 fc 22 	lds	r18, 0x22FC
    1244:	22 30       	cpi	r18, 0x02	; 2
    1246:	19 f0       	breq	.+6      	; 0x124e <udi_hid_setup+0xa8>
    1248:	23 30       	cpi	r18, 0x03	; 3
    124a:	61 f0       	breq	.+24     	; 0x1264 <udi_hid_setup+0xbe>
    124c:	38 c0       	rjmp	.+112    	; 0x12be <udi_hid_setup+0x118>
			case USB_REQ_HID_GET_REPORT:
				// TODO
				break;

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    124e:	80 93 03 23 	sts	0x2303, r24
    1252:	90 93 04 23 	sts	0x2304, r25
				udd_g_ctrlreq.payload_size = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	80 93 05 23 	sts	0x2305, r24
    125e:	90 93 06 23 	sts	0x2306, r25
				return true;
    1262:	34 c0       	rjmp	.+104    	; 0x12cc <udi_hid_setup+0x126>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1264:	60 93 03 23 	sts	0x2303, r22
    1268:	70 93 04 23 	sts	0x2304, r23
				udd_g_ctrlreq.payload_size = 1;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	80 93 05 23 	sts	0x2305, r24
    1274:	90 93 06 23 	sts	0x2306, r25
				return true;
    1278:	29 c0       	rjmp	.+82     	; 0x12cc <udi_hid_setup+0x126>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    127a:	40 76       	andi	r20, 0x60	; 96
    127c:	40 32       	cpi	r20, 0x20	; 32
    127e:	09 f5       	brne	.+66     	; 0x12c2 <udi_hid_setup+0x11c>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1280:	40 91 fc 22 	lds	r20, 0x22FC
    1284:	4a 30       	cpi	r20, 0x0A	; 10
    1286:	39 f0       	breq	.+14     	; 0x1296 <udi_hid_setup+0xf0>
    1288:	4b 30       	cpi	r20, 0x0B	; 11
    128a:	59 f0       	breq	.+22     	; 0x12a2 <udi_hid_setup+0xfc>
    128c:	49 30       	cpi	r20, 0x09	; 9
    128e:	d9 f4       	brne	.+54     	; 0x12c6 <udi_hid_setup+0x120>

			case USB_REQ_HID_SET_REPORT:
				return set_report();
    1290:	f9 01       	movw	r30, r18
    1292:	19 95       	eicall
    1294:	1b c0       	rjmp	.+54     	; 0x12cc <udi_hid_setup+0x126>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1296:	20 91 fe 22 	lds	r18, 0x22FE
    129a:	fc 01       	movw	r30, r24
    129c:	20 83       	st	Z, r18
				return true;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	15 c0       	rjmp	.+42     	; 0x12cc <udi_hid_setup+0x126>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    12a2:	80 91 01 23 	lds	r24, 0x2301
    12a6:	90 91 02 23 	lds	r25, 0x2302
    12aa:	89 2b       	or	r24, r25
    12ac:	71 f4       	brne	.+28     	; 0x12ca <udi_hid_setup+0x124>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    12ae:	80 91 fd 22 	lds	r24, 0x22FD
    12b2:	fb 01       	movw	r30, r22
    12b4:	80 83       	st	Z, r24
				return true;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <udi_hid_setup+0x126>
			}
		}
	}
	return false;	// Request not supported
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	07 c0       	rjmp	.+14     	; 0x12cc <udi_hid_setup+0x126>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	05 c0       	rjmp	.+10     	; 0x12cc <udi_hid_setup+0x126>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <udi_hid_setup+0x126>
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <udi_hid_setup+0x126>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    12ca:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	08 95       	ret

000012d2 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    12d2:	e0 91 f1 21 	lds	r30, 0x21F1
    12d6:	f0 91 f2 21 	lds	r31, 0x21F2
    12da:	01 90       	ld	r0, Z+
    12dc:	f0 81       	ld	r31, Z
    12de:	e0 2d       	mov	r30, r0
    12e0:	22 81       	ldd	r18, Z+2	; 0x02
    12e2:	33 81       	ldd	r19, Z+3	; 0x03
    12e4:	2e 0f       	add	r18, r30
    12e6:	3f 1f       	adc	r19, r31
    12e8:	fc 01       	movw	r30, r24
    12ea:	40 81       	ld	r20, Z
    12ec:	e4 0f       	add	r30, r20
    12ee:	f1 1d       	adc	r31, r1
    12f0:	e2 17       	cp	r30, r18
    12f2:	f3 07       	cpc	r31, r19
    12f4:	a0 f4       	brcc	.+40     	; 0x131e <udc_next_desc_in_iface+0x4c>
    12f6:	81 81       	ldd	r24, Z+1	; 0x01
    12f8:	84 30       	cpi	r24, 0x04	; 4
    12fa:	a1 f0       	breq	.+40     	; 0x1324 <udc_next_desc_in_iface+0x52>
    12fc:	86 13       	cpse	r24, r22
    12fe:	06 c0       	rjmp	.+12     	; 0x130c <udc_next_desc_in_iface+0x3a>
    1300:	14 c0       	rjmp	.+40     	; 0x132a <udc_next_desc_in_iface+0x58>
    1302:	81 81       	ldd	r24, Z+1	; 0x01
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	a1 f0       	breq	.+40     	; 0x1330 <udc_next_desc_in_iface+0x5e>
    1308:	86 17       	cp	r24, r22
    130a:	a9 f0       	breq	.+42     	; 0x1336 <udc_next_desc_in_iface+0x64>
    130c:	80 81       	ld	r24, Z
    130e:	e8 0f       	add	r30, r24
    1310:	f1 1d       	adc	r31, r1
    1312:	e2 17       	cp	r30, r18
    1314:	f3 07       	cpc	r31, r19
    1316:	a8 f3       	brcs	.-22     	; 0x1302 <udc_next_desc_in_iface+0x30>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	08 95       	ret
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	08 95       	ret
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	08 95       	ret
    132a:	8e 2f       	mov	r24, r30
    132c:	9f 2f       	mov	r25, r31
    132e:	08 95       	ret
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	08 95       	ret
    1336:	8e 2f       	mov	r24, r30
    1338:	9f 2f       	mov	r25, r31
    133a:	08 95       	ret

0000133c <udc_valid_address>:
    133c:	80 91 fd 22 	lds	r24, 0x22FD
    1340:	8f 77       	andi	r24, 0x7F	; 127
    1342:	b5 c7       	rjmp	.+3946   	; 0x22ae <udd_set_address>
    1344:	08 95       	ret

00001346 <udc_update_iface_desc>:
    1346:	90 91 f3 21 	lds	r25, 0x21F3
    134a:	99 23       	and	r25, r25
    134c:	81 f1       	breq	.+96     	; 0x13ae <udc_update_iface_desc+0x68>
    134e:	e0 91 f1 21 	lds	r30, 0x21F1
    1352:	f0 91 f2 21 	lds	r31, 0x21F2
    1356:	01 90       	ld	r0, Z+
    1358:	f0 81       	ld	r31, Z
    135a:	e0 2d       	mov	r30, r0
    135c:	94 81       	ldd	r25, Z+4	; 0x04
    135e:	89 17       	cp	r24, r25
    1360:	40 f5       	brcc	.+80     	; 0x13b2 <udc_update_iface_desc+0x6c>
    1362:	e0 93 ef 21 	sts	0x21EF, r30
    1366:	f0 93 f0 21 	sts	0x21F0, r31
    136a:	22 81       	ldd	r18, Z+2	; 0x02
    136c:	33 81       	ldd	r19, Z+3	; 0x03
    136e:	2e 0f       	add	r18, r30
    1370:	3f 1f       	adc	r19, r31
    1372:	e2 17       	cp	r30, r18
    1374:	f3 07       	cpc	r31, r19
    1376:	f8 f4       	brcc	.+62     	; 0x13b6 <udc_update_iface_desc+0x70>
    1378:	91 81       	ldd	r25, Z+1	; 0x01
    137a:	94 30       	cpi	r25, 0x04	; 4
    137c:	61 f4       	brne	.+24     	; 0x1396 <udc_update_iface_desc+0x50>
    137e:	92 81       	ldd	r25, Z+2	; 0x02
    1380:	98 13       	cpse	r25, r24
    1382:	09 c0       	rjmp	.+18     	; 0x1396 <udc_update_iface_desc+0x50>
    1384:	93 81       	ldd	r25, Z+3	; 0x03
    1386:	96 13       	cpse	r25, r22
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <udc_update_iface_desc+0x50>
    138a:	e0 93 ef 21 	sts	0x21EF, r30
    138e:	f0 93 f0 21 	sts	0x21F0, r31
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	08 95       	ret
    1396:	90 81       	ld	r25, Z
    1398:	e9 0f       	add	r30, r25
    139a:	f1 1d       	adc	r31, r1
    139c:	e2 17       	cp	r30, r18
    139e:	f3 07       	cpc	r31, r19
    13a0:	58 f3       	brcs	.-42     	; 0x1378 <udc_update_iface_desc+0x32>
    13a2:	e0 93 ef 21 	sts	0x21EF, r30
    13a6:	f0 93 f0 21 	sts	0x21F0, r31
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	08 95       	ret
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	08 95       	ret
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	08 95       	ret
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	08 95       	ret

000013ba <udc_iface_disable>:
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	c8 2f       	mov	r28, r24
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	be df       	rcall	.-132    	; 0x1346 <udc_update_iface_desc>
    13ca:	f8 2e       	mov	r15, r24
    13cc:	88 23       	and	r24, r24
    13ce:	81 f1       	breq	.+96     	; 0x1430 <udc_iface_disable+0x76>
    13d0:	a0 91 f1 21 	lds	r26, 0x21F1
    13d4:	b0 91 f2 21 	lds	r27, 0x21F2
    13d8:	ec 2f       	mov	r30, r28
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	ee 0f       	add	r30, r30
    13de:	ff 1f       	adc	r31, r31
    13e0:	12 96       	adiw	r26, 0x02	; 2
    13e2:	2d 91       	ld	r18, X+
    13e4:	3c 91       	ld	r19, X
    13e6:	13 97       	sbiw	r26, 0x03	; 3
    13e8:	e2 0f       	add	r30, r18
    13ea:	f3 1f       	adc	r31, r19
    13ec:	00 81       	ld	r16, Z
    13ee:	11 81       	ldd	r17, Z+1	; 0x01
    13f0:	d8 01       	movw	r26, r16
    13f2:	16 96       	adiw	r26, 0x06	; 6
    13f4:	ed 91       	ld	r30, X+
    13f6:	fc 91       	ld	r31, X
    13f8:	17 97       	sbiw	r26, 0x07	; 7
    13fa:	19 95       	eicall
    13fc:	68 2f       	mov	r22, r24
    13fe:	8c 2f       	mov	r24, r28
    1400:	a2 df       	rcall	.-188    	; 0x1346 <udc_update_iface_desc>
    1402:	f8 2e       	mov	r15, r24
    1404:	88 23       	and	r24, r24
    1406:	a1 f0       	breq	.+40     	; 0x1430 <udc_iface_disable+0x76>
    1408:	c0 91 ef 21 	lds	r28, 0x21EF
    140c:	d0 91 f0 21 	lds	r29, 0x21F0
    1410:	65 e0       	ldi	r22, 0x05	; 5
    1412:	ce 01       	movw	r24, r28
    1414:	5e df       	rcall	.-324    	; 0x12d2 <udc_next_desc_in_iface>
    1416:	ec 01       	movw	r28, r24
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	21 f0       	breq	.+8      	; 0x1424 <udc_iface_disable+0x6a>
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	0e 94 cd 12 	call	0x259a	; 0x259a <udd_ep_free>
    1422:	f6 cf       	rjmp	.-20     	; 0x1410 <udc_iface_disable+0x56>
    1424:	d8 01       	movw	r26, r16
    1426:	12 96       	adiw	r26, 0x02	; 2
    1428:	ed 91       	ld	r30, X+
    142a:	fc 91       	ld	r31, X
    142c:	13 97       	sbiw	r26, 0x03	; 3
    142e:	19 95       	eicall
    1430:	8f 2d       	mov	r24, r15
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	ff 90       	pop	r15
    143c:	08 95       	ret

0000143e <udc_iface_enable>:
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	18 2f       	mov	r17, r24
    1446:	7f df       	rcall	.-258    	; 0x1346 <udc_update_iface_desc>
    1448:	88 23       	and	r24, r24
    144a:	39 f1       	breq	.+78     	; 0x149a <udc_iface_enable+0x5c>
    144c:	c0 91 ef 21 	lds	r28, 0x21EF
    1450:	d0 91 f0 21 	lds	r29, 0x21F0
    1454:	65 e0       	ldi	r22, 0x05	; 5
    1456:	ce 01       	movw	r24, r28
    1458:	3c df       	rcall	.-392    	; 0x12d2 <udc_next_desc_in_iface>
    145a:	ec 01       	movw	r28, r24
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	41 f0       	breq	.+16     	; 0x1470 <udc_iface_enable+0x32>
    1460:	4c 81       	ldd	r20, Y+4	; 0x04
    1462:	5d 81       	ldd	r21, Y+5	; 0x05
    1464:	6b 81       	ldd	r22, Y+3	; 0x03
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	31 d7       	rcall	.+3682   	; 0x22cc <udd_ep_alloc>
    146a:	81 11       	cpse	r24, r1
    146c:	f3 cf       	rjmp	.-26     	; 0x1454 <udc_iface_enable+0x16>
    146e:	15 c0       	rjmp	.+42     	; 0x149a <udc_iface_enable+0x5c>
    1470:	a0 91 f1 21 	lds	r26, 0x21F1
    1474:	b0 91 f2 21 	lds	r27, 0x21F2
    1478:	81 2f       	mov	r24, r17
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	12 96       	adiw	r26, 0x02	; 2
    1482:	ed 91       	ld	r30, X+
    1484:	fc 91       	ld	r31, X
    1486:	13 97       	sbiw	r26, 0x03	; 3
    1488:	e8 0f       	add	r30, r24
    148a:	f9 1f       	adc	r31, r25
    148c:	01 90       	ld	r0, Z+
    148e:	f0 81       	ld	r31, Z
    1490:	e0 2d       	mov	r30, r0
    1492:	01 90       	ld	r0, Z+
    1494:	f0 81       	ld	r31, Z
    1496:	e0 2d       	mov	r30, r0
    1498:	19 95       	eicall
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	08 95       	ret

000014a2 <udc_get_interface_desc>:
    14a2:	80 91 ef 21 	lds	r24, 0x21EF
    14a6:	90 91 f0 21 	lds	r25, 0x21F0
    14aa:	08 95       	ret

000014ac <udc_start>:
    14ac:	8e c6       	rjmp	.+3356   	; 0x21ca <udd_enable>
    14ae:	08 95       	ret

000014b0 <udc_reset>:
    14b0:	cf 93       	push	r28
    14b2:	80 91 f3 21 	lds	r24, 0x21F3
    14b6:	88 23       	and	r24, r24
    14b8:	c1 f0       	breq	.+48     	; 0x14ea <udc_reset+0x3a>
    14ba:	e0 91 f1 21 	lds	r30, 0x21F1
    14be:	f0 91 f2 21 	lds	r31, 0x21F2
    14c2:	01 90       	ld	r0, Z+
    14c4:	f0 81       	ld	r31, Z
    14c6:	e0 2d       	mov	r30, r0
    14c8:	84 81       	ldd	r24, Z+4	; 0x04
    14ca:	88 23       	and	r24, r24
    14cc:	71 f0       	breq	.+28     	; 0x14ea <udc_reset+0x3a>
    14ce:	c0 e0       	ldi	r28, 0x00	; 0
    14d0:	8c 2f       	mov	r24, r28
    14d2:	73 df       	rcall	.-282    	; 0x13ba <udc_iface_disable>
    14d4:	cf 5f       	subi	r28, 0xFF	; 255
    14d6:	e0 91 f1 21 	lds	r30, 0x21F1
    14da:	f0 91 f2 21 	lds	r31, 0x21F2
    14de:	01 90       	ld	r0, Z+
    14e0:	f0 81       	ld	r31, Z
    14e2:	e0 2d       	mov	r30, r0
    14e4:	84 81       	ldd	r24, Z+4	; 0x04
    14e6:	c8 17       	cp	r28, r24
    14e8:	98 f3       	brcs	.-26     	; 0x14d0 <udc_reset+0x20>
    14ea:	10 92 f3 21 	sts	0x21F3, r1
    14ee:	10 92 f4 21 	sts	0x21F4, r1
    14f2:	10 92 f5 21 	sts	0x21F5, r1
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    14fa:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    14fc:	80 91 f3 21 	lds	r24, 0x21F3
    1500:	88 23       	and	r24, r24
    1502:	41 f1       	breq	.+80     	; 0x1554 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1504:	e0 91 f1 21 	lds	r30, 0x21F1
    1508:	f0 91 f2 21 	lds	r31, 0x21F2
    150c:	a0 81       	ld	r26, Z
    150e:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1510:	14 96       	adiw	r26, 0x04	; 4
    1512:	8c 91       	ld	r24, X
    1514:	88 23       	and	r24, r24
    1516:	f1 f0       	breq	.+60     	; 0x1554 <udc_sof_notify+0x5a>
    1518:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    151a:	8c 2f       	mov	r24, r28
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	02 80       	ldd	r0, Z+2	; 0x02
    1524:	f3 81       	ldd	r31, Z+3	; 0x03
    1526:	e0 2d       	mov	r30, r0
    1528:	e8 0f       	add	r30, r24
    152a:	f9 1f       	adc	r31, r25
    152c:	01 90       	ld	r0, Z+
    152e:	f0 81       	ld	r31, Z
    1530:	e0 2d       	mov	r30, r0
    1532:	00 84       	ldd	r0, Z+8	; 0x08
    1534:	f1 85       	ldd	r31, Z+9	; 0x09
    1536:	e0 2d       	mov	r30, r0
    1538:	30 97       	sbiw	r30, 0x00	; 0
    153a:	09 f0       	breq	.+2      	; 0x153e <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    153c:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    153e:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1540:	e0 91 f1 21 	lds	r30, 0x21F1
    1544:	f0 91 f2 21 	lds	r31, 0x21F2
    1548:	a0 81       	ld	r26, Z
    154a:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    154c:	14 96       	adiw	r26, 0x04	; 4
    154e:	8c 91       	ld	r24, X
    1550:	c8 17       	cp	r28, r24
    1552:	18 f3       	brcs	.-58     	; 0x151a <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1564:	10 92 05 23 	sts	0x2305, r1
    1568:	10 92 06 23 	sts	0x2306, r1
	udd_g_ctrlreq.callback = NULL;
    156c:	10 92 07 23 	sts	0x2307, r1
    1570:	10 92 08 23 	sts	0x2308, r1
	udd_g_ctrlreq.over_under_run = NULL;
    1574:	10 92 09 23 	sts	0x2309, r1
    1578:	10 92 0a 23 	sts	0x230A, r1

	if (Udd_setup_is_in()) {
    157c:	20 91 fb 22 	lds	r18, 0x22FB
    1580:	22 23       	and	r18, r18
    1582:	0c f0       	brlt	.+2      	; 0x1586 <udc_process_setup+0x2e>
    1584:	65 c2       	rjmp	.+1226   	; 0x1a50 <udc_process_setup+0x4f8>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1586:	80 91 01 23 	lds	r24, 0x2301
    158a:	90 91 02 23 	lds	r25, 0x2302
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	09 f0       	breq	.+2      	; 0x1594 <udc_process_setup+0x3c>
    1592:	63 c2       	rjmp	.+1222   	; 0x1a5a <udc_process_setup+0x502>
    1594:	59 c2       	rjmp	.+1202   	; 0x1a48 <udc_process_setup+0x4f0>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1596:	2f 71       	andi	r18, 0x1F	; 31
    1598:	09 f0       	breq	.+2      	; 0x159c <udc_process_setup+0x44>
    159a:	8b c0       	rjmp	.+278    	; 0x16b2 <udc_process_setup+0x15a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    159c:	30 91 fc 22 	lds	r19, 0x22FC
    15a0:	36 30       	cpi	r19, 0x06	; 6
    15a2:	81 f0       	breq	.+32     	; 0x15c4 <udc_process_setup+0x6c>
    15a4:	38 30       	cpi	r19, 0x08	; 8
    15a6:	09 f4       	brne	.+2      	; 0x15aa <udc_process_setup+0x52>
    15a8:	79 c0       	rjmp	.+242    	; 0x169c <udc_process_setup+0x144>
    15aa:	31 11       	cpse	r19, r1
    15ac:	82 c0       	rjmp	.+260    	; 0x16b2 <udc_process_setup+0x15a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    15ae:	02 97       	sbiw	r24, 0x02	; 2
    15b0:	39 f4       	brne	.+14     	; 0x15c0 <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    15b2:	62 e0       	ldi	r22, 0x02	; 2
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	84 ef       	ldi	r24, 0xF4	; 244
    15b8:	91 e2       	ldi	r25, 0x21	; 33
    15ba:	7f d6       	rcall	.+3326   	; 0x22ba <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
    15bc:	01 e0       	ldi	r16, 0x01	; 1
    15be:	c7 c1       	rjmp	.+910    	; 0x194e <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
    15c0:	00 e0       	ldi	r16, 0x00	; 0
    15c2:	c5 c1       	rjmp	.+906    	; 0x194e <udc_process_setup+0x3f6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    15c4:	20 91 fd 22 	lds	r18, 0x22FD
    15c8:	30 91 fe 22 	lds	r19, 0x22FE

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    15cc:	83 2f       	mov	r24, r19
    15ce:	99 27       	eor	r25, r25
    15d0:	82 30       	cpi	r24, 0x02	; 2
    15d2:	91 05       	cpc	r25, r1
    15d4:	99 f0       	breq	.+38     	; 0x15fc <udc_process_setup+0xa4>
    15d6:	1c f4       	brge	.+6      	; 0x15de <udc_process_setup+0x86>
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	39 f0       	breq	.+14     	; 0x15ea <udc_process_setup+0x92>
    15dc:	55 c0       	rjmp	.+170    	; 0x1688 <udc_process_setup+0x130>
    15de:	83 30       	cpi	r24, 0x03	; 3
    15e0:	91 05       	cpc	r25, r1
    15e2:	d1 f1       	breq	.+116    	; 0x1658 <udc_process_setup+0x100>
    15e4:	0f 97       	sbiw	r24, 0x0f	; 15
    15e6:	59 f1       	breq	.+86     	; 0x163e <udc_process_setup+0xe6>
    15e8:	4f c0       	rjmp	.+158    	; 0x1688 <udc_process_setup+0x130>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    15ea:	80 91 45 20 	lds	r24, 0x2045
    15ee:	90 91 46 20 	lds	r25, 0x2046
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    15f2:	dc 01       	movw	r26, r24
    15f4:	6c 91       	ld	r22, X
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	60 d6       	rcall	.+3264   	; 0x22ba <udd_set_setup_payload>
    15fa:	35 c0       	rjmp	.+106    	; 0x1666 <udc_process_setup+0x10e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    15fc:	e0 91 45 20 	lds	r30, 0x2045
    1600:	f0 91 46 20 	lds	r31, 0x2046
    1604:	81 89       	ldd	r24, Z+17	; 0x11
    1606:	28 17       	cp	r18, r24
    1608:	08 f0       	brcs	.+2      	; 0x160c <udc_process_setup+0xb4>
    160a:	40 c0       	rjmp	.+128    	; 0x168c <udc_process_setup+0x134>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    160c:	c9 01       	movw	r24, r18
    160e:	99 27       	eor	r25, r25
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	e0 91 47 20 	lds	r30, 0x2047
    161c:	f0 91 48 20 	lds	r31, 0x2048
    1620:	e8 0f       	add	r30, r24
    1622:	f9 1f       	adc	r31, r25
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1628:	fc 01       	movw	r30, r24
    162a:	62 81       	ldd	r22, Z+2	; 0x02
    162c:	73 81       	ldd	r23, Z+3	; 0x03
    162e:	45 d6       	rcall	.+3210   	; 0x22ba <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1630:	e0 91 03 23 	lds	r30, 0x2303
    1634:	f0 91 04 23 	lds	r31, 0x2304
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	81 83       	std	Z+1, r24	; 0x01
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <udc_process_setup+0x10e>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    163e:	80 91 49 20 	lds	r24, 0x2049
    1642:	90 91 4a 20 	lds	r25, 0x204A
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	19 f1       	breq	.+70     	; 0x1690 <udc_process_setup+0x138>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    164a:	dc 01       	movw	r26, r24
    164c:	12 96       	adiw	r26, 0x02	; 2
    164e:	6d 91       	ld	r22, X+
    1650:	7c 91       	ld	r23, X
    1652:	13 97       	sbiw	r26, 0x03	; 3
    1654:	32 d6       	rcall	.+3172   	; 0x22ba <udd_set_setup_payload>
    1656:	07 c0       	rjmp	.+14     	; 0x1666 <udc_process_setup+0x10e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1658:	21 11       	cpse	r18, r1
    165a:	1c c0       	rjmp	.+56     	; 0x1694 <udc_process_setup+0x13c>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    165c:	64 e0       	ldi	r22, 0x04	; 4
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	8e e8       	ldi	r24, 0x8E	; 142
    1662:	90 e2       	ldi	r25, 0x20	; 32
    1664:	2a d6       	rcall	.+3156   	; 0x22ba <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1666:	80 91 01 23 	lds	r24, 0x2301
    166a:	90 91 02 23 	lds	r25, 0x2302
    166e:	20 91 05 23 	lds	r18, 0x2305
    1672:	30 91 06 23 	lds	r19, 0x2306
    1676:	82 17       	cp	r24, r18
    1678:	93 07       	cpc	r25, r19
    167a:	70 f4       	brcc	.+28     	; 0x1698 <udc_process_setup+0x140>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    167c:	80 93 05 23 	sts	0x2305, r24
    1680:	90 93 06 23 	sts	0x2306, r25
	}
	return true;
    1684:	01 e0       	ldi	r16, 0x01	; 1
    1686:	63 c1       	rjmp	.+710    	; 0x194e <udc_process_setup+0x3f6>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1688:	00 e0       	ldi	r16, 0x00	; 0
    168a:	61 c1       	rjmp	.+706    	; 0x194e <udc_process_setup+0x3f6>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
    168c:	00 e0       	ldi	r16, 0x00	; 0
    168e:	5f c1       	rjmp	.+702    	; 0x194e <udc_process_setup+0x3f6>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
    1690:	00 e0       	ldi	r16, 0x00	; 0
    1692:	5d c1       	rjmp	.+698    	; 0x194e <udc_process_setup+0x3f6>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
    1694:	00 e0       	ldi	r16, 0x00	; 0
    1696:	5b c1       	rjmp	.+694    	; 0x194e <udc_process_setup+0x3f6>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
    1698:	01 e0       	ldi	r16, 0x01	; 1
    169a:	59 c1       	rjmp	.+690    	; 0x194e <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	39 f4       	brne	.+14     	; 0x16ae <udc_process_setup+0x156>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	83 ef       	ldi	r24, 0xF3	; 243
    16a6:	91 e2       	ldi	r25, 0x21	; 33
    16a8:	08 d6       	rcall	.+3088   	; 0x22ba <udd_set_setup_payload>
	return true;
    16aa:	01 e0       	ldi	r16, 0x01	; 1
    16ac:	50 c1       	rjmp	.+672    	; 0x194e <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
    16ae:	00 e0       	ldi	r16, 0x00	; 0
    16b0:	4e c1       	rjmp	.+668    	; 0x194e <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    16b2:	21 30       	cpi	r18, 0x01	; 1
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <udc_process_setup+0x160>
    16b6:	3f c0       	rjmp	.+126    	; 0x1736 <udc_process_setup+0x1de>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    16b8:	30 91 fc 22 	lds	r19, 0x22FC
    16bc:	3a 30       	cpi	r19, 0x0A	; 10
    16be:	d9 f5       	brne	.+118    	; 0x1736 <udc_process_setup+0x1de>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	99 f5       	brne	.+102    	; 0x172a <udc_process_setup+0x1d2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    16c4:	80 91 f3 21 	lds	r24, 0x21F3
    16c8:	88 23       	and	r24, r24
    16ca:	89 f1       	breq	.+98     	; 0x172e <udc_process_setup+0x1d6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    16cc:	c0 91 ff 22 	lds	r28, 0x22FF
    16d0:	d0 91 00 23 	lds	r29, 0x2300
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    16d4:	e0 90 f1 21 	lds	r14, 0x21F1
    16d8:	f0 90 f2 21 	lds	r15, 0x21F2
    16dc:	d7 01       	movw	r26, r14
    16de:	ed 91       	ld	r30, X+
    16e0:	fc 91       	ld	r31, X
    16e2:	84 81       	ldd	r24, Z+4	; 0x04
    16e4:	c8 17       	cp	r28, r24
    16e6:	28 f5       	brcc	.+74     	; 0x1732 <udc_process_setup+0x1da>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	8c 2f       	mov	r24, r28
    16ec:	2c de       	rcall	.-936    	; 0x1346 <udc_update_iface_desc>
    16ee:	08 2f       	mov	r16, r24
    16f0:	88 23       	and	r24, r24
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <udc_process_setup+0x19e>
    16f4:	2c c1       	rjmp	.+600    	; 0x194e <udc_process_setup+0x3f6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    16f6:	ce 01       	movw	r24, r28
    16f8:	99 27       	eor	r25, r25
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	d7 01       	movw	r26, r14
    1700:	12 96       	adiw	r26, 0x02	; 2
    1702:	ed 91       	ld	r30, X+
    1704:	fc 91       	ld	r31, X
    1706:	13 97       	sbiw	r26, 0x03	; 3
    1708:	e8 0f       	add	r30, r24
    170a:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    170c:	01 90       	ld	r0, Z+
    170e:	f0 81       	ld	r31, Z
    1710:	e0 2d       	mov	r30, r0
    1712:	06 80       	ldd	r0, Z+6	; 0x06
    1714:	f7 81       	ldd	r31, Z+7	; 0x07
    1716:	e0 2d       	mov	r30, r0
    1718:	19 95       	eicall
    171a:	80 93 ee 21 	sts	0x21EE, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	8e ee       	ldi	r24, 0xEE	; 238
    1724:	91 e2       	ldi	r25, 0x21	; 33
    1726:	c9 d5       	rcall	.+2962   	; 0x22ba <udd_set_setup_payload>
    1728:	12 c1       	rjmp	.+548    	; 0x194e <udc_process_setup+0x3f6>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
    172a:	00 e0       	ldi	r16, 0x00	; 0
    172c:	10 c1       	rjmp	.+544    	; 0x194e <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    172e:	00 e0       	ldi	r16, 0x00	; 0
    1730:	0e c1       	rjmp	.+540    	; 0x194e <udc_process_setup+0x3f6>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    1732:	00 e0       	ldi	r16, 0x00	; 0
    1734:	0c c1       	rjmp	.+536    	; 0x194e <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	09 f0       	breq	.+2      	; 0x173c <udc_process_setup+0x1e4>
    173a:	0b c1       	rjmp	.+534    	; 0x1952 <udc_process_setup+0x3fa>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    173c:	20 91 fc 22 	lds	r18, 0x22FC
    1740:	21 11       	cpse	r18, r1
    1742:	00 c1       	rjmp	.+512    	; 0x1944 <udc_process_setup+0x3ec>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1744:	02 97       	sbiw	r24, 0x02	; 2
    1746:	79 f4       	brne	.+30     	; 0x1766 <udc_process_setup+0x20e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1748:	80 91 ff 22 	lds	r24, 0x22FF
    174c:	20 d6       	rcall	.+3136   	; 0x238e <udd_ep_is_halted>
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	80 93 ec 21 	sts	0x21EC, r24
    1754:	90 93 ed 21 	sts	0x21ED, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1758:	62 e0       	ldi	r22, 0x02	; 2
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	8c ee       	ldi	r24, 0xEC	; 236
    175e:	91 e2       	ldi	r25, 0x21	; 33
    1760:	ac d5       	rcall	.+2904   	; 0x22ba <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
    1762:	01 e0       	ldi	r16, 0x01	; 1
    1764:	f4 c0       	rjmp	.+488    	; 0x194e <udc_process_setup+0x3f6>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
    1766:	00 e0       	ldi	r16, 0x00	; 0
    1768:	f2 c0       	rjmp	.+484    	; 0x194e <udc_process_setup+0x3f6>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    176a:	2f 71       	andi	r18, 0x1F	; 31
    176c:	09 f0       	breq	.+2      	; 0x1770 <udc_process_setup+0x218>
    176e:	90 c0       	rjmp	.+288    	; 0x1890 <udc_process_setup+0x338>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1770:	80 91 fc 22 	lds	r24, 0x22FC
    1774:	83 30       	cpi	r24, 0x03	; 3
    1776:	09 f4       	brne	.+2      	; 0x177a <udc_process_setup+0x222>
    1778:	e7 c0       	rjmp	.+462    	; 0x1948 <udc_process_setup+0x3f0>
    177a:	18 f4       	brcc	.+6      	; 0x1782 <udc_process_setup+0x22a>
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	b1 f0       	breq	.+44     	; 0x17ac <udc_process_setup+0x254>
    1780:	87 c0       	rjmp	.+270    	; 0x1890 <udc_process_setup+0x338>
    1782:	85 30       	cpi	r24, 0x05	; 5
    1784:	19 f0       	breq	.+6      	; 0x178c <udc_process_setup+0x234>
    1786:	89 30       	cpi	r24, 0x09	; 9
    1788:	61 f1       	breq	.+88     	; 0x17e2 <udc_process_setup+0x28a>
    178a:	82 c0       	rjmp	.+260    	; 0x1890 <udc_process_setup+0x338>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    178c:	80 91 01 23 	lds	r24, 0x2301
    1790:	90 91 02 23 	lds	r25, 0x2302
    1794:	89 2b       	or	r24, r25
    1796:	41 f4       	brne	.+16     	; 0x17a8 <udc_process_setup+0x250>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1798:	8e e9       	ldi	r24, 0x9E	; 158
    179a:	99 e0       	ldi	r25, 0x09	; 9
    179c:	80 93 07 23 	sts	0x2307, r24
    17a0:	90 93 08 23 	sts	0x2308, r25
	return true;
    17a4:	01 e0       	ldi	r16, 0x01	; 1
    17a6:	d3 c0       	rjmp	.+422    	; 0x194e <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    17a8:	00 e0       	ldi	r16, 0x00	; 0
    17aa:	d1 c0       	rjmp	.+418    	; 0x194e <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    17ac:	80 91 01 23 	lds	r24, 0x2301
    17b0:	90 91 02 23 	lds	r25, 0x2302
    17b4:	89 2b       	or	r24, r25
    17b6:	89 f4       	brne	.+34     	; 0x17da <udc_process_setup+0x282>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    17b8:	80 91 fd 22 	lds	r24, 0x22FD
    17bc:	90 91 fe 22 	lds	r25, 0x22FE
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	69 f4       	brne	.+26     	; 0x17de <udc_process_setup+0x286>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    17c4:	80 91 f4 21 	lds	r24, 0x21F4
    17c8:	90 91 f5 21 	lds	r25, 0x21F5
    17cc:	8d 7f       	andi	r24, 0xFD	; 253
    17ce:	80 93 f4 21 	sts	0x21F4, r24
    17d2:	90 93 f5 21 	sts	0x21F5, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    17d6:	01 e0       	ldi	r16, 0x01	; 1
    17d8:	ba c0       	rjmp	.+372    	; 0x194e <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    17da:	00 e0       	ldi	r16, 0x00	; 0
    17dc:	b8 c0       	rjmp	.+368    	; 0x194e <udc_process_setup+0x3f6>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    17de:	00 e0       	ldi	r16, 0x00	; 0
    17e0:	b6 c0       	rjmp	.+364    	; 0x194e <udc_process_setup+0x3f6>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    17e2:	80 91 01 23 	lds	r24, 0x2301
    17e6:	90 91 02 23 	lds	r25, 0x2302
    17ea:	89 2b       	or	r24, r25
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <udc_process_setup+0x298>
    17ee:	46 c0       	rjmp	.+140    	; 0x187c <udc_process_setup+0x324>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    17f0:	61 d5       	rcall	.+2754   	; 0x22b4 <udd_getaddress>
    17f2:	88 23       	and	r24, r24
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <udc_process_setup+0x2a0>
    17f6:	44 c0       	rjmp	.+136    	; 0x1880 <udc_process_setup+0x328>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17f8:	20 91 fd 22 	lds	r18, 0x22FD
    17fc:	30 91 fe 22 	lds	r19, 0x22FE
    1800:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1802:	e0 91 45 20 	lds	r30, 0x2045
    1806:	f0 91 46 20 	lds	r31, 0x2046
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    180a:	81 89       	ldd	r24, Z+17	; 0x11
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	82 17       	cp	r24, r18
    1810:	93 07       	cpc	r25, r19
    1812:	c0 f1       	brcs	.+112    	; 0x1884 <udc_process_setup+0x32c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1814:	4d de       	rcall	.-870    	; 0x14b0 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1816:	80 91 fd 22 	lds	r24, 0x22FD
    181a:	90 91 fe 22 	lds	r25, 0x22FE
    181e:	80 93 f3 21 	sts	0x21F3, r24
	if (udc_num_configuration == 0) {
    1822:	88 23       	and	r24, r24
    1824:	89 f1       	breq	.+98     	; 0x1888 <udc_process_setup+0x330>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1826:	99 27       	eor	r25, r25
    1828:	81 50       	subi	r24, 0x01	; 1
    182a:	90 4c       	sbci	r25, 0xC0	; 192
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	e0 91 47 20 	lds	r30, 0x2047
    1838:	f0 91 48 20 	lds	r31, 0x2048
    183c:	e8 0f       	add	r30, r24
    183e:	f9 1f       	adc	r31, r25
    1840:	e0 93 f1 21 	sts	0x21F1, r30
    1844:	f0 93 f2 21 	sts	0x21F2, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1848:	01 90       	ld	r0, Z+
    184a:	f0 81       	ld	r31, Z
    184c:	e0 2d       	mov	r30, r0
    184e:	84 81       	ldd	r24, Z+4	; 0x04
    1850:	88 23       	and	r24, r24
    1852:	e1 f0       	breq	.+56     	; 0x188c <udc_process_setup+0x334>
    1854:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	8c 2f       	mov	r24, r28
    185a:	f1 dd       	rcall	.-1054   	; 0x143e <udc_iface_enable>
    185c:	08 2f       	mov	r16, r24
    185e:	88 23       	and	r24, r24
    1860:	09 f4       	brne	.+2      	; 0x1864 <udc_process_setup+0x30c>
    1862:	75 c0       	rjmp	.+234    	; 0x194e <udc_process_setup+0x3f6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1864:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1866:	e0 91 f1 21 	lds	r30, 0x21F1
    186a:	f0 91 f2 21 	lds	r31, 0x21F2
    186e:	01 90       	ld	r0, Z+
    1870:	f0 81       	ld	r31, Z
    1872:	e0 2d       	mov	r30, r0
    1874:	84 81       	ldd	r24, Z+4	; 0x04
    1876:	c8 17       	cp	r28, r24
    1878:	70 f3       	brcs	.-36     	; 0x1856 <udc_process_setup+0x2fe>
    187a:	69 c0       	rjmp	.+210    	; 0x194e <udc_process_setup+0x3f6>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    187c:	00 e0       	ldi	r16, 0x00	; 0
    187e:	67 c0       	rjmp	.+206    	; 0x194e <udc_process_setup+0x3f6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
    1880:	00 e0       	ldi	r16, 0x00	; 0
    1882:	65 c0       	rjmp	.+202    	; 0x194e <udc_process_setup+0x3f6>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    1884:	00 e0       	ldi	r16, 0x00	; 0
    1886:	63 c0       	rjmp	.+198    	; 0x194e <udc_process_setup+0x3f6>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
    1888:	01 e0       	ldi	r16, 0x01	; 1
    188a:	61 c0       	rjmp	.+194    	; 0x194e <udc_process_setup+0x3f6>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    188c:	01 e0       	ldi	r16, 0x01	; 1
    188e:	5f c0       	rjmp	.+190    	; 0x194e <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1890:	21 30       	cpi	r18, 0x01	; 1
    1892:	09 f5       	brne	.+66     	; 0x18d6 <udc_process_setup+0x37e>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1894:	80 91 fc 22 	lds	r24, 0x22FC
    1898:	8b 30       	cpi	r24, 0x0B	; 11
    189a:	e9 f4       	brne	.+58     	; 0x18d6 <udc_process_setup+0x37e>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    189c:	80 91 01 23 	lds	r24, 0x2301
    18a0:	90 91 02 23 	lds	r25, 0x2302
    18a4:	89 2b       	or	r24, r25
    18a6:	99 f4       	brne	.+38     	; 0x18ce <udc_process_setup+0x376>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    18a8:	80 91 f3 21 	lds	r24, 0x21F3
    18ac:	88 23       	and	r24, r24
    18ae:	89 f0       	breq	.+34     	; 0x18d2 <udc_process_setup+0x37a>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18b0:	c0 91 ff 22 	lds	r28, 0x22FF
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    18b4:	d0 91 fd 22 	lds	r29, 0x22FD

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    18b8:	8c 2f       	mov	r24, r28
    18ba:	7f dd       	rcall	.-1282   	; 0x13ba <udc_iface_disable>
    18bc:	08 2f       	mov	r16, r24
    18be:	88 23       	and	r24, r24
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <udc_process_setup+0x36c>
    18c2:	45 c0       	rjmp	.+138    	; 0x194e <udc_process_setup+0x3f6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    18c4:	6d 2f       	mov	r22, r29
    18c6:	8c 2f       	mov	r24, r28
    18c8:	ba dd       	rcall	.-1164   	; 0x143e <udc_iface_enable>
    18ca:	08 2f       	mov	r16, r24
    18cc:	40 c0       	rjmp	.+128    	; 0x194e <udc_process_setup+0x3f6>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
    18ce:	00 e0       	ldi	r16, 0x00	; 0
    18d0:	3e c0       	rjmp	.+124    	; 0x194e <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    18d2:	00 e0       	ldi	r16, 0x00	; 0
    18d4:	3c c0       	rjmp	.+120    	; 0x194e <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	09 f0       	breq	.+2      	; 0x18dc <udc_process_setup+0x384>
    18da:	3b c0       	rjmp	.+118    	; 0x1952 <udc_process_setup+0x3fa>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    18dc:	80 91 fc 22 	lds	r24, 0x22FC
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	19 f0       	breq	.+6      	; 0x18ea <udc_process_setup+0x392>
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	b1 f0       	breq	.+44     	; 0x1914 <udc_process_setup+0x3bc>
    18e8:	31 c0       	rjmp	.+98     	; 0x194c <udc_process_setup+0x3f4>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18ea:	80 91 01 23 	lds	r24, 0x2301
    18ee:	90 91 02 23 	lds	r25, 0x2302
    18f2:	89 2b       	or	r24, r25
    18f4:	59 f4       	brne	.+22     	; 0x190c <udc_process_setup+0x3b4>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18f6:	80 91 fd 22 	lds	r24, 0x22FD
    18fa:	90 91 fe 22 	lds	r25, 0x22FE
    18fe:	89 2b       	or	r24, r25
    1900:	39 f4       	brne	.+14     	; 0x1910 <udc_process_setup+0x3b8>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1902:	80 91 ff 22 	lds	r24, 0x22FF
    1906:	5e d5       	rcall	.+2748   	; 0x23c4 <udd_ep_clear_halt>
    1908:	08 2f       	mov	r16, r24
    190a:	21 c0       	rjmp	.+66     	; 0x194e <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    190c:	00 e0       	ldi	r16, 0x00	; 0
    190e:	1f c0       	rjmp	.+62     	; 0x194e <udc_process_setup+0x3f6>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    1910:	00 e0       	ldi	r16, 0x00	; 0
    1912:	1d c0       	rjmp	.+58     	; 0x194e <udc_process_setup+0x3f6>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1914:	80 91 01 23 	lds	r24, 0x2301
    1918:	90 91 02 23 	lds	r25, 0x2302
    191c:	89 2b       	or	r24, r25
    191e:	71 f4       	brne	.+28     	; 0x193c <udc_process_setup+0x3e4>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1920:	80 91 fd 22 	lds	r24, 0x22FD
    1924:	90 91 fe 22 	lds	r25, 0x22FE
    1928:	89 2b       	or	r24, r25
    192a:	51 f4       	brne	.+20     	; 0x1940 <udc_process_setup+0x3e8>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    192c:	cf ef       	ldi	r28, 0xFF	; 255
    192e:	d2 e2       	ldi	r29, 0x22	; 34
    1930:	88 81       	ld	r24, Y
    1932:	fa d5       	rcall	.+3060   	; 0x2528 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1934:	88 81       	ld	r24, Y
    1936:	4e d6       	rcall	.+3228   	; 0x25d4 <udd_ep_set_halt>
    1938:	08 2f       	mov	r16, r24
    193a:	09 c0       	rjmp	.+18     	; 0x194e <udc_process_setup+0x3f6>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    193c:	00 e0       	ldi	r16, 0x00	; 0
    193e:	07 c0       	rjmp	.+14     	; 0x194e <udc_process_setup+0x3f6>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    1940:	00 e0       	ldi	r16, 0x00	; 0
    1942:	05 c0       	rjmp	.+10     	; 0x194e <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
    1944:	00 e0       	ldi	r16, 0x00	; 0
    1946:	03 c0       	rjmp	.+6      	; 0x194e <udc_process_setup+0x3f6>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1948:	00 e0       	ldi	r16, 0x00	; 0
    194a:	01 c0       	rjmp	.+2      	; 0x194e <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
    194c:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    194e:	01 11       	cpse	r16, r1
    1950:	89 c0       	rjmp	.+274    	; 0x1a64 <udc_process_setup+0x50c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1952:	80 91 fb 22 	lds	r24, 0x22FB
    1956:	8f 71       	andi	r24, 0x1F	; 31
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	c1 f5       	brne	.+112    	; 0x19cc <udc_process_setup+0x474>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    195c:	80 91 f3 21 	lds	r24, 0x21F3
    1960:	88 23       	and	r24, r24
    1962:	a1 f1       	breq	.+104    	; 0x19cc <udc_process_setup+0x474>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1964:	c0 91 ff 22 	lds	r28, 0x22FF
    1968:	d0 91 00 23 	lds	r29, 0x2300
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    196c:	00 91 f1 21 	lds	r16, 0x21F1
    1970:	10 91 f2 21 	lds	r17, 0x21F2
    1974:	d8 01       	movw	r26, r16
    1976:	ed 91       	ld	r30, X+
    1978:	fc 91       	ld	r31, X
    197a:	84 81       	ldd	r24, Z+4	; 0x04
    197c:	c8 17       	cp	r28, r24
    197e:	30 f5       	brcc	.+76     	; 0x19cc <udc_process_setup+0x474>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	8c 2f       	mov	r24, r28
    1984:	e0 dc       	rcall	.-1600   	; 0x1346 <udc_update_iface_desc>
    1986:	88 23       	and	r24, r24
    1988:	09 f1       	breq	.+66     	; 0x19cc <udc_process_setup+0x474>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    198a:	ce 01       	movw	r24, r28
    198c:	99 27       	eor	r25, r25
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	d8 01       	movw	r26, r16
    1994:	12 96       	adiw	r26, 0x02	; 2
    1996:	ed 91       	ld	r30, X+
    1998:	fc 91       	ld	r31, X
    199a:	13 97       	sbiw	r26, 0x03	; 3
    199c:	e8 0f       	add	r30, r24
    199e:	f9 1f       	adc	r31, r25
    19a0:	00 81       	ld	r16, Z
    19a2:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    19a4:	d8 01       	movw	r26, r16
    19a6:	16 96       	adiw	r26, 0x06	; 6
    19a8:	ed 91       	ld	r30, X+
    19aa:	fc 91       	ld	r31, X
    19ac:	17 97       	sbiw	r26, 0x07	; 7
    19ae:	19 95       	eicall
    19b0:	68 2f       	mov	r22, r24
    19b2:	8c 2f       	mov	r24, r28
    19b4:	c8 dc       	rcall	.-1648   	; 0x1346 <udc_update_iface_desc>
    19b6:	88 23       	and	r24, r24
    19b8:	49 f0       	breq	.+18     	; 0x19cc <udc_process_setup+0x474>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    19ba:	d8 01       	movw	r26, r16
    19bc:	14 96       	adiw	r26, 0x04	; 4
    19be:	ed 91       	ld	r30, X+
    19c0:	fc 91       	ld	r31, X
    19c2:	15 97       	sbiw	r26, 0x05	; 5
    19c4:	19 95       	eicall
    19c6:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    19c8:	81 11       	cpse	r24, r1
    19ca:	4c c0       	rjmp	.+152    	; 0x1a64 <udc_process_setup+0x50c>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    19cc:	80 91 fb 22 	lds	r24, 0x22FB
    19d0:	8f 71       	andi	r24, 0x1F	; 31
    19d2:	82 30       	cpi	r24, 0x02	; 2
    19d4:	d9 f5       	brne	.+118    	; 0x1a4c <udc_process_setup+0x4f4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    19d6:	80 91 f3 21 	lds	r24, 0x21F3
    19da:	88 23       	and	r24, r24
    19dc:	89 f1       	breq	.+98     	; 0x1a40 <udc_process_setup+0x4e8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19de:	e0 91 f1 21 	lds	r30, 0x21F1
    19e2:	f0 91 f2 21 	lds	r31, 0x21F2
    19e6:	a0 81       	ld	r26, Z
    19e8:	b1 81       	ldd	r27, Z+1	; 0x01
    19ea:	14 96       	adiw	r26, 0x04	; 4
    19ec:	8c 91       	ld	r24, X
    19ee:	88 23       	and	r24, r24
    19f0:	49 f1       	breq	.+82     	; 0x1a44 <udc_process_setup+0x4ec>
    19f2:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    19f4:	21 2f       	mov	r18, r17
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	22 0f       	add	r18, r18
    19fa:	33 1f       	adc	r19, r19
    19fc:	02 80       	ldd	r0, Z+2	; 0x02
    19fe:	f3 81       	ldd	r31, Z+3	; 0x03
    1a00:	e0 2d       	mov	r30, r0
    1a02:	e2 0f       	add	r30, r18
    1a04:	f3 1f       	adc	r31, r19
    1a06:	c0 81       	ld	r28, Z
    1a08:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1a0a:	ee 81       	ldd	r30, Y+6	; 0x06
    1a0c:	ff 81       	ldd	r31, Y+7	; 0x07
    1a0e:	19 95       	eicall
    1a10:	68 2f       	mov	r22, r24
    1a12:	81 2f       	mov	r24, r17
    1a14:	98 dc       	rcall	.-1744   	; 0x1346 <udc_update_iface_desc>
    1a16:	08 2f       	mov	r16, r24
    1a18:	88 23       	and	r24, r24
    1a1a:	21 f1       	breq	.+72     	; 0x1a64 <udc_process_setup+0x50c>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1a1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a20:	19 95       	eicall
    1a22:	08 2f       	mov	r16, r24
    1a24:	81 11       	cpse	r24, r1
    1a26:	1e c0       	rjmp	.+60     	; 0x1a64 <udc_process_setup+0x50c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1a28:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a2a:	e0 91 f1 21 	lds	r30, 0x21F1
    1a2e:	f0 91 f2 21 	lds	r31, 0x21F2
    1a32:	a0 81       	ld	r26, Z
    1a34:	b1 81       	ldd	r27, Z+1	; 0x01
    1a36:	14 96       	adiw	r26, 0x04	; 4
    1a38:	8c 91       	ld	r24, X
    1a3a:	18 17       	cp	r17, r24
    1a3c:	d8 f2       	brcs	.-74     	; 0x19f4 <udc_process_setup+0x49c>
    1a3e:	12 c0       	rjmp	.+36     	; 0x1a64 <udc_process_setup+0x50c>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1a40:	00 e0       	ldi	r16, 0x00	; 0
    1a42:	10 c0       	rjmp	.+32     	; 0x1a64 <udc_process_setup+0x50c>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1a44:	00 e0       	ldi	r16, 0x00	; 0
    1a46:	0e c0       	rjmp	.+28     	; 0x1a64 <udc_process_setup+0x50c>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1a48:	00 e0       	ldi	r16, 0x00	; 0
    1a4a:	0c c0       	rjmp	.+24     	; 0x1a64 <udc_process_setup+0x50c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1a4c:	00 e0       	ldi	r16, 0x00	; 0
    1a4e:	0a c0       	rjmp	.+20     	; 0x1a64 <udc_process_setup+0x50c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1a50:	82 2f       	mov	r24, r18
    1a52:	80 76       	andi	r24, 0x60	; 96
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <udc_process_setup+0x500>
    1a56:	7d cf       	rjmp	.-262    	; 0x1952 <udc_process_setup+0x3fa>
    1a58:	88 ce       	rjmp	.-752    	; 0x176a <udc_process_setup+0x212>
    1a5a:	32 2f       	mov	r19, r18
    1a5c:	30 76       	andi	r19, 0x60	; 96
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <udc_process_setup+0x50a>
    1a60:	78 cf       	rjmp	.-272    	; 0x1952 <udc_process_setup+0x3fa>
    1a62:	99 cd       	rjmp	.-1230   	; 0x1596 <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1a64:	80 2f       	mov	r24, r16
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	ff 90       	pop	r15
    1a70:	ef 90       	pop	r14
    1a72:	08 95       	ret

00001a74 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1a74:	43 e0       	ldi	r20, 0x03	; 3
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	61 e0       	ldi	r22, 0x01	; 1
    1a7a:	80 ee       	ldi	r24, 0xE0	; 224
    1a7c:	97 e0       	ldi	r25, 0x07	; 7
    1a7e:	58 da       	rcall	.-2896   	; 0xf30 <ioport_configure_port_pin>
    1a80:	43 e0       	ldi	r20, 0x03	; 3
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	62 e0       	ldi	r22, 0x02	; 2
    1a86:	80 ee       	ldi	r24, 0xE0	; 224
    1a88:	97 e0       	ldi	r25, 0x07	; 7
    1a8a:	52 da       	rcall	.-2908   	; 0xf30 <ioport_configure_port_pin>
    1a8c:	43 e0       	ldi	r20, 0x03	; 3
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	60 e1       	ldi	r22, 0x10	; 16
    1a92:	80 e6       	ldi	r24, 0x60	; 96
    1a94:	96 e0       	ldi	r25, 0x06	; 6
    1a96:	4c da       	rcall	.-2920   	; 0xf30 <ioport_configure_port_pin>
    1a98:	41 e0       	ldi	r20, 0x01	; 1
    1a9a:	50 e4       	ldi	r21, 0x40	; 64
    1a9c:	60 e2       	ldi	r22, 0x20	; 32
    1a9e:	80 e6       	ldi	r24, 0x60	; 96
    1aa0:	96 e0       	ldi	r25, 0x06	; 6
    1aa2:	46 da       	rcall	.-2932   	; 0xf30 <ioport_configure_port_pin>
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	5b e1       	ldi	r21, 0x1B	; 27
    1aa8:	62 e0       	ldi	r22, 0x02	; 2
    1aaa:	80 ea       	ldi	r24, 0xA0	; 160
    1aac:	96 e0       	ldi	r25, 0x06	; 6
    1aae:	40 da       	rcall	.-2944   	; 0xf30 <ioport_configure_port_pin>
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	5b e1       	ldi	r21, 0x1B	; 27
    1ab4:	64 e0       	ldi	r22, 0x04	; 4
    1ab6:	80 ea       	ldi	r24, 0xA0	; 160
    1ab8:	96 e0       	ldi	r25, 0x06	; 6
    1aba:	3a da       	rcall	.-2956   	; 0xf30 <ioport_configure_port_pin>
    1abc:	43 e0       	ldi	r20, 0x03	; 3
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	68 e0       	ldi	r22, 0x08	; 8
    1ac2:	80 ea       	ldi	r24, 0xA0	; 160
    1ac4:	96 e0       	ldi	r25, 0x06	; 6
    1ac6:	34 da       	rcall	.-2968   	; 0xf30 <ioport_configure_port_pin>
    1ac8:	43 e0       	ldi	r20, 0x03	; 3
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	61 e0       	ldi	r22, 0x01	; 1
    1ace:	80 e6       	ldi	r24, 0x60	; 96
    1ad0:	96 e0       	ldi	r25, 0x06	; 6
    1ad2:	2e da       	rcall	.-2980   	; 0xf30 <ioport_configure_port_pin>
    1ad4:	43 e0       	ldi	r20, 0x03	; 3
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	68 e0       	ldi	r22, 0x08	; 8
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	96 e0       	ldi	r25, 0x06	; 6
    1ade:	28 da       	rcall	.-2992   	; 0xf30 <ioport_configure_port_pin>
    1ae0:	43 e0       	ldi	r20, 0x03	; 3
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	60 e2       	ldi	r22, 0x20	; 32
    1ae6:	80 e8       	ldi	r24, 0x80	; 128
    1ae8:	96 e0       	ldi	r25, 0x06	; 6
    1aea:	22 da       	rcall	.-3004   	; 0xf30 <ioport_configure_port_pin>
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	5b e1       	ldi	r21, 0x1B	; 27
    1af0:	60 e1       	ldi	r22, 0x10	; 16
    1af2:	80 e8       	ldi	r24, 0x80	; 128
    1af4:	96 e0       	ldi	r25, 0x06	; 6
    1af6:	1c da       	rcall	.-3016   	; 0xf30 <ioport_configure_port_pin>
    1af8:	43 e0       	ldi	r20, 0x03	; 3
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	62 e0       	ldi	r22, 0x02	; 2
    1afe:	80 e6       	ldi	r24, 0x60	; 96
    1b00:	96 e0       	ldi	r25, 0x06	; 6
    1b02:	16 da       	rcall	.-3028   	; 0xf30 <ioport_configure_port_pin>
    1b04:	43 e0       	ldi	r20, 0x03	; 3
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	68 e0       	ldi	r22, 0x08	; 8
    1b0a:	80 e6       	ldi	r24, 0x60	; 96
    1b0c:	96 e0       	ldi	r25, 0x06	; 6
    1b0e:	10 da       	rcall	.-3040   	; 0xf30 <ioport_configure_port_pin>
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	64 e0       	ldi	r22, 0x04	; 4
    1b16:	80 e6       	ldi	r24, 0x60	; 96
    1b18:	96 e0       	ldi	r25, 0x06	; 6
    1b1a:	0a da       	rcall	.-3052   	; 0xf30 <ioport_configure_port_pin>
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	61 e0       	ldi	r22, 0x01	; 1
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	96 e0       	ldi	r25, 0x06	; 6
    1b26:	04 da       	rcall	.-3064   	; 0xf30 <ioport_configure_port_pin>
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	62 e0       	ldi	r22, 0x02	; 2
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	96 e0       	ldi	r25, 0x06	; 6
    1b32:	fe d9       	rcall	.-3076   	; 0xf30 <ioport_configure_port_pin>
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	64 e0       	ldi	r22, 0x04	; 4
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	96 e0       	ldi	r25, 0x06	; 6
    1b3e:	f8 d9       	rcall	.-3088   	; 0xf30 <ioport_configure_port_pin>
    1b40:	41 e0       	ldi	r20, 0x01	; 1
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	80 ea       	ldi	r24, 0xA0	; 160
    1b48:	96 e0       	ldi	r25, 0x06	; 6
    1b4a:	f2 d9       	rcall	.-3100   	; 0xf30 <ioport_configure_port_pin>
    1b4c:	43 e0       	ldi	r20, 0x03	; 3
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	68 e0       	ldi	r22, 0x08	; 8
    1b52:	80 e4       	ldi	r24, 0x40	; 64
    1b54:	96 e0       	ldi	r25, 0x06	; 6
    1b56:	ec d9       	rcall	.-3112   	; 0xf30 <ioport_configure_port_pin>
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	64 e0       	ldi	r22, 0x04	; 4
    1b5e:	80 e4       	ldi	r24, 0x40	; 64
    1b60:	96 e0       	ldi	r25, 0x06	; 6
    1b62:	e6 d9       	rcall	.-3124   	; 0xf30 <ioport_configure_port_pin>
    1b64:	43 e0       	ldi	r20, 0x03	; 3
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	68 e0       	ldi	r22, 0x08	; 8
    1b6a:	80 e6       	ldi	r24, 0x60	; 96
    1b6c:	96 e0       	ldi	r25, 0x06	; 6
    1b6e:	e0 d9       	rcall	.-3136   	; 0xf30 <ioport_configure_port_pin>
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	64 e0       	ldi	r22, 0x04	; 4
    1b76:	80 e6       	ldi	r24, 0x60	; 96
    1b78:	96 e0       	ldi	r25, 0x06	; 6
    1b7a:	da d9       	rcall	.-3148   	; 0xf30 <ioport_configure_port_pin>
    1b7c:	43 e0       	ldi	r20, 0x03	; 3
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	68 e0       	ldi	r22, 0x08	; 8
    1b82:	80 e8       	ldi	r24, 0x80	; 128
    1b84:	96 e0       	ldi	r25, 0x06	; 6
    1b86:	d4 d9       	rcall	.-3160   	; 0xf30 <ioport_configure_port_pin>
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	64 e0       	ldi	r22, 0x04	; 4
    1b8e:	80 e8       	ldi	r24, 0x80	; 128
    1b90:	96 e0       	ldi	r25, 0x06	; 6
    1b92:	ce c9       	rjmp	.-3172   	; 0xf30 <ioport_configure_port_pin>
    1b94:	08 95       	ret

00001b96 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1b96:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1b98:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1b9a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1b9c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1b9e:	60 83       	st	Z, r22
	ret                             // Return to caller
    1ba0:	08 95       	ret

00001ba2 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1ba2:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1ba6:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1ba8:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1baa:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1bae:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1bb0:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1bb4:	08 95       	ret

00001bb6 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    1bb6:	cf 92       	push	r12
    1bb8:	df 92       	push	r13
    1bba:	ef 92       	push	r14
    1bbc:	ff 92       	push	r15
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	ec 01       	movw	r28, r24
    1bc8:	6a 01       	movw	r12, r20
    1bca:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    1bcc:	db 01       	movw	r26, r22
    1bce:	ca 01       	movw	r24, r20
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	a1 09       	sbc	r26, r1
    1bd4:	b1 09       	sbc	r27, r1
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	cd 01       	movw	r24, r26
    1bda:	60 0f       	add	r22, r16
    1bdc:	71 1f       	adc	r23, r17
    1bde:	82 1f       	adc	r24, r18
    1be0:	93 1f       	adc	r25, r19
    1be2:	a7 01       	movw	r20, r14
    1be4:	96 01       	movw	r18, r12
    1be6:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__udivmodsi4>

	if (divisor > 128) {
    1bea:	21 38       	cpi	r18, 0x81	; 129
    1bec:	31 05       	cpc	r19, r1
    1bee:	41 05       	cpc	r20, r1
    1bf0:	51 05       	cpc	r21, r1
    1bf2:	f8 f4       	brcc	.+62     	; 0x1c32 <spi_xmega_set_baud_div+0x7c>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    1bf4:	21 34       	cpi	r18, 0x41	; 65
    1bf6:	60 f4       	brcc	.+24     	; 0x1c10 <spi_xmega_set_baud_div+0x5a>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    1bf8:	21 32       	cpi	r18, 0x21	; 33
    1bfa:	60 f4       	brcc	.+24     	; 0x1c14 <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    1bfc:	21 31       	cpi	r18, 0x11	; 17
    1bfe:	60 f4       	brcc	.+24     	; 0x1c18 <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    1c00:	29 30       	cpi	r18, 0x09	; 9
    1c02:	60 f4       	brcc	.+24     	; 0x1c1c <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    1c04:	25 30       	cpi	r18, 0x05	; 5
    1c06:	60 f4       	brcc	.+24     	; 0x1c20 <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    1c08:	23 30       	cpi	r18, 0x03	; 3
    1c0a:	60 f0       	brcs	.+24     	; 0x1c24 <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_PRESCALER_DIV4_gc;
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0b c0       	rjmp	.+22     	; 0x1c26 <spi_xmega_set_baud_div+0x70>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    1c10:	93 e0       	ldi	r25, 0x03	; 3
    1c12:	09 c0       	rjmp	.+18     	; 0x1c26 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    1c14:	92 e0       	ldi	r25, 0x02	; 2
    1c16:	07 c0       	rjmp	.+14     	; 0x1c26 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    1c18:	92 e8       	ldi	r25, 0x82	; 130
    1c1a:	05 c0       	rjmp	.+10     	; 0x1c26 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	03 c0       	rjmp	.+6      	; 0x1c26 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    1c20:	91 e8       	ldi	r25, 0x81	; 129
    1c22:	01 c0       	rjmp	.+2      	; 0x1c26 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    1c24:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    1c26:	88 81       	ld	r24, Y
    1c28:	8c 77       	andi	r24, 0x7C	; 124
    1c2a:	89 2b       	or	r24, r25
    1c2c:	88 83       	st	Y, r24

	return 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <spi_xmega_set_baud_div+0x7e>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    1c32:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	1f 91       	pop	r17
    1c3a:	0f 91       	pop	r16
    1c3c:	ff 90       	pop	r15
    1c3e:	ef 90       	pop	r14
    1c40:	df 90       	pop	r13
    1c42:	cf 90       	pop	r12
    1c44:	08 95       	ret

00001c46 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1c46:	81 11       	cpse	r24, r1
    1c48:	18 c0       	rjmp	.+48     	; 0x1c7a <udd_sleep_mode+0x34>
    1c4a:	90 91 e8 22 	lds	r25, 0x22E8
    1c4e:	99 23       	and	r25, r25
    1c50:	89 f0       	breq	.+34     	; 0x1c74 <udd_sleep_mode+0x2e>
    1c52:	9f b7       	in	r25, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	e6 ef       	ldi	r30, 0xF6	; 246
    1c58:	f2 e2       	ldi	r31, 0x22	; 34
    1c5a:	20 81       	ld	r18, Z
    1c5c:	21 50       	subi	r18, 0x01	; 1
    1c5e:	20 83       	st	Z, r18
    1c60:	9f bf       	out	0x3f, r25	; 63
    1c62:	08 c0       	rjmp	.+16     	; 0x1c74 <udd_sleep_mode+0x2e>
    1c64:	9f b7       	in	r25, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	e6 ef       	ldi	r30, 0xF6	; 246
    1c6a:	f2 e2       	ldi	r31, 0x22	; 34
    1c6c:	20 81       	ld	r18, Z
    1c6e:	2f 5f       	subi	r18, 0xFF	; 255
    1c70:	20 83       	st	Z, r18
    1c72:	9f bf       	out	0x3f, r25	; 63
    1c74:	80 93 e8 22 	sts	0x22E8, r24
    1c78:	08 95       	ret
    1c7a:	90 91 e8 22 	lds	r25, 0x22E8
    1c7e:	99 23       	and	r25, r25
    1c80:	89 f3       	breq	.-30     	; 0x1c64 <udd_sleep_mode+0x1e>
    1c82:	f8 cf       	rjmp	.-16     	; 0x1c74 <udd_sleep_mode+0x2e>

00001c84 <udd_ctrl_init>:
    1c84:	0f 93       	push	r16
    1c86:	e8 ec       	ldi	r30, 0xC8	; 200
    1c88:	f4 e0       	ldi	r31, 0x04	; 4
    1c8a:	80 81       	ld	r24, Z
    1c8c:	8f 7d       	andi	r24, 0xDF	; 223
    1c8e:	80 83       	st	Z, r24
    1c90:	80 81       	ld	r24, Z
    1c92:	8f 7d       	andi	r24, 0xDF	; 223
    1c94:	80 83       	st	Z, r24
    1c96:	ec eb       	ldi	r30, 0xBC	; 188
    1c98:	f2 e2       	ldi	r31, 0x22	; 34
    1c9a:	02 e0       	ldi	r16, 0x02	; 2
    1c9c:	05 93       	las	Z, r16
    1c9e:	10 92 be 22 	sts	0x22BE, r1
    1ca2:	10 92 bf 22 	sts	0x22BF, r1
    1ca6:	00 e2       	ldi	r16, 0x20	; 32
    1ca8:	06 93       	lac	Z, r16
    1caa:	00 e4       	ldi	r16, 0x40	; 64
    1cac:	06 93       	lac	Z, r16
    1cae:	e4 eb       	ldi	r30, 0xB4	; 180
    1cb0:	f2 e2       	ldi	r31, 0x22	; 34
    1cb2:	00 e2       	ldi	r16, 0x20	; 32
    1cb4:	06 93       	lac	Z, r16
    1cb6:	00 e4       	ldi	r16, 0x40	; 64
    1cb8:	06 93       	lac	Z, r16
    1cba:	10 92 07 23 	sts	0x2307, r1
    1cbe:	10 92 08 23 	sts	0x2308, r1
    1cc2:	10 92 09 23 	sts	0x2309, r1
    1cc6:	10 92 0a 23 	sts	0x230A, r1
    1cca:	10 92 05 23 	sts	0x2305, r1
    1cce:	10 92 06 23 	sts	0x2306, r1
    1cd2:	10 92 a7 22 	sts	0x22A7, r1
    1cd6:	0f 91       	pop	r16
    1cd8:	08 95       	ret

00001cda <udd_ctrl_stall_data>:
    1cda:	0f 93       	push	r16
    1cdc:	85 e0       	ldi	r24, 0x05	; 5
    1cde:	80 93 a7 22 	sts	0x22A7, r24
    1ce2:	ed eb       	ldi	r30, 0xBD	; 189
    1ce4:	f2 e2       	ldi	r31, 0x22	; 34
    1ce6:	04 e0       	ldi	r16, 0x04	; 4
    1ce8:	05 93       	las	Z, r16
    1cea:	e5 eb       	ldi	r30, 0xB5	; 181
    1cec:	f2 e2       	ldi	r31, 0x22	; 34
    1cee:	04 e0       	ldi	r16, 0x04	; 4
    1cf0:	05 93       	las	Z, r16
    1cf2:	0f 91       	pop	r16
    1cf4:	08 95       	ret

00001cf6 <udd_ctrl_send_zlp_in>:
    1cf6:	0f 93       	push	r16
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	80 93 a7 22 	sts	0x22A7, r24
    1cfe:	10 92 be 22 	sts	0x22BE, r1
    1d02:	10 92 bf 22 	sts	0x22BF, r1
    1d06:	ec eb       	ldi	r30, 0xBC	; 188
    1d08:	f2 e2       	ldi	r31, 0x22	; 34
    1d0a:	02 e0       	ldi	r16, 0x02	; 2
    1d0c:	06 93       	lac	Z, r16
    1d0e:	0f 91       	pop	r16
    1d10:	08 95       	ret

00001d12 <udd_ctrl_endofrequest>:
    1d12:	e0 91 07 23 	lds	r30, 0x2307
    1d16:	f0 91 08 23 	lds	r31, 0x2308
    1d1a:	30 97       	sbiw	r30, 0x00	; 0
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <udd_ctrl_endofrequest+0xe>
    1d1e:	19 95       	eicall
    1d20:	08 95       	ret

00001d22 <udd_ctrl_in_sent>:
    1d22:	0f 93       	push	r16
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	80 91 a7 22 	lds	r24, 0x22A7
    1d2c:	83 30       	cpi	r24, 0x03	; 3
    1d2e:	19 f4       	brne	.+6      	; 0x1d36 <udd_ctrl_in_sent+0x14>
    1d30:	f0 df       	rcall	.-32     	; 0x1d12 <udd_ctrl_endofrequest>
    1d32:	a8 df       	rcall	.-176    	; 0x1c84 <udd_ctrl_init>
    1d34:	60 c0       	rjmp	.+192    	; 0x1df6 <udd_ctrl_in_sent+0xd4>
    1d36:	80 91 a3 22 	lds	r24, 0x22A3
    1d3a:	90 91 a4 22 	lds	r25, 0x22A4
    1d3e:	c0 91 05 23 	lds	r28, 0x2305
    1d42:	d0 91 06 23 	lds	r29, 0x2306
    1d46:	c8 1b       	sub	r28, r24
    1d48:	d9 0b       	sbc	r29, r25
    1d4a:	71 f5       	brne	.+92     	; 0x1da8 <udd_ctrl_in_sent+0x86>
    1d4c:	20 91 a5 22 	lds	r18, 0x22A5
    1d50:	30 91 a6 22 	lds	r19, 0x22A6
    1d54:	82 0f       	add	r24, r18
    1d56:	93 1f       	adc	r25, r19
    1d58:	80 93 a5 22 	sts	0x22A5, r24
    1d5c:	90 93 a6 22 	sts	0x22A6, r25
    1d60:	20 91 01 23 	lds	r18, 0x2301
    1d64:	30 91 02 23 	lds	r19, 0x2302
    1d68:	82 17       	cp	r24, r18
    1d6a:	93 07       	cpc	r25, r19
    1d6c:	21 f0       	breq	.+8      	; 0x1d76 <udd_ctrl_in_sent+0x54>
    1d6e:	80 91 f6 21 	lds	r24, 0x21F6
    1d72:	88 23       	and	r24, r24
    1d74:	41 f0       	breq	.+16     	; 0x1d86 <udd_ctrl_in_sent+0x64>
    1d76:	84 e0       	ldi	r24, 0x04	; 4
    1d78:	80 93 a7 22 	sts	0x22A7, r24
    1d7c:	e4 eb       	ldi	r30, 0xB4	; 180
    1d7e:	f2 e2       	ldi	r31, 0x22	; 34
    1d80:	02 e0       	ldi	r16, 0x02	; 2
    1d82:	06 93       	lac	Z, r16
    1d84:	38 c0       	rjmp	.+112    	; 0x1df6 <udd_ctrl_in_sent+0xd4>
    1d86:	e0 91 09 23 	lds	r30, 0x2309
    1d8a:	f0 91 0a 23 	lds	r31, 0x230A
    1d8e:	30 97       	sbiw	r30, 0x00	; 0
    1d90:	99 f0       	breq	.+38     	; 0x1db8 <udd_ctrl_in_sent+0x96>
    1d92:	19 95       	eicall
    1d94:	88 23       	and	r24, r24
    1d96:	81 f0       	breq	.+32     	; 0x1db8 <udd_ctrl_in_sent+0x96>
    1d98:	10 92 a3 22 	sts	0x22A3, r1
    1d9c:	10 92 a4 22 	sts	0x22A4, r1
    1da0:	c0 91 05 23 	lds	r28, 0x2305
    1da4:	d0 91 06 23 	lds	r29, 0x2306
    1da8:	c8 30       	cpi	r28, 0x08	; 8
    1daa:	d1 05       	cpc	r29, r1
    1dac:	28 f0       	brcs	.+10     	; 0x1db8 <udd_ctrl_in_sent+0x96>
    1dae:	10 92 f6 21 	sts	0x21F6, r1
    1db2:	c8 e0       	ldi	r28, 0x08	; 8
    1db4:	d0 e0       	ldi	r29, 0x00	; 0
    1db6:	03 c0       	rjmp	.+6      	; 0x1dbe <udd_ctrl_in_sent+0x9c>
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	80 93 f6 21 	sts	0x21F6, r24
    1dbe:	c0 93 be 22 	sts	0x22BE, r28
    1dc2:	d0 93 bf 22 	sts	0x22BF, r29
    1dc6:	80 91 a3 22 	lds	r24, 0x22A3
    1dca:	90 91 a4 22 	lds	r25, 0x22A4
    1dce:	20 91 03 23 	lds	r18, 0x2303
    1dd2:	30 91 04 23 	lds	r19, 0x2304
    1dd6:	28 0f       	add	r18, r24
    1dd8:	39 1f       	adc	r19, r25
    1dda:	20 93 c0 22 	sts	0x22C0, r18
    1dde:	30 93 c1 22 	sts	0x22C1, r19
    1de2:	c8 0f       	add	r28, r24
    1de4:	d9 1f       	adc	r29, r25
    1de6:	c0 93 a3 22 	sts	0x22A3, r28
    1dea:	d0 93 a4 22 	sts	0x22A4, r29
    1dee:	ec eb       	ldi	r30, 0xBC	; 188
    1df0:	f2 e2       	ldi	r31, 0x22	; 34
    1df2:	02 e0       	ldi	r16, 0x02	; 2
    1df4:	06 93       	lac	Z, r16
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	0f 91       	pop	r16
    1dfc:	08 95       	ret

00001dfe <udd_ep_get_size>:
    1dfe:	fc 01       	movw	r30, r24
    1e00:	81 81       	ldd	r24, Z+1	; 0x01
    1e02:	87 70       	andi	r24, 0x07	; 7
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	fc 01       	movw	r30, r24
    1e08:	31 97       	sbiw	r30, 0x01	; 1
    1e0a:	e7 30       	cpi	r30, 0x07	; 7
    1e0c:	f1 05       	cpc	r31, r1
    1e0e:	20 f4       	brcc	.+8      	; 0x1e18 <udd_ep_get_size+0x1a>
    1e10:	e2 50       	subi	r30, 0x02	; 2
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	0c 94 da 1c 	jmp	0x39b4	; 0x39b4 <__tablejump2__>
    1e18:	88 e0       	ldi	r24, 0x08	; 8
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	08 95       	ret
    1e1e:	80 e2       	ldi	r24, 0x20	; 32
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	08 95       	ret
    1e24:	80 e4       	ldi	r24, 0x40	; 64
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	08 95       	ret
    1e2a:	80 e8       	ldi	r24, 0x80	; 128
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	08 95       	ret
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	91 e0       	ldi	r25, 0x01	; 1
    1e34:	08 95       	ret
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	92 e0       	ldi	r25, 0x02	; 2
    1e3a:	08 95       	ret
    1e3c:	8f ef       	ldi	r24, 0xFF	; 255
    1e3e:	93 e0       	ldi	r25, 0x03	; 3
    1e40:	08 95       	ret
    1e42:	80 e1       	ldi	r24, 0x10	; 16
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	08 95       	ret

00001e48 <udd_ep_get_job>:
    1e48:	28 2f       	mov	r18, r24
    1e4a:	2f 70       	andi	r18, 0x0F	; 15
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	22 0f       	add	r18, r18
    1e50:	33 1f       	adc	r19, r19
    1e52:	99 27       	eor	r25, r25
    1e54:	87 fd       	sbrc	r24, 7
    1e56:	90 95       	com	r25
    1e58:	88 27       	eor	r24, r24
    1e5a:	99 0f       	add	r25, r25
    1e5c:	88 1f       	adc	r24, r24
    1e5e:	99 27       	eor	r25, r25
    1e60:	82 0f       	add	r24, r18
    1e62:	93 1f       	adc	r25, r19
    1e64:	02 97       	sbiw	r24, 0x02	; 2
    1e66:	9c 01       	movw	r18, r24
    1e68:	22 0f       	add	r18, r18
    1e6a:	33 1f       	adc	r19, r19
    1e6c:	22 0f       	add	r18, r18
    1e6e:	33 1f       	adc	r19, r19
    1e70:	22 0f       	add	r18, r18
    1e72:	33 1f       	adc	r19, r19
    1e74:	82 0f       	add	r24, r18
    1e76:	93 1f       	adc	r25, r19
    1e78:	89 58       	subi	r24, 0x89	; 137
    1e7a:	9d 4d       	sbci	r25, 0xDD	; 221
    1e7c:	08 95       	ret

00001e7e <udd_ctrl_interrupt_tc_setup>:
    1e7e:	0f 93       	push	r16
    1e80:	cf 93       	push	r28
    1e82:	80 91 cc 04 	lds	r24, 0x04CC
    1e86:	80 ff       	sbrs	r24, 0
    1e88:	62 c0       	rjmp	.+196    	; 0x1f4e <udd_ctrl_interrupt_tc_setup+0xd0>
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	80 93 cc 04 	sts	0x04CC, r24
    1e90:	e4 eb       	ldi	r30, 0xB4	; 180
    1e92:	f2 e2       	ldi	r31, 0x22	; 34
    1e94:	00 e8       	ldi	r16, 0x80	; 128
    1e96:	06 93       	lac	Z, r16
    1e98:	ec eb       	ldi	r30, 0xBC	; 188
    1e9a:	f2 e2       	ldi	r31, 0x22	; 34
    1e9c:	00 e8       	ldi	r16, 0x80	; 128
    1e9e:	06 93       	lac	Z, r16
    1ea0:	80 93 ca 04 	sts	0x04CA, r24
    1ea4:	e4 eb       	ldi	r30, 0xB4	; 180
    1ea6:	f2 e2       	ldi	r31, 0x22	; 34
    1ea8:	00 e1       	ldi	r16, 0x10	; 16
    1eaa:	06 93       	lac	Z, r16
    1eac:	80 91 a7 22 	lds	r24, 0x22A7
    1eb0:	88 23       	and	r24, r24
    1eb2:	29 f0       	breq	.+10     	; 0x1ebe <udd_ctrl_interrupt_tc_setup+0x40>
    1eb4:	83 50       	subi	r24, 0x03	; 3
    1eb6:	82 30       	cpi	r24, 0x02	; 2
    1eb8:	08 f4       	brcc	.+2      	; 0x1ebc <udd_ctrl_interrupt_tc_setup+0x3e>
    1eba:	2b df       	rcall	.-426    	; 0x1d12 <udd_ctrl_endofrequest>
    1ebc:	e3 de       	rcall	.-570    	; 0x1c84 <udd_ctrl_init>
    1ebe:	80 91 b6 22 	lds	r24, 0x22B6
    1ec2:	90 91 b7 22 	lds	r25, 0x22B7
    1ec6:	08 97       	sbiw	r24, 0x08	; 8
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <udd_ctrl_interrupt_tc_setup+0x4e>
    1eca:	43 c0       	rjmp	.+134    	; 0x1f52 <udd_ctrl_interrupt_tc_setup+0xd4>
    1ecc:	88 e0       	ldi	r24, 0x08	; 8
    1ece:	eb e9       	ldi	r30, 0x9B	; 155
    1ed0:	f2 e2       	ldi	r31, 0x22	; 34
    1ed2:	ab ef       	ldi	r26, 0xFB	; 251
    1ed4:	b2 e2       	ldi	r27, 0x22	; 34
    1ed6:	01 90       	ld	r0, Z+
    1ed8:	0d 92       	st	X+, r0
    1eda:	8a 95       	dec	r24
    1edc:	e1 f7       	brne	.-8      	; 0x1ed6 <udd_ctrl_interrupt_tc_setup+0x58>
    1ede:	e8 ec       	ldi	r30, 0xC8	; 200
    1ee0:	f4 e0       	ldi	r31, 0x04	; 4
    1ee2:	80 81       	ld	r24, Z
    1ee4:	80 62       	ori	r24, 0x20	; 32
    1ee6:	80 83       	st	Z, r24
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 62       	ori	r24, 0x20	; 32
    1eec:	80 83       	st	Z, r24
    1eee:	34 db       	rcall	.-2456   	; 0x1558 <udc_process_setup>
    1ef0:	c8 2f       	mov	r28, r24
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	03 c0       	rjmp	.+6      	; 0x1efc <udd_ctrl_interrupt_tc_setup+0x7e>
    1ef6:	f1 de       	rcall	.-542    	; 0x1cda <udd_ctrl_stall_data>
    1ef8:	c1 e0       	ldi	r28, 0x01	; 1
    1efa:	2c c0       	rjmp	.+88     	; 0x1f54 <udd_ctrl_interrupt_tc_setup+0xd6>
    1efc:	80 91 fb 22 	lds	r24, 0x22FB
    1f00:	88 23       	and	r24, r24
    1f02:	6c f4       	brge	.+26     	; 0x1f1e <udd_ctrl_interrupt_tc_setup+0xa0>
    1f04:	10 92 a5 22 	sts	0x22A5, r1
    1f08:	10 92 a6 22 	sts	0x22A6, r1
    1f0c:	10 92 a3 22 	sts	0x22A3, r1
    1f10:	10 92 a4 22 	sts	0x22A4, r1
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	80 93 a7 22 	sts	0x22A7, r24
    1f1a:	03 df       	rcall	.-506    	; 0x1d22 <udd_ctrl_in_sent>
    1f1c:	1b c0       	rjmp	.+54     	; 0x1f54 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f1e:	20 91 01 23 	lds	r18, 0x2301
    1f22:	30 91 02 23 	lds	r19, 0x2302
    1f26:	23 2b       	or	r18, r19
    1f28:	11 f4       	brne	.+4      	; 0x1f2e <udd_ctrl_interrupt_tc_setup+0xb0>
    1f2a:	e5 de       	rcall	.-566    	; 0x1cf6 <udd_ctrl_send_zlp_in>
    1f2c:	13 c0       	rjmp	.+38     	; 0x1f54 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f2e:	10 92 a5 22 	sts	0x22A5, r1
    1f32:	10 92 a6 22 	sts	0x22A6, r1
    1f36:	10 92 a3 22 	sts	0x22A3, r1
    1f3a:	10 92 a4 22 	sts	0x22A4, r1
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	80 93 a7 22 	sts	0x22A7, r24
    1f44:	e4 eb       	ldi	r30, 0xB4	; 180
    1f46:	f2 e2       	ldi	r31, 0x22	; 34
    1f48:	02 e0       	ldi	r16, 0x02	; 2
    1f4a:	06 93       	lac	Z, r16
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f4e:	c0 e0       	ldi	r28, 0x00	; 0
    1f50:	01 c0       	rjmp	.+2      	; 0x1f54 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f52:	c1 e0       	ldi	r28, 0x01	; 1
    1f54:	8c 2f       	mov	r24, r28
    1f56:	cf 91       	pop	r28
    1f58:	0f 91       	pop	r16
    1f5a:	08 95       	ret

00001f5c <udd_ep_trans_complet>:
    1f5c:	bf 92       	push	r11
    1f5e:	cf 92       	push	r12
    1f60:	df 92       	push	r13
    1f62:	ef 92       	push	r14
    1f64:	ff 92       	push	r15
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	b8 2e       	mov	r11, r24
    1f70:	6b df       	rcall	.-298    	; 0x1e48 <udd_ep_get_job>
    1f72:	ec 01       	movw	r28, r24
    1f74:	1b 2d       	mov	r17, r11
    1f76:	11 1f       	adc	r17, r17
    1f78:	11 27       	eor	r17, r17
    1f7a:	11 1f       	adc	r17, r17
    1f7c:	8b 2d       	mov	r24, r11
    1f7e:	8f 70       	andi	r24, 0x0F	; 15
    1f80:	e8 2e       	mov	r14, r24
    1f82:	f1 2c       	mov	r15, r1
    1f84:	ee 0c       	add	r14, r14
    1f86:	ff 1c       	adc	r15, r15
    1f88:	e1 0e       	add	r14, r17
    1f8a:	f1 1c       	adc	r15, r1
    1f8c:	c7 01       	movw	r24, r14
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	9c 01       	movw	r18, r24
    1f9c:	2c 54       	subi	r18, 0x4C	; 76
    1f9e:	3d 4d       	sbci	r19, 0xDD	; 221
    1fa0:	79 01       	movw	r14, r18
    1fa2:	c9 01       	movw	r24, r18
    1fa4:	2c df       	rcall	.-424    	; 0x1dfe <udd_ep_get_size>
    1fa6:	6c 01       	movw	r12, r24
    1fa8:	11 23       	and	r17, r17
    1faa:	09 f4       	brne	.+2      	; 0x1fae <udd_ep_trans_complet+0x52>
    1fac:	5b c0       	rjmp	.+182    	; 0x2064 <udd_ep_trans_complet+0x108>
    1fae:	d7 01       	movw	r26, r14
    1fb0:	16 96       	adiw	r26, 0x06	; 6
    1fb2:	2d 91       	ld	r18, X+
    1fb4:	3c 91       	ld	r19, X
    1fb6:	17 97       	sbiw	r26, 0x07	; 7
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	28 0f       	add	r18, r24
    1fbe:	39 1f       	adc	r19, r25
    1fc0:	2d 83       	std	Y+5, r18	; 0x05
    1fc2:	3e 83       	std	Y+6, r19	; 0x06
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	28 17       	cp	r18, r24
    1fca:	39 07       	cpc	r19, r25
    1fcc:	c9 f1       	breq	.+114    	; 0x2040 <udd_ep_trans_complet+0xe4>
    1fce:	fc 01       	movw	r30, r24
    1fd0:	e2 1b       	sub	r30, r18
    1fd2:	f3 0b       	sbc	r31, r19
    1fd4:	9f 01       	movw	r18, r30
    1fd6:	21 15       	cp	r18, r1
    1fd8:	f4 e0       	ldi	r31, 0x04	; 4
    1fda:	3f 07       	cpc	r19, r31
    1fdc:	40 f0       	brcs	.+16     	; 0x1fee <udd_ep_trans_complet+0x92>
    1fde:	2f ef       	ldi	r18, 0xFF	; 255
    1fe0:	33 e0       	ldi	r19, 0x03	; 3
    1fe2:	c9 01       	movw	r24, r18
    1fe4:	b6 01       	movw	r22, r12
    1fe6:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__udivmodhi4>
    1fea:	28 1b       	sub	r18, r24
    1fec:	39 0b       	sbc	r19, r25
    1fee:	88 81       	ld	r24, Y
    1ff0:	81 ff       	sbrs	r24, 1
    1ff2:	0a c0       	rjmp	.+20     	; 0x2008 <udd_ep_trans_complet+0xac>
    1ff4:	c9 01       	movw	r24, r18
    1ff6:	b6 01       	movw	r22, r12
    1ff8:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__udivmodhi4>
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	89 2b       	or	r24, r25
    2000:	09 f0       	breq	.+2      	; 0x2004 <udd_ep_trans_complet+0xa8>
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	94 2f       	mov	r25, r20
    2006:	01 c0       	rjmp	.+2      	; 0x200a <udd_ep_trans_complet+0xae>
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	88 81       	ld	r24, Y
    200c:	90 fb       	bst	r25, 0
    200e:	81 f9       	bld	r24, 1
    2010:	88 83       	st	Y, r24
    2012:	d7 01       	movw	r26, r14
    2014:	16 96       	adiw	r26, 0x06	; 6
    2016:	1d 92       	st	X+, r1
    2018:	1c 92       	st	X, r1
    201a:	17 97       	sbiw	r26, 0x07	; 7
    201c:	12 96       	adiw	r26, 0x02	; 2
    201e:	2d 93       	st	X+, r18
    2020:	3c 93       	st	X, r19
    2022:	13 97       	sbiw	r26, 0x03	; 3
    2024:	29 81       	ldd	r18, Y+1	; 0x01
    2026:	3a 81       	ldd	r19, Y+2	; 0x02
    2028:	8d 81       	ldd	r24, Y+5	; 0x05
    202a:	9e 81       	ldd	r25, Y+6	; 0x06
    202c:	82 0f       	add	r24, r18
    202e:	93 1f       	adc	r25, r19
    2030:	14 96       	adiw	r26, 0x04	; 4
    2032:	8d 93       	st	X+, r24
    2034:	9c 93       	st	X, r25
    2036:	15 97       	sbiw	r26, 0x05	; 5
    2038:	f7 01       	movw	r30, r14
    203a:	02 e0       	ldi	r16, 0x02	; 2
    203c:	06 93       	lac	Z, r16
    203e:	98 c0       	rjmp	.+304    	; 0x2170 <udd_ep_trans_complet+0x214>
    2040:	88 81       	ld	r24, Y
    2042:	81 ff       	sbrs	r24, 1
    2044:	87 c0       	rjmp	.+270    	; 0x2154 <udd_ep_trans_complet+0x1f8>
    2046:	8d 7f       	andi	r24, 0xFD	; 253
    2048:	88 83       	st	Y, r24
    204a:	d7 01       	movw	r26, r14
    204c:	16 96       	adiw	r26, 0x06	; 6
    204e:	1d 92       	st	X+, r1
    2050:	1c 92       	st	X, r1
    2052:	17 97       	sbiw	r26, 0x07	; 7
    2054:	12 96       	adiw	r26, 0x02	; 2
    2056:	1d 92       	st	X+, r1
    2058:	1c 92       	st	X, r1
    205a:	13 97       	sbiw	r26, 0x03	; 3
    205c:	f7 01       	movw	r30, r14
    205e:	02 e0       	ldi	r16, 0x02	; 2
    2060:	06 93       	lac	Z, r16
    2062:	86 c0       	rjmp	.+268    	; 0x2170 <udd_ep_trans_complet+0x214>
    2064:	d7 01       	movw	r26, r14
    2066:	12 96       	adiw	r26, 0x02	; 2
    2068:	0d 91       	ld	r16, X+
    206a:	1c 91       	ld	r17, X
    206c:	13 97       	sbiw	r26, 0x03	; 3
    206e:	88 81       	ld	r24, Y
    2070:	82 ff       	sbrs	r24, 2
    2072:	15 c0       	rjmp	.+42     	; 0x209e <udd_ep_trans_complet+0x142>
    2074:	e9 81       	ldd	r30, Y+1	; 0x01
    2076:	fa 81       	ldd	r31, Y+2	; 0x02
    2078:	2d 81       	ldd	r18, Y+5	; 0x05
    207a:	3e 81       	ldd	r19, Y+6	; 0x06
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	b6 01       	movw	r22, r12
    2082:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__udivmodhi4>
    2086:	b0 e4       	ldi	r27, 0x40	; 64
    2088:	bb 9e       	mul	r11, r27
    208a:	b0 01       	movw	r22, r0
    208c:	11 24       	eor	r1, r1
    208e:	69 54       	subi	r22, 0x49	; 73
    2090:	7e 4d       	sbci	r23, 0xDE	; 222
    2092:	ac 01       	movw	r20, r24
    2094:	cf 01       	movw	r24, r30
    2096:	82 0f       	add	r24, r18
    2098:	93 1f       	adc	r25, r19
    209a:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <memcpy>
    209e:	2d 81       	ldd	r18, Y+5	; 0x05
    20a0:	3e 81       	ldd	r19, Y+6	; 0x06
    20a2:	20 0f       	add	r18, r16
    20a4:	31 1f       	adc	r19, r17
    20a6:	2d 83       	std	Y+5, r18	; 0x05
    20a8:	3e 83       	std	Y+6, r19	; 0x06
    20aa:	eb 81       	ldd	r30, Y+3	; 0x03
    20ac:	fc 81       	ldd	r31, Y+4	; 0x04
    20ae:	e2 17       	cp	r30, r18
    20b0:	f3 07       	cpc	r31, r19
    20b2:	10 f4       	brcc	.+4      	; 0x20b8 <udd_ep_trans_complet+0x15c>
    20b4:	ed 83       	std	Y+5, r30	; 0x05
    20b6:	fe 83       	std	Y+6, r31	; 0x06
    20b8:	d7 01       	movw	r26, r14
    20ba:	16 96       	adiw	r26, 0x06	; 6
    20bc:	8d 91       	ld	r24, X+
    20be:	9c 91       	ld	r25, X
    20c0:	17 97       	sbiw	r26, 0x07	; 7
    20c2:	80 17       	cp	r24, r16
    20c4:	91 07       	cpc	r25, r17
    20c6:	09 f0       	breq	.+2      	; 0x20ca <udd_ep_trans_complet+0x16e>
    20c8:	45 c0       	rjmp	.+138    	; 0x2154 <udd_ep_trans_complet+0x1f8>
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	e8 17       	cp	r30, r24
    20d0:	f9 07       	cpc	r31, r25
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <udd_ep_trans_complet+0x17a>
    20d4:	3f c0       	rjmp	.+126    	; 0x2154 <udd_ep_trans_complet+0x1f8>
    20d6:	e8 1b       	sub	r30, r24
    20d8:	f9 0b       	sbc	r31, r25
    20da:	e1 15       	cp	r30, r1
    20dc:	b4 e0       	ldi	r27, 0x04	; 4
    20de:	fb 07       	cpc	r31, r27
    20e0:	48 f0       	brcs	.+18     	; 0x20f4 <udd_ep_trans_complet+0x198>
    20e2:	ef ef       	ldi	r30, 0xFF	; 255
    20e4:	f3 e0       	ldi	r31, 0x03	; 3
    20e6:	cf 01       	movw	r24, r30
    20e8:	b6 01       	movw	r22, r12
    20ea:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__udivmodhi4>
    20ee:	e8 1b       	sub	r30, r24
    20f0:	f9 0b       	sbc	r31, r25
    20f2:	06 c0       	rjmp	.+12     	; 0x2100 <udd_ep_trans_complet+0x1a4>
    20f4:	cf 01       	movw	r24, r30
    20f6:	b6 01       	movw	r22, r12
    20f8:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__udivmodhi4>
    20fc:	e8 1b       	sub	r30, r24
    20fe:	f9 0b       	sbc	r31, r25
    2100:	d7 01       	movw	r26, r14
    2102:	12 96       	adiw	r26, 0x02	; 2
    2104:	1d 92       	st	X+, r1
    2106:	1c 92       	st	X, r1
    2108:	13 97       	sbiw	r26, 0x03	; 3
    210a:	ec 15       	cp	r30, r12
    210c:	fd 05       	cpc	r31, r13
    210e:	78 f4       	brcc	.+30     	; 0x212e <udd_ep_trans_complet+0x1d2>
    2110:	88 81       	ld	r24, Y
    2112:	84 60       	ori	r24, 0x04	; 4
    2114:	88 83       	st	Y, r24
    2116:	b0 e4       	ldi	r27, 0x40	; 64
    2118:	bb 9e       	mul	r11, r27
    211a:	c0 01       	movw	r24, r0
    211c:	11 24       	eor	r1, r1
    211e:	89 54       	subi	r24, 0x49	; 73
    2120:	9e 4d       	sbci	r25, 0xDE	; 222
    2122:	f7 01       	movw	r30, r14
    2124:	84 83       	std	Z+4, r24	; 0x04
    2126:	95 83       	std	Z+5, r25	; 0x05
    2128:	c6 82       	std	Z+6, r12	; 0x06
    212a:	d7 82       	std	Z+7, r13	; 0x07
    212c:	0f c0       	rjmp	.+30     	; 0x214c <udd_ep_trans_complet+0x1f0>
    212e:	29 81       	ldd	r18, Y+1	; 0x01
    2130:	3a 81       	ldd	r19, Y+2	; 0x02
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	82 0f       	add	r24, r18
    2138:	93 1f       	adc	r25, r19
    213a:	d7 01       	movw	r26, r14
    213c:	14 96       	adiw	r26, 0x04	; 4
    213e:	8d 93       	st	X+, r24
    2140:	9c 93       	st	X, r25
    2142:	15 97       	sbiw	r26, 0x05	; 5
    2144:	16 96       	adiw	r26, 0x06	; 6
    2146:	ed 93       	st	X+, r30
    2148:	fc 93       	st	X, r31
    214a:	17 97       	sbiw	r26, 0x07	; 7
    214c:	f7 01       	movw	r30, r14
    214e:	02 e0       	ldi	r16, 0x02	; 2
    2150:	06 93       	lac	Z, r16
    2152:	0e c0       	rjmp	.+28     	; 0x2170 <udd_ep_trans_complet+0x214>
    2154:	88 81       	ld	r24, Y
    2156:	80 ff       	sbrs	r24, 0
    2158:	0b c0       	rjmp	.+22     	; 0x2170 <udd_ep_trans_complet+0x214>
    215a:	8e 7f       	andi	r24, 0xFE	; 254
    215c:	88 83       	st	Y, r24
    215e:	ef 81       	ldd	r30, Y+7	; 0x07
    2160:	f8 85       	ldd	r31, Y+8	; 0x08
    2162:	30 97       	sbiw	r30, 0x00	; 0
    2164:	29 f0       	breq	.+10     	; 0x2170 <udd_ep_trans_complet+0x214>
    2166:	6d 81       	ldd	r22, Y+5	; 0x05
    2168:	7e 81       	ldd	r23, Y+6	; 0x06
    216a:	4b 2d       	mov	r20, r11
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	19 95       	eicall
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	df 90       	pop	r13
    217e:	cf 90       	pop	r12
    2180:	bf 90       	pop	r11
    2182:	08 95       	ret

00002184 <udd_attach>:
    2184:	cf 93       	push	r28
    2186:	cf b7       	in	r28, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	5c dd       	rcall	.-1352   	; 0x1c46 <udd_sleep_mode>
    218e:	ea ec       	ldi	r30, 0xCA	; 202
    2190:	f4 e0       	ldi	r31, 0x04	; 4
    2192:	80 e4       	ldi	r24, 0x40	; 64
    2194:	80 83       	st	Z, r24
    2196:	80 e2       	ldi	r24, 0x20	; 32
    2198:	80 83       	st	Z, r24
    219a:	e1 ec       	ldi	r30, 0xC1	; 193
    219c:	f4 e0       	ldi	r31, 0x04	; 4
    219e:	80 81       	ld	r24, Z
    21a0:	81 60       	ori	r24, 0x01	; 1
    21a2:	80 83       	st	Z, r24
    21a4:	a9 ec       	ldi	r26, 0xC9	; 201
    21a6:	b4 e0       	ldi	r27, 0x04	; 4
    21a8:	8c 91       	ld	r24, X
    21aa:	82 60       	ori	r24, 0x02	; 2
    21ac:	8c 93       	st	X, r24
    21ae:	e8 ec       	ldi	r30, 0xC8	; 200
    21b0:	f4 e0       	ldi	r31, 0x04	; 4
    21b2:	80 81       	ld	r24, Z
    21b4:	80 64       	ori	r24, 0x40	; 64
    21b6:	80 83       	st	Z, r24
    21b8:	8c 91       	ld	r24, X
    21ba:	81 60       	ori	r24, 0x01	; 1
    21bc:	8c 93       	st	X, r24
    21be:	80 81       	ld	r24, Z
    21c0:	80 68       	ori	r24, 0x80	; 128
    21c2:	80 83       	st	Z, r24
    21c4:	cf bf       	out	0x3f, r28	; 63
    21c6:	cf 91       	pop	r28
    21c8:	08 95       	ret

000021ca <udd_enable>:
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	c0 e6       	ldi	r28, 0x60	; 96
    21d0:	d0 e0       	ldi	r29, 0x00	; 0
    21d2:	18 82       	st	Y, r1
    21d4:	80 e3       	ldi	r24, 0x30	; 48
    21d6:	0e 94 62 07 	call	0xec4	; 0xec4 <sysclk_enable_usb>
    21da:	e0 ec       	ldi	r30, 0xC0	; 192
    21dc:	f4 e0       	ldi	r31, 0x04	; 4
    21de:	80 81       	ld	r24, Z
    21e0:	80 64       	ori	r24, 0x40	; 64
    21e2:	80 83       	st	Z, r24
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	88 83       	st	Y, r24
    21e8:	cf b7       	in	r28, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	10 92 b5 22 	sts	0x22B5, r1
    21f0:	10 92 bd 22 	sts	0x22BD, r1
    21f4:	10 92 c5 22 	sts	0x22C5, r1
    21f8:	10 92 cd 22 	sts	0x22CD, r1
    21fc:	10 92 d5 22 	sts	0x22D5, r1
    2200:	10 92 dd 22 	sts	0x22DD, r1
    2204:	e7 e7       	ldi	r30, 0x77	; 119
    2206:	f2 e2       	ldi	r31, 0x22	; 34
    2208:	80 81       	ld	r24, Z
    220a:	8e 7f       	andi	r24, 0xFE	; 254
    220c:	80 83       	st	Z, r24
    220e:	e0 e8       	ldi	r30, 0x80	; 128
    2210:	f2 e2       	ldi	r31, 0x22	; 34
    2212:	80 81       	ld	r24, Z
    2214:	8e 7f       	andi	r24, 0xFE	; 254
    2216:	80 83       	st	Z, r24
    2218:	e9 e8       	ldi	r30, 0x89	; 137
    221a:	f2 e2       	ldi	r31, 0x22	; 34
    221c:	80 81       	ld	r24, Z
    221e:	8e 7f       	andi	r24, 0xFE	; 254
    2220:	80 83       	st	Z, r24
    2222:	e2 e9       	ldi	r30, 0x92	; 146
    2224:	f2 e2       	ldi	r31, 0x22	; 34
    2226:	80 81       	ld	r24, Z
    2228:	8e 7f       	andi	r24, 0xFE	; 254
    222a:	80 83       	st	Z, r24
    222c:	6a e1       	ldi	r22, 0x1A	; 26
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	b7 dc       	rcall	.-1682   	; 0x1ba2 <nvm_read_byte>
    2234:	8f 3f       	cpi	r24, 0xFF	; 255
    2236:	19 f0       	breq	.+6      	; 0x223e <udd_enable+0x74>
    2238:	80 93 fa 04 	sts	0x04FA, r24
    223c:	03 c0       	rjmp	.+6      	; 0x2244 <udd_enable+0x7a>
    223e:	8f e1       	ldi	r24, 0x1F	; 31
    2240:	80 93 fa 04 	sts	0x04FA, r24
    2244:	6b e1       	ldi	r22, 0x1B	; 27
    2246:	70 e0       	ldi	r23, 0x00	; 0
    2248:	82 e0       	ldi	r24, 0x02	; 2
    224a:	ab dc       	rcall	.-1706   	; 0x1ba2 <nvm_read_byte>
    224c:	8f 3f       	cpi	r24, 0xFF	; 255
    224e:	19 f0       	breq	.+6      	; 0x2256 <udd_enable+0x8c>
    2250:	80 93 fb 04 	sts	0x04FB, r24
    2254:	03 c0       	rjmp	.+6      	; 0x225c <udd_enable+0x92>
    2256:	8f e1       	ldi	r24, 0x1F	; 31
    2258:	80 93 fb 04 	sts	0x04FB, r24
    225c:	e0 ec       	ldi	r30, 0xC0	; 192
    225e:	f4 e0       	ldi	r31, 0x04	; 4
    2260:	80 81       	ld	r24, Z
    2262:	82 60       	ori	r24, 0x02	; 2
    2264:	80 83       	st	Z, r24
    2266:	80 81       	ld	r24, Z
    2268:	80 68       	ori	r24, 0x80	; 128
    226a:	80 83       	st	Z, r24
    226c:	80 81       	ld	r24, Z
    226e:	80 61       	ori	r24, 0x10	; 16
    2270:	80 83       	st	Z, r24
    2272:	84 eb       	ldi	r24, 0xB4	; 180
    2274:	92 e2       	ldi	r25, 0x22	; 34
    2276:	86 83       	std	Z+6, r24	; 0x06
    2278:	97 83       	std	Z+7, r25	; 0x07
    227a:	80 81       	ld	r24, Z
    227c:	80 62       	ori	r24, 0x20	; 32
    227e:	80 83       	st	Z, r24
    2280:	8f ef       	ldi	r24, 0xFF	; 255
    2282:	80 93 c5 04 	sts	0x04C5, r24
    2286:	e8 ec       	ldi	r30, 0xC8	; 200
    2288:	f4 e0       	ldi	r31, 0x04	; 4
    228a:	80 81       	ld	r24, Z
    228c:	81 60       	ori	r24, 0x01	; 1
    228e:	80 83       	st	Z, r24
    2290:	10 92 e8 22 	sts	0x22E8, r1
    2294:	8f b7       	in	r24, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	ea ef       	ldi	r30, 0xFA	; 250
    229a:	f2 e2       	ldi	r31, 0x22	; 34
    229c:	90 81       	ld	r25, Z
    229e:	9f 5f       	subi	r25, 0xFF	; 255
    22a0:	90 83       	st	Z, r25
    22a2:	8f bf       	out	0x3f, r24	; 63
    22a4:	6f df       	rcall	.-290    	; 0x2184 <udd_attach>
    22a6:	cf bf       	out	0x3f, r28	; 63
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	08 95       	ret

000022ae <udd_set_address>:
    22ae:	80 93 c3 04 	sts	0x04C3, r24
    22b2:	08 95       	ret

000022b4 <udd_getaddress>:
    22b4:	80 91 c3 04 	lds	r24, 0x04C3
    22b8:	08 95       	ret

000022ba <udd_set_setup_payload>:
    22ba:	80 93 03 23 	sts	0x2303, r24
    22be:	90 93 04 23 	sts	0x2304, r25
    22c2:	60 93 05 23 	sts	0x2305, r22
    22c6:	70 93 06 23 	sts	0x2306, r23
    22ca:	08 95       	ret

000022cc <udd_ep_alloc>:
    22cc:	e8 2f       	mov	r30, r24
    22ce:	ef 70       	andi	r30, 0x0F	; 15
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	99 27       	eor	r25, r25
    22d8:	87 fd       	sbrc	r24, 7
    22da:	90 95       	com	r25
    22dc:	88 27       	eor	r24, r24
    22de:	99 0f       	add	r25, r25
    22e0:	88 1f       	adc	r24, r24
    22e2:	99 27       	eor	r25, r25
    22e4:	e8 0f       	add	r30, r24
    22e6:	f9 1f       	adc	r31, r25
    22e8:	ee 0f       	add	r30, r30
    22ea:	ff 1f       	adc	r31, r31
    22ec:	ee 0f       	add	r30, r30
    22ee:	ff 1f       	adc	r31, r31
    22f0:	ee 0f       	add	r30, r30
    22f2:	ff 1f       	adc	r31, r31
    22f4:	ec 54       	subi	r30, 0x4C	; 76
    22f6:	fd 4d       	sbci	r31, 0xDD	; 221
    22f8:	81 81       	ldd	r24, Z+1	; 0x01
    22fa:	80 7c       	andi	r24, 0xC0	; 192
    22fc:	09 f0       	breq	.+2      	; 0x2300 <udd_ep_alloc+0x34>
    22fe:	43 c0       	rjmp	.+134    	; 0x2386 <udd_ep_alloc+0xba>
    2300:	63 70       	andi	r22, 0x03	; 3
    2302:	61 30       	cpi	r22, 0x01	; 1
    2304:	29 f0       	breq	.+10     	; 0x2310 <udd_ep_alloc+0x44>
    2306:	10 f4       	brcc	.+4      	; 0x230c <udd_ep_alloc+0x40>
    2308:	80 e4       	ldi	r24, 0x40	; 64
    230a:	03 c0       	rjmp	.+6      	; 0x2312 <udd_ep_alloc+0x46>
    230c:	80 e8       	ldi	r24, 0x80	; 128
    230e:	01 c0       	rjmp	.+2      	; 0x2312 <udd_ep_alloc+0x46>
    2310:	80 ec       	ldi	r24, 0xC0	; 192
    2312:	40 38       	cpi	r20, 0x80	; 128
    2314:	51 05       	cpc	r21, r1
    2316:	e1 f0       	breq	.+56     	; 0x2350 <udd_ep_alloc+0x84>
    2318:	50 f4       	brcc	.+20     	; 0x232e <udd_ep_alloc+0x62>
    231a:	40 32       	cpi	r20, 0x20	; 32
    231c:	51 05       	cpc	r21, r1
    231e:	a1 f0       	breq	.+40     	; 0x2348 <udd_ep_alloc+0x7c>
    2320:	40 34       	cpi	r20, 0x40	; 64
    2322:	51 05       	cpc	r21, r1
    2324:	99 f0       	breq	.+38     	; 0x234c <udd_ep_alloc+0x80>
    2326:	40 31       	cpi	r20, 0x10	; 16
    2328:	51 05       	cpc	r21, r1
    232a:	61 f4       	brne	.+24     	; 0x2344 <udd_ep_alloc+0x78>
    232c:	19 c0       	rjmp	.+50     	; 0x2360 <udd_ep_alloc+0x94>
    232e:	41 15       	cp	r20, r1
    2330:	92 e0       	ldi	r25, 0x02	; 2
    2332:	59 07       	cpc	r21, r25
    2334:	89 f0       	breq	.+34     	; 0x2358 <udd_ep_alloc+0x8c>
    2336:	4f 3f       	cpi	r20, 0xFF	; 255
    2338:	93 e0       	ldi	r25, 0x03	; 3
    233a:	59 07       	cpc	r21, r25
    233c:	79 f0       	breq	.+30     	; 0x235c <udd_ep_alloc+0x90>
    233e:	41 15       	cp	r20, r1
    2340:	51 40       	sbci	r21, 0x01	; 1
    2342:	41 f0       	breq	.+16     	; 0x2354 <udd_ep_alloc+0x88>
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	0d c0       	rjmp	.+26     	; 0x2362 <udd_ep_alloc+0x96>
    2348:	22 e0       	ldi	r18, 0x02	; 2
    234a:	0b c0       	rjmp	.+22     	; 0x2362 <udd_ep_alloc+0x96>
    234c:	23 e0       	ldi	r18, 0x03	; 3
    234e:	09 c0       	rjmp	.+18     	; 0x2362 <udd_ep_alloc+0x96>
    2350:	24 e0       	ldi	r18, 0x04	; 4
    2352:	07 c0       	rjmp	.+14     	; 0x2362 <udd_ep_alloc+0x96>
    2354:	25 e0       	ldi	r18, 0x05	; 5
    2356:	05 c0       	rjmp	.+10     	; 0x2362 <udd_ep_alloc+0x96>
    2358:	26 e0       	ldi	r18, 0x06	; 6
    235a:	03 c0       	rjmp	.+6      	; 0x2362 <udd_ep_alloc+0x96>
    235c:	27 e0       	ldi	r18, 0x07	; 7
    235e:	01 c0       	rjmp	.+2      	; 0x2362 <udd_ep_alloc+0x96>
    2360:	21 e0       	ldi	r18, 0x01	; 1
    2362:	11 82       	std	Z+1, r1	; 0x01
    2364:	96 e0       	ldi	r25, 0x06	; 6
    2366:	90 83       	st	Z, r25
    2368:	82 2b       	or	r24, r18
    236a:	81 83       	std	Z+1, r24	; 0x01
    236c:	81 81       	ldd	r24, Z+1	; 0x01
    236e:	80 7c       	andi	r24, 0xC0	; 192
    2370:	80 3c       	cpi	r24, 0xC0	; 192
    2372:	21 f4       	brne	.+8      	; 0x237c <udd_ep_alloc+0xb0>
    2374:	81 81       	ldd	r24, Z+1	; 0x01
    2376:	87 70       	andi	r24, 0x07	; 7
    2378:	87 30       	cpi	r24, 0x07	; 7
    237a:	39 f0       	breq	.+14     	; 0x238a <udd_ep_alloc+0xbe>
    237c:	81 81       	ldd	r24, Z+1	; 0x01
    237e:	80 62       	ori	r24, 0x20	; 32
    2380:	81 83       	std	Z+1, r24	; 0x01
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	08 95       	ret
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	08 95       	ret
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	08 95       	ret

0000238e <udd_ep_is_halted>:
    238e:	e8 2f       	mov	r30, r24
    2390:	ef 70       	andi	r30, 0x0F	; 15
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	99 27       	eor	r25, r25
    239a:	87 fd       	sbrc	r24, 7
    239c:	90 95       	com	r25
    239e:	88 27       	eor	r24, r24
    23a0:	99 0f       	add	r25, r25
    23a2:	88 1f       	adc	r24, r24
    23a4:	99 27       	eor	r25, r25
    23a6:	e8 0f       	add	r30, r24
    23a8:	f9 1f       	adc	r31, r25
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	ec 54       	subi	r30, 0x4C	; 76
    23b8:	fd 4d       	sbci	r31, 0xDD	; 221
    23ba:	81 81       	ldd	r24, Z+1	; 0x01
    23bc:	82 fb       	bst	r24, 2
    23be:	88 27       	eor	r24, r24
    23c0:	80 f9       	bld	r24, 0
    23c2:	08 95       	ret

000023c4 <udd_ep_clear_halt>:
    23c4:	e8 2f       	mov	r30, r24
    23c6:	ef 70       	andi	r30, 0x0F	; 15
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	ee 0f       	add	r30, r30
    23cc:	ff 1f       	adc	r31, r31
    23ce:	28 2f       	mov	r18, r24
    23d0:	33 27       	eor	r19, r19
    23d2:	27 fd       	sbrc	r18, 7
    23d4:	30 95       	com	r19
    23d6:	22 27       	eor	r18, r18
    23d8:	33 0f       	add	r19, r19
    23da:	22 1f       	adc	r18, r18
    23dc:	33 27       	eor	r19, r19
    23de:	e2 0f       	add	r30, r18
    23e0:	f3 1f       	adc	r31, r19
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	ee 0f       	add	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	ee 0f       	add	r30, r30
    23ec:	ff 1f       	adc	r31, r31
    23ee:	ec 54       	subi	r30, 0x4C	; 76
    23f0:	fd 4d       	sbci	r31, 0xDD	; 221
    23f2:	91 81       	ldd	r25, Z+1	; 0x01
    23f4:	92 ff       	sbrs	r25, 2
    23f6:	0e c0       	rjmp	.+28     	; 0x2414 <udd_ep_clear_halt+0x50>
    23f8:	91 81       	ldd	r25, Z+1	; 0x01
    23fa:	9b 7f       	andi	r25, 0xFB	; 251
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	24 dd       	rcall	.-1464   	; 0x1e48 <udd_ep_get_job>
    2400:	fc 01       	movw	r30, r24
    2402:	80 81       	ld	r24, Z
    2404:	80 ff       	sbrs	r24, 0
    2406:	06 c0       	rjmp	.+12     	; 0x2414 <udd_ep_clear_halt+0x50>
    2408:	8e 7f       	andi	r24, 0xFE	; 254
    240a:	80 83       	st	Z, r24
    240c:	07 80       	ldd	r0, Z+7	; 0x07
    240e:	f0 85       	ldd	r31, Z+8	; 0x08
    2410:	e0 2d       	mov	r30, r0
    2412:	19 95       	eicall
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	08 95       	ret

00002418 <udd_ep_run>:
    2418:	7f 92       	push	r7
    241a:	8f 92       	push	r8
    241c:	9f 92       	push	r9
    241e:	af 92       	push	r10
    2420:	bf 92       	push	r11
    2422:	cf 92       	push	r12
    2424:	df 92       	push	r13
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	98 2e       	mov	r9, r24
    2434:	86 2e       	mov	r8, r22
    2436:	5a 01       	movw	r10, r20
    2438:	69 01       	movw	r12, r18
    243a:	06 dd       	rcall	.-1524   	; 0x1e48 <udd_ep_get_job>
    243c:	7c 01       	movw	r14, r24
    243e:	79 2c       	mov	r7, r9
    2440:	77 1c       	adc	r7, r7
    2442:	77 24       	eor	r7, r7
    2444:	77 1c       	adc	r7, r7
    2446:	c9 2d       	mov	r28, r9
    2448:	cf 70       	andi	r28, 0x0F	; 15
    244a:	d0 e0       	ldi	r29, 0x00	; 0
    244c:	cc 0f       	add	r28, r28
    244e:	dd 1f       	adc	r29, r29
    2450:	c7 0d       	add	r28, r7
    2452:	d1 1d       	adc	r29, r1
    2454:	cc 0f       	add	r28, r28
    2456:	dd 1f       	adc	r29, r29
    2458:	cc 0f       	add	r28, r28
    245a:	dd 1f       	adc	r29, r29
    245c:	cc 0f       	add	r28, r28
    245e:	dd 1f       	adc	r29, r29
    2460:	cc 54       	subi	r28, 0x4C	; 76
    2462:	dd 4d       	sbci	r29, 0xDD	; 221
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	80 7c       	andi	r24, 0xC0	; 192
    2468:	09 f4       	brne	.+2      	; 0x246c <udd_ep_run+0x54>
    246a:	4c c0       	rjmp	.+152    	; 0x2504 <udd_ep_run+0xec>
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	80 7c       	andi	r24, 0xC0	; 192
    2470:	80 3c       	cpi	r24, 0xC0	; 192
    2472:	19 f0       	breq	.+6      	; 0x247a <udd_ep_run+0x62>
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	82 fd       	sbrc	r24, 2
    2478:	47 c0       	rjmp	.+142    	; 0x2508 <udd_ep_run+0xf0>
    247a:	8f b7       	in	r24, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	f7 01       	movw	r30, r14
    2480:	90 81       	ld	r25, Z
    2482:	90 ff       	sbrs	r25, 0
    2484:	03 c0       	rjmp	.+6      	; 0x248c <udd_ep_run+0x74>
    2486:	8f bf       	out	0x3f, r24	; 63
    2488:	71 2c       	mov	r7, r1
    248a:	3f c0       	rjmp	.+126    	; 0x250a <udd_ep_run+0xf2>
    248c:	f7 01       	movw	r30, r14
    248e:	90 81       	ld	r25, Z
    2490:	91 60       	ori	r25, 0x01	; 1
    2492:	90 83       	st	Z, r25
    2494:	8f bf       	out	0x3f, r24	; 63
    2496:	f7 01       	movw	r30, r14
    2498:	a1 82       	std	Z+1, r10	; 0x01
    249a:	b2 82       	std	Z+2, r11	; 0x02
    249c:	c3 82       	std	Z+3, r12	; 0x03
    249e:	d4 82       	std	Z+4, r13	; 0x04
    24a0:	15 82       	std	Z+5, r1	; 0x05
    24a2:	16 82       	std	Z+6, r1	; 0x06
    24a4:	07 83       	std	Z+7, r16	; 0x07
    24a6:	10 87       	std	Z+8, r17	; 0x08
    24a8:	81 10       	cpse	r8, r1
    24aa:	06 c0       	rjmp	.+12     	; 0x24b8 <udd_ep_run+0xa0>
    24ac:	91 e0       	ldi	r25, 0x01	; 1
    24ae:	c1 14       	cp	r12, r1
    24b0:	d1 04       	cpc	r13, r1
    24b2:	19 f0       	breq	.+6      	; 0x24ba <udd_ep_run+0xa2>
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <udd_ep_run+0xa2>
    24b8:	91 e0       	ldi	r25, 0x01	; 1
    24ba:	f7 01       	movw	r30, r14
    24bc:	80 81       	ld	r24, Z
    24be:	90 fb       	bst	r25, 0
    24c0:	81 f9       	bld	r24, 1
    24c2:	8b 7f       	andi	r24, 0xFB	; 251
    24c4:	80 83       	st	Z, r24
    24c6:	77 20       	and	r7, r7
    24c8:	19 f0       	breq	.+6      	; 0x24d0 <udd_ep_run+0xb8>
    24ca:	1e 82       	std	Y+6, r1	; 0x06
    24cc:	1f 82       	std	Y+7, r1	; 0x07
    24ce:	15 c0       	rjmp	.+42     	; 0x24fa <udd_ep_run+0xe2>
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	80 7c       	andi	r24, 0xC0	; 192
    24d4:	80 3c       	cpi	r24, 0xC0	; 192
    24d6:	69 f4       	brne	.+26     	; 0x24f2 <udd_ep_run+0xda>
    24d8:	ce 01       	movw	r24, r28
    24da:	91 dc       	rcall	.-1758   	; 0x1dfe <udd_ep_get_size>
    24dc:	bc 01       	movw	r22, r24
    24de:	c6 01       	movw	r24, r12
    24e0:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__udivmodhi4>
    24e4:	89 2b       	or	r24, r25
    24e6:	29 f0       	breq	.+10     	; 0x24f2 <udd_ep_run+0xda>
    24e8:	f7 01       	movw	r30, r14
    24ea:	80 81       	ld	r24, Z
    24ec:	8e 7f       	andi	r24, 0xFE	; 254
    24ee:	80 83       	st	Z, r24
    24f0:	0c c0       	rjmp	.+24     	; 0x250a <udd_ep_run+0xf2>
    24f2:	1a 82       	std	Y+2, r1	; 0x02
    24f4:	1b 82       	std	Y+3, r1	; 0x03
    24f6:	1e 82       	std	Y+6, r1	; 0x06
    24f8:	1f 82       	std	Y+7, r1	; 0x07
    24fa:	89 2d       	mov	r24, r9
    24fc:	2f dd       	rcall	.-1442   	; 0x1f5c <udd_ep_trans_complet>
    24fe:	77 24       	eor	r7, r7
    2500:	73 94       	inc	r7
    2502:	03 c0       	rjmp	.+6      	; 0x250a <udd_ep_run+0xf2>
    2504:	71 2c       	mov	r7, r1
    2506:	01 c0       	rjmp	.+2      	; 0x250a <udd_ep_run+0xf2>
    2508:	71 2c       	mov	r7, r1
    250a:	87 2d       	mov	r24, r7
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	ff 90       	pop	r15
    2516:	ef 90       	pop	r14
    2518:	df 90       	pop	r13
    251a:	cf 90       	pop	r12
    251c:	bf 90       	pop	r11
    251e:	af 90       	pop	r10
    2520:	9f 90       	pop	r9
    2522:	8f 90       	pop	r8
    2524:	7f 90       	pop	r7
    2526:	08 95       	ret

00002528 <udd_ep_abort>:
    2528:	ff 92       	push	r15
    252a:	0f 93       	push	r16
    252c:	1f 93       	push	r17
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	18 2f       	mov	r17, r24
    2534:	f8 2e       	mov	r15, r24
    2536:	ff 1c       	adc	r15, r15
    2538:	ff 24       	eor	r15, r15
    253a:	ff 1c       	adc	r15, r15
    253c:	c8 2f       	mov	r28, r24
    253e:	cf 70       	andi	r28, 0x0F	; 15
    2540:	d0 e0       	ldi	r29, 0x00	; 0
    2542:	cc 0f       	add	r28, r28
    2544:	dd 1f       	adc	r29, r29
    2546:	cf 0d       	add	r28, r15
    2548:	d1 1d       	adc	r29, r1
    254a:	cc 0f       	add	r28, r28
    254c:	dd 1f       	adc	r29, r29
    254e:	cc 0f       	add	r28, r28
    2550:	dd 1f       	adc	r29, r29
    2552:	cc 0f       	add	r28, r28
    2554:	dd 1f       	adc	r29, r29
    2556:	cc 54       	subi	r28, 0x4C	; 76
    2558:	dd 4d       	sbci	r29, 0xDD	; 221
    255a:	76 dc       	rcall	.-1812   	; 0x1e48 <udd_ep_get_job>
    255c:	dc 01       	movw	r26, r24
    255e:	fe 01       	movw	r30, r28
    2560:	02 e0       	ldi	r16, 0x02	; 2
    2562:	05 93       	las	Z, r16
    2564:	8c 91       	ld	r24, X
    2566:	80 ff       	sbrs	r24, 0
    2568:	12 c0       	rjmp	.+36     	; 0x258e <udd_ep_abort+0x66>
    256a:	8e 7f       	andi	r24, 0xFE	; 254
    256c:	8c 93       	st	X, r24
    256e:	17 96       	adiw	r26, 0x07	; 7
    2570:	ed 91       	ld	r30, X+
    2572:	fc 91       	ld	r31, X
    2574:	18 97       	sbiw	r26, 0x08	; 8
    2576:	30 97       	sbiw	r30, 0x00	; 0
    2578:	51 f0       	breq	.+20     	; 0x258e <udd_ep_abort+0x66>
    257a:	ff 20       	and	r15, r15
    257c:	19 f0       	breq	.+6      	; 0x2584 <udd_ep_abort+0x5c>
    257e:	6e 81       	ldd	r22, Y+6	; 0x06
    2580:	7f 81       	ldd	r23, Y+7	; 0x07
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <udd_ep_abort+0x60>
    2584:	6a 81       	ldd	r22, Y+2	; 0x02
    2586:	7b 81       	ldd	r23, Y+3	; 0x03
    2588:	41 2f       	mov	r20, r17
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	19 95       	eicall
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	ff 90       	pop	r15
    2598:	08 95       	ret

0000259a <udd_ep_free>:
    259a:	cf 93       	push	r28
    259c:	c8 2f       	mov	r28, r24
    259e:	c4 df       	rcall	.-120    	; 0x2528 <udd_ep_abort>
    25a0:	ec 2f       	mov	r30, r28
    25a2:	ef 70       	andi	r30, 0x0F	; 15
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	ee 0f       	add	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	8c 2f       	mov	r24, r28
    25ac:	99 27       	eor	r25, r25
    25ae:	87 fd       	sbrc	r24, 7
    25b0:	90 95       	com	r25
    25b2:	88 27       	eor	r24, r24
    25b4:	99 0f       	add	r25, r25
    25b6:	88 1f       	adc	r24, r24
    25b8:	99 27       	eor	r25, r25
    25ba:	e8 0f       	add	r30, r24
    25bc:	f9 1f       	adc	r31, r25
    25be:	ee 0f       	add	r30, r30
    25c0:	ff 1f       	adc	r31, r31
    25c2:	ee 0f       	add	r30, r30
    25c4:	ff 1f       	adc	r31, r31
    25c6:	ee 0f       	add	r30, r30
    25c8:	ff 1f       	adc	r31, r31
    25ca:	ec 54       	subi	r30, 0x4C	; 76
    25cc:	fd 4d       	sbci	r31, 0xDD	; 221
    25ce:	11 82       	std	Z+1, r1	; 0x01
    25d0:	cf 91       	pop	r28
    25d2:	08 95       	ret

000025d4 <udd_ep_set_halt>:
    25d4:	0f 93       	push	r16
    25d6:	e8 2f       	mov	r30, r24
    25d8:	ef 70       	andi	r30, 0x0F	; 15
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	ee 0f       	add	r30, r30
    25de:	ff 1f       	adc	r31, r31
    25e0:	28 2f       	mov	r18, r24
    25e2:	33 27       	eor	r19, r19
    25e4:	27 fd       	sbrc	r18, 7
    25e6:	30 95       	com	r19
    25e8:	22 27       	eor	r18, r18
    25ea:	33 0f       	add	r19, r19
    25ec:	22 1f       	adc	r18, r18
    25ee:	33 27       	eor	r19, r19
    25f0:	e2 0f       	add	r30, r18
    25f2:	f3 1f       	adc	r31, r19
    25f4:	ee 0f       	add	r30, r30
    25f6:	ff 1f       	adc	r31, r31
    25f8:	ee 0f       	add	r30, r30
    25fa:	ff 1f       	adc	r31, r31
    25fc:	ee 0f       	add	r30, r30
    25fe:	ff 1f       	adc	r31, r31
    2600:	ec 54       	subi	r30, 0x4C	; 76
    2602:	fd 4d       	sbci	r31, 0xDD	; 221
    2604:	91 81       	ldd	r25, Z+1	; 0x01
    2606:	94 60       	ori	r25, 0x04	; 4
    2608:	91 83       	std	Z+1, r25	; 0x01
    260a:	01 e0       	ldi	r16, 0x01	; 1
    260c:	06 93       	lac	Z, r16
    260e:	8c df       	rcall	.-232    	; 0x2528 <udd_ep_abort>
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	0f 91       	pop	r16
    2614:	08 95       	ret

00002616 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2616:	1f 92       	push	r1
    2618:	0f 92       	push	r0
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	0f 92       	push	r0
    261e:	11 24       	eor	r1, r1
    2620:	0b b6       	in	r0, 0x3b	; 59
    2622:	0f 92       	push	r0
    2624:	0f 93       	push	r16
    2626:	2f 93       	push	r18
    2628:	3f 93       	push	r19
    262a:	4f 93       	push	r20
    262c:	5f 93       	push	r21
    262e:	6f 93       	push	r22
    2630:	7f 93       	push	r23
    2632:	8f 93       	push	r24
    2634:	9f 93       	push	r25
    2636:	af 93       	push	r26
    2638:	bf 93       	push	r27
    263a:	ef 93       	push	r30
    263c:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    263e:	80 91 cb 04 	lds	r24, 0x04CB
    2642:	88 23       	and	r24, r24
    2644:	34 f4       	brge	.+12     	; 0x2652 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2646:	80 e8       	ldi	r24, 0x80	; 128
    2648:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    264c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2650:	88 c0       	rjmp	.+272    	; 0x2762 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2652:	80 91 cb 04 	lds	r24, 0x04CB
    2656:	82 ff       	sbrs	r24, 2
    2658:	20 c0       	rjmp	.+64     	; 0x269a <__vector_125+0x84>
		udd_ack_underflow_event();
    265a:	84 e0       	ldi	r24, 0x04	; 4
    265c:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    2660:	80 91 bc 22 	lds	r24, 0x22BC
    2664:	86 ff       	sbrs	r24, 6
    2666:	7d c0       	rjmp	.+250    	; 0x2762 <__vector_125+0x14c>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2668:	80 91 cc 04 	lds	r24, 0x04CC
    266c:	81 fd       	sbrc	r24, 1
    266e:	79 c0       	rjmp	.+242    	; 0x2762 <__vector_125+0x14c>
    2670:	06 dc       	rcall	.-2036   	; 0x1e7e <udd_ctrl_interrupt_tc_setup>
    2672:	81 11       	cpse	r24, r1
    2674:	76 c0       	rjmp	.+236    	; 0x2762 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2676:	80 91 a7 22 	lds	r24, 0x22A7
    267a:	81 30       	cpi	r24, 0x01	; 1
    267c:	11 f4       	brne	.+4      	; 0x2682 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    267e:	3b db       	rcall	.-2442   	; 0x1cf6 <udd_ctrl_send_zlp_in>
    2680:	70 c0       	rjmp	.+224    	; 0x2762 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2682:	84 30       	cpi	r24, 0x04	; 4
    2684:	09 f0       	breq	.+2      	; 0x2688 <__vector_125+0x72>
    2686:	6d c0       	rjmp	.+218    	; 0x2762 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2688:	ed eb       	ldi	r30, 0xBD	; 189
    268a:	f2 e2       	ldi	r31, 0x22	; 34
    268c:	04 e0       	ldi	r16, 0x04	; 4
    268e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2690:	e5 eb       	ldi	r30, 0xB5	; 181
    2692:	f2 e2       	ldi	r31, 0x22	; 34
    2694:	04 e0       	ldi	r16, 0x04	; 4
    2696:	05 93       	las	Z, r16
    2698:	64 c0       	rjmp	.+200    	; 0x2762 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    269a:	80 91 cb 04 	lds	r24, 0x04CB
    269e:	81 ff       	sbrs	r24, 1
    26a0:	5b c0       	rjmp	.+182    	; 0x2758 <__vector_125+0x142>
		udd_ack_overflow_event();
    26a2:	82 e0       	ldi	r24, 0x02	; 2
    26a4:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    26a8:	80 91 b4 22 	lds	r24, 0x22B4
    26ac:	86 ff       	sbrs	r24, 6
    26ae:	59 c0       	rjmp	.+178    	; 0x2762 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    26b0:	80 91 cc 04 	lds	r24, 0x04CC
    26b4:	81 fd       	sbrc	r24, 1
    26b6:	55 c0       	rjmp	.+170    	; 0x2762 <__vector_125+0x14c>
    26b8:	e2 db       	rcall	.-2108   	; 0x1e7e <udd_ctrl_interrupt_tc_setup>
    26ba:	81 11       	cpse	r24, r1
    26bc:	52 c0       	rjmp	.+164    	; 0x2762 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    26be:	80 91 a7 22 	lds	r24, 0x22A7
    26c2:	82 30       	cpi	r24, 0x02	; 2
    26c4:	41 f4       	brne	.+16     	; 0x26d6 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    26c6:	84 e0       	ldi	r24, 0x04	; 4
    26c8:	80 93 a7 22 	sts	0x22A7, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    26cc:	e4 eb       	ldi	r30, 0xB4	; 180
    26ce:	f2 e2       	ldi	r31, 0x22	; 34
    26d0:	02 e0       	ldi	r16, 0x02	; 2
    26d2:	06 93       	lac	Z, r16
    26d4:	46 c0       	rjmp	.+140    	; 0x2762 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    26d6:	83 30       	cpi	r24, 0x03	; 3
    26d8:	09 f0       	breq	.+2      	; 0x26dc <__vector_125+0xc6>
    26da:	43 c0       	rjmp	.+134    	; 0x2762 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    26dc:	ed eb       	ldi	r30, 0xBD	; 189
    26de:	f2 e2       	ldi	r31, 0x22	; 34
    26e0:	04 e0       	ldi	r16, 0x04	; 4
    26e2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    26e4:	e5 eb       	ldi	r30, 0xB5	; 181
    26e6:	f2 e2       	ldi	r31, 0x22	; 34
    26e8:	04 e0       	ldi	r16, 0x04	; 4
    26ea:	05 93       	las	Z, r16
    26ec:	3a c0       	rjmp	.+116    	; 0x2762 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    26ee:	80 e1       	ldi	r24, 0x10	; 16
    26f0:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	18 df       	rcall	.-464    	; 0x2528 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    26f8:	81 e8       	ldi	r24, 0x81	; 129
    26fa:	16 df       	rcall	.-468    	; 0x2528 <udd_ep_abort>
		}
#endif
		udc_reset();
    26fc:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2700:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2704:	e5 eb       	ldi	r30, 0xB5	; 181
    2706:	f2 e2       	ldi	r31, 0x22	; 34
    2708:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    270a:	96 e0       	ldi	r25, 0x06	; 6
    270c:	90 93 b4 22 	sts	0x22B4, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2710:	80 e4       	ldi	r24, 0x40	; 64
    2712:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2714:	ed eb       	ldi	r30, 0xBD	; 189
    2716:	f2 e2       	ldi	r31, 0x22	; 34
    2718:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    271a:	90 93 bc 22 	sts	0x22BC, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    271e:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2720:	8b e9       	ldi	r24, 0x9B	; 155
    2722:	92 e2       	ldi	r25, 0x22	; 34
    2724:	80 93 b8 22 	sts	0x22B8, r24
    2728:	90 93 b9 22 	sts	0x22B9, r25
		// Reset endpoint control management
		udd_ctrl_init();
    272c:	ab da       	rcall	.-2730   	; 0x1c84 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    272e:	19 c0       	rjmp	.+50     	; 0x2762 <__vector_125+0x14c>
	}

	if (udd_is_suspend_event()) {
    2730:	80 91 cb 04 	lds	r24, 0x04CB
    2734:	86 ff       	sbrs	r24, 6
    2736:	06 c0       	rjmp	.+12     	; 0x2744 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2738:	80 e4       	ldi	r24, 0x40	; 64
    273a:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	82 da       	rcall	.-2812   	; 0x1c46 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2742:	0f c0       	rjmp	.+30     	; 0x2762 <__vector_125+0x14c>
	}

	if (udd_is_resume_event()) {
    2744:	80 91 cb 04 	lds	r24, 0x04CB
    2748:	85 ff       	sbrs	r24, 5
    274a:	0b c0       	rjmp	.+22     	; 0x2762 <__vector_125+0x14c>
		udd_ack_resume_event();
    274c:	80 e2       	ldi	r24, 0x20	; 32
    274e:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	78 da       	rcall	.-2832   	; 0x1c46 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2756:	05 c0       	rjmp	.+10     	; 0x2762 <__vector_125+0x14c>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2758:	80 91 cb 04 	lds	r24, 0x04CB
    275c:	84 ff       	sbrs	r24, 4
    275e:	e8 cf       	rjmp	.-48     	; 0x2730 <__vector_125+0x11a>
    2760:	c6 cf       	rjmp	.-116    	; 0x26ee <__vector_125+0xd8>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2762:	ff 91       	pop	r31
    2764:	ef 91       	pop	r30
    2766:	bf 91       	pop	r27
    2768:	af 91       	pop	r26
    276a:	9f 91       	pop	r25
    276c:	8f 91       	pop	r24
    276e:	7f 91       	pop	r23
    2770:	6f 91       	pop	r22
    2772:	5f 91       	pop	r21
    2774:	4f 91       	pop	r20
    2776:	3f 91       	pop	r19
    2778:	2f 91       	pop	r18
    277a:	0f 91       	pop	r16
    277c:	0f 90       	pop	r0
    277e:	0b be       	out	0x3b, r0	; 59
    2780:	0f 90       	pop	r0
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	0f 90       	pop	r0
    2786:	1f 90       	pop	r1
    2788:	18 95       	reti

0000278a <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    278a:	1f 92       	push	r1
    278c:	0f 92       	push	r0
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	0f 92       	push	r0
    2792:	11 24       	eor	r1, r1
    2794:	0b b6       	in	r0, 0x3b	; 59
    2796:	0f 92       	push	r0
    2798:	0f 93       	push	r16
    279a:	1f 93       	push	r17
    279c:	2f 93       	push	r18
    279e:	3f 93       	push	r19
    27a0:	4f 93       	push	r20
    27a2:	5f 93       	push	r21
    27a4:	6f 93       	push	r22
    27a6:	7f 93       	push	r23
    27a8:	8f 93       	push	r24
    27aa:	9f 93       	push	r25
    27ac:	af 93       	push	r26
    27ae:	bf 93       	push	r27
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	ef 93       	push	r30
    27b6:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    27b8:	80 91 cc 04 	lds	r24, 0x04CC
    27bc:	81 fd       	sbrc	r24, 1
    27be:	03 c0       	rjmp	.+6      	; 0x27c6 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    27c0:	5e db       	rcall	.-2372   	; 0x1e7e <udd_ctrl_interrupt_tc_setup>
    27c2:	81 11       	cpse	r24, r1
    27c4:	b8 c0       	rjmp	.+368    	; 0x2936 <__vector_126+0x1ac>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    27c6:	82 e0       	ldi	r24, 0x02	; 2
    27c8:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    27cc:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    27d0:	81 95       	neg	r24
    27d2:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    27d4:	e4 eb       	ldi	r30, 0xB4	; 180
    27d6:	f2 e2       	ldi	r31, 0x22	; 34
    27d8:	e8 1b       	sub	r30, r24
    27da:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    27dc:	20 81       	ld	r18, Z
    27de:	31 81       	ldd	r19, Z+1	; 0x01
    27e0:	24 5b       	subi	r18, 0xB4	; 180
    27e2:	32 42       	sbci	r19, 0x22	; 34
    27e4:	36 95       	lsr	r19
    27e6:	27 95       	ror	r18
    27e8:	36 95       	lsr	r19
    27ea:	27 95       	ror	r18
    27ec:	36 95       	lsr	r19
    27ee:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    27f0:	82 2f       	mov	r24, r18
    27f2:	86 95       	lsr	r24
    27f4:	20 ff       	sbrs	r18, 0
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <__vector_126+0x72>
    27f8:	90 e8       	ldi	r25, 0x80	; 128
    27fa:	01 c0       	rjmp	.+2      	; 0x27fe <__vector_126+0x74>
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2800:	e8 2f       	mov	r30, r24
    2802:	ef 70       	andi	r30, 0x0F	; 15
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	ee 0f       	add	r30, r30
    2808:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    280a:	28 2f       	mov	r18, r24
    280c:	33 27       	eor	r19, r19
    280e:	27 fd       	sbrc	r18, 7
    2810:	30 95       	com	r19
    2812:	22 27       	eor	r18, r18
    2814:	33 0f       	add	r19, r19
    2816:	22 1f       	adc	r18, r18
    2818:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    281a:	e2 0f       	add	r30, r18
    281c:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    281e:	ee 0f       	add	r30, r30
    2820:	ff 1f       	adc	r31, r31
    2822:	ee 0f       	add	r30, r30
    2824:	ff 1f       	adc	r31, r31
    2826:	ee 0f       	add	r30, r30
    2828:	ff 1f       	adc	r31, r31
    282a:	ec 54       	subi	r30, 0x4C	; 76
    282c:	fd 4d       	sbci	r31, 0xDD	; 221
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    282e:	90 81       	ld	r25, Z
    2830:	95 ff       	sbrs	r25, 5
    2832:	81 c0       	rjmp	.+258    	; 0x2936 <__vector_126+0x1ac>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2834:	00 e2       	ldi	r16, 0x20	; 32
    2836:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2838:	81 11       	cpse	r24, r1
    283a:	78 c0       	rjmp	.+240    	; 0x292c <__vector_126+0x1a2>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    283c:	80 91 a7 22 	lds	r24, 0x22A7
    2840:	84 30       	cpi	r24, 0x04	; 4
    2842:	19 f4       	brne	.+6      	; 0x284a <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2844:	66 da       	rcall	.-2868   	; 0x1d12 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2846:	1e da       	rcall	.-3012   	; 0x1c84 <udd_ctrl_init>
    2848:	76 c0       	rjmp	.+236    	; 0x2936 <__vector_126+0x1ac>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    284a:	c0 91 b6 22 	lds	r28, 0x22B6
    284e:	d0 91 b7 22 	lds	r29, 0x22B7

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2852:	80 91 05 23 	lds	r24, 0x2305
    2856:	90 91 06 23 	lds	r25, 0x2306
    285a:	00 91 a3 22 	lds	r16, 0x22A3
    285e:	10 91 a4 22 	lds	r17, 0x22A4
    2862:	98 01       	movw	r18, r16
    2864:	2c 0f       	add	r18, r28
    2866:	3d 1f       	adc	r19, r29
    2868:	82 17       	cp	r24, r18
    286a:	93 07       	cpc	r25, r19
    286c:	18 f4       	brcc	.+6      	; 0x2874 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    286e:	ec 01       	movw	r28, r24
    2870:	c0 1b       	sub	r28, r16
    2872:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2874:	80 91 03 23 	lds	r24, 0x2303
    2878:	90 91 04 23 	lds	r25, 0x2304
    287c:	ae 01       	movw	r20, r28
    287e:	6b e9       	ldi	r22, 0x9B	; 155
    2880:	72 e2       	ldi	r23, 0x22	; 34
    2882:	80 0f       	add	r24, r16
    2884:	91 1f       	adc	r25, r17
    2886:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    288a:	0c 0f       	add	r16, r28
    288c:	1d 1f       	adc	r17, r29
    288e:	00 93 a3 22 	sts	0x22A3, r16
    2892:	10 93 a4 22 	sts	0x22A4, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2896:	28 97       	sbiw	r28, 0x08	; 8
    2898:	69 f4       	brne	.+26     	; 0x28b4 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    289a:	80 91 a5 22 	lds	r24, 0x22A5
    289e:	90 91 a6 22 	lds	r25, 0x22A6
    28a2:	80 0f       	add	r24, r16
    28a4:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    28a6:	20 91 01 23 	lds	r18, 0x2301
    28aa:	30 91 02 23 	lds	r19, 0x2302
    28ae:	82 17       	cp	r24, r18
    28b0:	93 07       	cpc	r25, r19
    28b2:	88 f0       	brcs	.+34     	; 0x28d6 <__vector_126+0x14c>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    28b4:	00 93 05 23 	sts	0x2305, r16
    28b8:	10 93 06 23 	sts	0x2306, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    28bc:	e0 91 09 23 	lds	r30, 0x2309
    28c0:	f0 91 0a 23 	lds	r31, 0x230A
    28c4:	30 97       	sbiw	r30, 0x00	; 0
    28c6:	29 f0       	breq	.+10     	; 0x28d2 <__vector_126+0x148>
			if (!udd_g_ctrlreq.over_under_run()) {
    28c8:	19 95       	eicall
    28ca:	81 11       	cpse	r24, r1
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <__vector_126+0x148>
				// Stall ZLP
				udd_ctrl_stall_data();
    28ce:	05 da       	rcall	.-3062   	; 0x1cda <udd_ctrl_stall_data>
    28d0:	32 c0       	rjmp	.+100    	; 0x2936 <__vector_126+0x1ac>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    28d2:	11 da       	rcall	.-3038   	; 0x1cf6 <udd_ctrl_send_zlp_in>
    28d4:	30 c0       	rjmp	.+96     	; 0x2936 <__vector_126+0x1ac>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    28d6:	80 91 05 23 	lds	r24, 0x2305
    28da:	90 91 06 23 	lds	r25, 0x2306
    28de:	08 17       	cp	r16, r24
    28e0:	19 07       	cpc	r17, r25
    28e2:	f9 f4       	brne	.+62     	; 0x2922 <__vector_126+0x198>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    28e4:	e0 91 09 23 	lds	r30, 0x2309
    28e8:	f0 91 0a 23 	lds	r31, 0x230A
    28ec:	30 97       	sbiw	r30, 0x00	; 0
    28ee:	11 f4       	brne	.+4      	; 0x28f4 <__vector_126+0x16a>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    28f0:	f4 d9       	rcall	.-3096   	; 0x1cda <udd_ctrl_stall_data>
    28f2:	21 c0       	rjmp	.+66     	; 0x2936 <__vector_126+0x1ac>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    28f4:	19 95       	eicall
    28f6:	81 11       	cpse	r24, r1
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <__vector_126+0x174>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    28fa:	ef d9       	rcall	.-3106   	; 0x1cda <udd_ctrl_stall_data>
    28fc:	1c c0       	rjmp	.+56     	; 0x2936 <__vector_126+0x1ac>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    28fe:	20 91 a5 22 	lds	r18, 0x22A5
    2902:	30 91 a6 22 	lds	r19, 0x22A6
    2906:	80 91 a3 22 	lds	r24, 0x22A3
    290a:	90 91 a4 22 	lds	r25, 0x22A4
    290e:	82 0f       	add	r24, r18
    2910:	93 1f       	adc	r25, r19
    2912:	80 93 a5 22 	sts	0x22A5, r24
    2916:	90 93 a6 22 	sts	0x22A6, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    291a:	10 92 a3 22 	sts	0x22A3, r1
    291e:	10 92 a4 22 	sts	0x22A4, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2922:	e4 eb       	ldi	r30, 0xB4	; 180
    2924:	f2 e2       	ldi	r31, 0x22	; 34
    2926:	02 e0       	ldi	r16, 0x02	; 2
    2928:	06 93       	lac	Z, r16
    292a:	05 c0       	rjmp	.+10     	; 0x2936 <__vector_126+0x1ac>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    292c:	80 38       	cpi	r24, 0x80	; 128
    292e:	11 f4       	brne	.+4      	; 0x2934 <__vector_126+0x1aa>
		udd_ctrl_in_sent();
    2930:	f8 d9       	rcall	.-3088   	; 0x1d22 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <__vector_126+0x1ac>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2934:	13 db       	rcall	.-2522   	; 0x1f5c <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2936:	ff 91       	pop	r31
    2938:	ef 91       	pop	r30
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	bf 91       	pop	r27
    2940:	af 91       	pop	r26
    2942:	9f 91       	pop	r25
    2944:	8f 91       	pop	r24
    2946:	7f 91       	pop	r23
    2948:	6f 91       	pop	r22
    294a:	5f 91       	pop	r21
    294c:	4f 91       	pop	r20
    294e:	3f 91       	pop	r19
    2950:	2f 91       	pop	r18
    2952:	1f 91       	pop	r17
    2954:	0f 91       	pop	r16
    2956:	0f 90       	pop	r0
    2958:	0b be       	out	0x3b, r0	; 59
    295a:	0f 90       	pop	r0
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	0f 90       	pop	r0
    2960:	1f 90       	pop	r1
    2962:	18 95       	reti

00002964 <spi_dpot_init_pins>:
	uint8_t hi_lo[] = { (uint8_t)(data>> 8), (uint8_t) data};
	dPotSelect();
	spi_write_packet(&SPI_DPOT_MDL, hi_lo, 2);
	while(!spi_is_tx_ok(&SPI_DPOT_MDL));
	dPotDeselect();
}
    2964:	43 e0       	ldi	r20, 0x03	; 3
    2966:	50 e0       	ldi	r21, 0x00	; 0
    2968:	60 e1       	ldi	r22, 0x10	; 16
    296a:	80 e4       	ldi	r24, 0x40	; 64
    296c:	96 e0       	ldi	r25, 0x06	; 6
    296e:	0e 94 98 07 	call	0xf30	; 0xf30 <ioport_configure_port_pin>
    2972:	43 e0       	ldi	r20, 0x03	; 3
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	60 e2       	ldi	r22, 0x20	; 32
    2978:	80 e4       	ldi	r24, 0x40	; 64
    297a:	96 e0       	ldi	r25, 0x06	; 6
    297c:	0e 94 98 07 	call	0xf30	; 0xf30 <ioport_configure_port_pin>
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	50 e0       	ldi	r21, 0x00	; 0
    2984:	60 e4       	ldi	r22, 0x40	; 64
    2986:	80 e4       	ldi	r24, 0x40	; 64
    2988:	96 e0       	ldi	r25, 0x06	; 6
    298a:	0e 94 98 07 	call	0xf30	; 0xf30 <ioport_configure_port_pin>
    298e:	43 e0       	ldi	r20, 0x03	; 3
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	60 e8       	ldi	r22, 0x80	; 128
    2994:	80 e4       	ldi	r24, 0x40	; 64
    2996:	96 e0       	ldi	r25, 0x06	; 6
    2998:	0c 94 98 07 	jmp	0xf30	; 0xf30 <ioport_configure_port_pin>
    299c:	08 95       	ret

0000299e <spi_dpot_init_module>:
    299e:	cf 92       	push	r12
    29a0:	df 92       	push	r13
    29a2:	ef 92       	push	r14
    29a4:	ff 92       	push	r15
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	80 ec       	ldi	r24, 0xC0	; 192
    29ac:	98 e0       	ldi	r25, 0x08	; 8
    29ae:	0e 94 c0 07 	call	0xf80	; 0xf80 <spi_master_init>
    29b2:	c1 2c       	mov	r12, r1
    29b4:	d1 2c       	mov	r13, r1
    29b6:	76 01       	movw	r14, r12
    29b8:	00 e8       	ldi	r16, 0x80	; 128
    29ba:	14 e8       	ldi	r17, 0x84	; 132
    29bc:	2e e1       	ldi	r18, 0x1E	; 30
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	41 e0       	ldi	r20, 0x01	; 1
    29c2:	66 e9       	ldi	r22, 0x96	; 150
    29c4:	70 e2       	ldi	r23, 0x20	; 32
    29c6:	80 ec       	ldi	r24, 0xC0	; 192
    29c8:	98 e0       	ldi	r25, 0x08	; 8
    29ca:	0e 94 d7 07 	call	0xfae	; 0xfae <spi_master_setup_device>
    29ce:	e0 ec       	ldi	r30, 0xC0	; 192
    29d0:	f8 e0       	ldi	r31, 0x08	; 8
    29d2:	80 81       	ld	r24, Z
    29d4:	80 64       	ori	r24, 0x40	; 64
    29d6:	80 83       	st	Z, r24
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	ff 90       	pop	r15
    29de:	ef 90       	pop	r14
    29e0:	df 90       	pop	r13
    29e2:	cf 90       	pop	r12
    29e4:	08 95       	ret

000029e6 <dPotInit>:
    29e6:	be df       	rcall	.-132    	; 0x2964 <spi_dpot_init_pins>
    29e8:	da cf       	rjmp	.-76     	; 0x299e <spi_dpot_init_module>
    29ea:	08 95       	ret

000029ec <dPotSelect>:
    29ec:	66 e9       	ldi	r22, 0x96	; 150
    29ee:	70 e2       	ldi	r23, 0x20	; 32
    29f0:	80 ec       	ldi	r24, 0xC0	; 192
    29f2:	98 e0       	ldi	r25, 0x08	; 8
    29f4:	0c 94 18 08 	jmp	0x1030	; 0x1030 <spi_select_device>
    29f8:	08 95       	ret

000029fa <dPotDeselect>:
    29fa:	66 e9       	ldi	r22, 0x96	; 150
    29fc:	70 e2       	ldi	r23, 0x20	; 32
    29fe:	80 ec       	ldi	r24, 0xC0	; 192
    2a00:	98 e0       	ldi	r25, 0x08	; 8
    2a02:	0c 94 2e 08 	jmp	0x105c	; 0x105c <spi_deselect_device>
    2a06:	08 95       	ret

00002a08 <dPotEnableRDAC>:
    2a08:	cf 93       	push	r28
    2a0a:	df 93       	push	r29
    2a0c:	1f 92       	push	r1
    2a0e:	1f 92       	push	r1
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	8c e1       	ldi	r24, 0x1C	; 28
    2a16:	89 83       	std	Y+1, r24	; 0x01
    2a18:	82 e0       	ldi	r24, 0x02	; 2
    2a1a:	8a 83       	std	Y+2, r24	; 0x02
    2a1c:	e7 df       	rcall	.-50     	; 0x29ec <dPotSelect>
    2a1e:	42 e0       	ldi	r20, 0x02	; 2
    2a20:	50 e0       	ldi	r21, 0x00	; 0
    2a22:	be 01       	movw	r22, r28
    2a24:	6f 5f       	subi	r22, 0xFF	; 255
    2a26:	7f 4f       	sbci	r23, 0xFF	; 255
    2a28:	80 ec       	ldi	r24, 0xC0	; 192
    2a2a:	98 e0       	ldi	r25, 0x08	; 8
    2a2c:	0e 94 f6 07 	call	0xfec	; 0xfec <spi_write_packet>
    2a30:	e0 ec       	ldi	r30, 0xC0	; 192
    2a32:	f8 e0       	ldi	r31, 0x08	; 8
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	88 23       	and	r24, r24
    2a38:	ec f7       	brge	.-6      	; 0x2a34 <dPotEnableRDAC+0x2c>
    2a3a:	df df       	rcall	.-66     	; 0x29fa <dPotDeselect>
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	08 95       	ret

00002a46 <dPotSetValue>:

void dPotSetValue(uint16_t value){
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	1f 92       	push	r1
    2a4c:	1f 92       	push	r1
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
	uint16_t data = 0;
	data = (DPOT_WRDAC<<10)|value;
    2a52:	94 60       	ori	r25, 0x04	; 4
	uint8_t hi_lo[] = { (uint8_t)(data>> 8), (uint8_t) data};
    2a54:	99 83       	std	Y+1, r25	; 0x01
    2a56:	8a 83       	std	Y+2, r24	; 0x02
	dPotSelect();
    2a58:	c9 df       	rcall	.-110    	; 0x29ec <dPotSelect>
	spi_write_packet(&SPI_DPOT_MDL, hi_lo, 2);
    2a5a:	42 e0       	ldi	r20, 0x02	; 2
    2a5c:	50 e0       	ldi	r21, 0x00	; 0
    2a5e:	be 01       	movw	r22, r28
    2a60:	6f 5f       	subi	r22, 0xFF	; 255
    2a62:	7f 4f       	sbci	r23, 0xFF	; 255
    2a64:	80 ec       	ldi	r24, 0xC0	; 192
    2a66:	98 e0       	ldi	r25, 0x08	; 8
    2a68:	0e 94 f6 07 	call	0xfec	; 0xfec <spi_write_packet>
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    2a6c:	e0 ec       	ldi	r30, 0xC0	; 192
    2a6e:	f8 e0       	ldi	r31, 0x08	; 8
    2a70:	82 81       	ldd	r24, Z+2	; 0x02
	while(!spi_is_tx_ok(&SPI_DPOT_MDL));
    2a72:	88 23       	and	r24, r24
    2a74:	ec f7       	brge	.-6      	; 0x2a70 <dPotSetValue+0x2a>
	dPotDeselect();
    2a76:	c1 df       	rcall	.-126    	; 0x29fa <dPotDeselect>
}
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	df 91       	pop	r29
    2a7e:	cf 91       	pop	r28
    2a80:	08 95       	ret

00002a82 <dPotSetRes>:

void dPotSetRes(uint16_t value){
	dPotSetValue((value/nomRes)*DPOT_RESOLUTION - 1.0);
    2a82:	bc 01       	movw	r22, r24
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	c5 d2       	rcall	.+1418   	; 0x3014 <__floatunsisf>
    2a8a:	20 91 92 20 	lds	r18, 0x2092
    2a8e:	30 91 93 20 	lds	r19, 0x2093
    2a92:	40 91 94 20 	lds	r20, 0x2094
    2a96:	50 91 95 20 	lds	r21, 0x2095
    2a9a:	28 d2       	rcall	.+1104   	; 0x2eec <__divsf3>
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e8       	ldi	r20, 0x80	; 128
    2aa2:	54 e4       	ldi	r21, 0x44	; 68
    2aa4:	6d d3       	rcall	.+1754   	; 0x3180 <__mulsf3>
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	b5 d1       	rcall	.+874    	; 0x2e1a <__subsf3>
    2ab0:	85 d2       	rcall	.+1290   	; 0x2fbc <__fixunssfsi>
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	c8 cf       	rjmp	.-112    	; 0x2a46 <dPotSetValue>
    2ab6:	08 95       	ret

00002ab8 <dPotReadRDAC>:
}

uint16_t dPotReadRDAC(void){
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	1f 92       	push	r1
    2abe:	1f 92       	push	r1
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
	uint16_t data = 0;
	data = (DPOT_RRDAC<<10);
	uint8_t hi_lo[] = { (uint8_t)(data>> 8), (uint8_t) data};
    2ac4:	88 e0       	ldi	r24, 0x08	; 8
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	1a 82       	std	Y+2, r1	; 0x02
	dPotSelect();
    2aca:	90 df       	rcall	.-224    	; 0x29ec <dPotSelect>
	spi_write_packet(&SPI_DPOT_MDL, hi_lo, 2);
    2acc:	42 e0       	ldi	r20, 0x02	; 2
    2ace:	50 e0       	ldi	r21, 0x00	; 0
    2ad0:	be 01       	movw	r22, r28
    2ad2:	6f 5f       	subi	r22, 0xFF	; 255
    2ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad6:	80 ec       	ldi	r24, 0xC0	; 192
    2ad8:	98 e0       	ldi	r25, 0x08	; 8
    2ada:	0e 94 f6 07 	call	0xfec	; 0xfec <spi_write_packet>
    2ade:	e0 ec       	ldi	r30, 0xC0	; 192
    2ae0:	f8 e0       	ldi	r31, 0x08	; 8
    2ae2:	82 81       	ldd	r24, Z+2	; 0x02
	while(!spi_is_tx_ok(&SPI_DPOT_MDL));
    2ae4:	88 23       	and	r24, r24
    2ae6:	ec f7       	brge	.-6      	; 0x2ae2 <dPotReadRDAC+0x2a>
	dPotDeselect();
    2ae8:	88 df       	rcall	.-240    	; 0x29fa <dPotDeselect>
	
	dPotSelect();
    2aea:	80 df       	rcall	.-256    	; 0x29ec <dPotSelect>
    2aec:	e0 ec       	ldi	r30, 0xC0	; 192
    2aee:	f8 e0       	ldi	r31, 0x08	; 8
    2af0:	82 81       	ldd	r24, Z+2	; 0x02
	while(!spi_is_rx_ready(&SPI_DPOT_MDL));
    2af2:	88 23       	and	r24, r24
    2af4:	ec f7       	brge	.-6      	; 0x2af0 <dPotReadRDAC+0x38>
	spi_read_packet(&SPI_DPOT_MDL, hi_lo,2);
    2af6:	42 e0       	ldi	r20, 0x02	; 2
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	be 01       	movw	r22, r28
    2afc:	6f 5f       	subi	r22, 0xFF	; 255
    2afe:	7f 4f       	sbci	r23, 0xFF	; 255
    2b00:	80 ec       	ldi	r24, 0xC0	; 192
    2b02:	98 e0       	ldi	r25, 0x08	; 8
    2b04:	0e 94 05 08 	call	0x100a	; 0x100a <spi_read_packet>
	dPotDeselect();
    2b08:	78 df       	rcall	.-272    	; 0x29fa <dPotDeselect>
	
	return (hi_lo[0]<<8) + hi_lo[1];
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	98 2f       	mov	r25, r24
    2b10:	88 27       	eor	r24, r24
    2b12:	2a 81       	ldd	r18, Y+2	; 0x02
	
}
    2b14:	82 0f       	add	r24, r18
    2b16:	91 1d       	adc	r25, r1
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	df 91       	pop	r29
    2b1e:	cf 91       	pop	r28
    2b20:	08 95       	ret

00002b22 <dPotReadRes>:

double dPotReadRes(void){
	
	return ( (dPotReadRDAC()+1)/DPOT_RESOLUTION )*nomRes;
    2b22:	ca df       	rcall	.-108    	; 0x2ab8 <dPotReadRDAC>
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	bc 01       	movw	r22, r24
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	73 d2       	rcall	.+1254   	; 0x3014 <__floatunsisf>
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e8       	ldi	r20, 0x80	; 128
    2b34:	5a e3       	ldi	r21, 0x3A	; 58
    2b36:	24 d3       	rcall	.+1608   	; 0x3180 <__mulsf3>
    2b38:	20 91 92 20 	lds	r18, 0x2092
    2b3c:	30 91 93 20 	lds	r19, 0x2093
    2b40:	40 91 94 20 	lds	r20, 0x2094
    2b44:	50 91 95 20 	lds	r21, 0x2095
    2b48:	1b c3       	rjmp	.+1590   	; 0x3180 <__mulsf3>
	
}
    2b4a:	08 95       	ret

00002b4c <dPotReadFromMem>:

uint16_t dPotReadFromMem(uint8_t addr){
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	1f 92       	push	r1
    2b52:	1f 92       	push	r1
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
	uint16_t data = 0;
	data = (DPOT_R50TP<<10)|addr;
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	94 61       	ori	r25, 0x14	; 20
	uint8_t hi_lo[] = { (uint8_t)(data>> 8), (uint8_t) data};
    2b5c:	99 83       	std	Y+1, r25	; 0x01
    2b5e:	8a 83       	std	Y+2, r24	; 0x02
	dPotSelect();
    2b60:	45 df       	rcall	.-374    	; 0x29ec <dPotSelect>
	spi_write_packet(&SPI_DPOT_MDL, hi_lo, 2);
    2b62:	42 e0       	ldi	r20, 0x02	; 2
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	be 01       	movw	r22, r28
    2b68:	6f 5f       	subi	r22, 0xFF	; 255
    2b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6c:	80 ec       	ldi	r24, 0xC0	; 192
    2b6e:	98 e0       	ldi	r25, 0x08	; 8
    2b70:	0e 94 f6 07 	call	0xfec	; 0xfec <spi_write_packet>
    2b74:	e0 ec       	ldi	r30, 0xC0	; 192
    2b76:	f8 e0       	ldi	r31, 0x08	; 8
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
	while(!spi_is_tx_ok(&SPI_DPOT_MDL));
    2b7a:	88 23       	and	r24, r24
    2b7c:	ec f7       	brge	.-6      	; 0x2b78 <dPotReadFromMem+0x2c>
	dPotDeselect();
    2b7e:	3d df       	rcall	.-390    	; 0x29fa <dPotDeselect>
	
	dPotSelect();
    2b80:	35 df       	rcall	.-406    	; 0x29ec <dPotSelect>
    2b82:	e0 ec       	ldi	r30, 0xC0	; 192
    2b84:	f8 e0       	ldi	r31, 0x08	; 8
    2b86:	82 81       	ldd	r24, Z+2	; 0x02
	while(!spi_is_rx_ready(&SPI_DPOT_MDL));
    2b88:	88 23       	and	r24, r24
    2b8a:	ec f7       	brge	.-6      	; 0x2b86 <dPotReadFromMem+0x3a>
	spi_read_packet(&SPI_DPOT_MDL, hi_lo, 2);
    2b8c:	42 e0       	ldi	r20, 0x02	; 2
    2b8e:	50 e0       	ldi	r21, 0x00	; 0
    2b90:	be 01       	movw	r22, r28
    2b92:	6f 5f       	subi	r22, 0xFF	; 255
    2b94:	7f 4f       	sbci	r23, 0xFF	; 255
    2b96:	80 ec       	ldi	r24, 0xC0	; 192
    2b98:	98 e0       	ldi	r25, 0x08	; 8
    2b9a:	0e 94 05 08 	call	0x100a	; 0x100a <spi_read_packet>
	dPotDeselect();
    2b9e:	2d df       	rcall	.-422    	; 0x29fa <dPotDeselect>
	
	return (CLEARBITS(hi_lo[0],0xFC)<<8) + hi_lo[1];
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	83 70       	andi	r24, 0x03	; 3
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	98 2f       	mov	r25, r24
    2ba8:	88 27       	eor	r24, r24
    2baa:	2a 81       	ldd	r18, Y+2	; 0x02
}
    2bac:	82 0f       	add	r24, r18
    2bae:	91 1d       	adc	r25, r1
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	df 91       	pop	r29
    2bb6:	cf 91       	pop	r28
    2bb8:	08 95       	ret

00002bba <dPotCalibrate>:

double dPotCalibrate(void){
    2bba:	cf 92       	push	r12
    2bbc:	df 92       	push	r13
    2bbe:	ef 92       	push	r14
    2bc0:	ff 92       	push	r15
    2bc2:	1f 93       	push	r17
    2bc4:	cf 93       	push	r28
    2bc6:	df 93       	push	r29
	uint16_t newNomRes;
	uint8_t high = dPotReadFromMem(0x39);
    2bc8:	89 e3       	ldi	r24, 0x39	; 57
    2bca:	c0 df       	rcall	.-128    	; 0x2b4c <dPotReadFromMem>
    2bcc:	18 2f       	mov	r17, r24
	uint8_t low = dPotReadFromMem(0x3A);
    2bce:	8a e3       	ldi	r24, 0x3A	; 58
    2bd0:	bd df       	rcall	.-134    	; 0x2b4c <dPotReadFromMem>
    2bd2:	ec 01       	movw	r28, r24
	bool isPositive = BITSET(high,7);
	CLEARBIT(high,7);
    2bd4:	61 2f       	mov	r22, r17
    2bd6:	6f 77       	andi	r22, 0x7F	; 127
	if(isPositive){
    2bd8:	17 ff       	sbrs	r17, 7
    2bda:	33 c0       	rjmp	.+102    	; 0x2c42 <dPotCalibrate+0x88>
		newNomRes = DPOT_NOM_RES + DPOT_NOM_RES * (high + low*pow(2,-8))/100;
    2bdc:	70 e0       	ldi	r23, 0x00	; 0
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	1a d2       	rcall	.+1076   	; 0x3018 <__floatsisf>
    2be4:	6b 01       	movw	r12, r22
    2be6:	7c 01       	movw	r14, r24
    2be8:	be 01       	movw	r22, r28
    2bea:	77 27       	eor	r23, r23
    2bec:	88 27       	eor	r24, r24
    2bee:	77 fd       	sbrc	r23, 7
    2bf0:	80 95       	com	r24
    2bf2:	98 2f       	mov	r25, r24
    2bf4:	11 d2       	rcall	.+1058   	; 0x3018 <__floatsisf>
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e8       	ldi	r20, 0x80	; 128
    2bfc:	5b e3       	ldi	r21, 0x3B	; 59
    2bfe:	c0 d2       	rcall	.+1408   	; 0x3180 <__mulsf3>
    2c00:	9b 01       	movw	r18, r22
    2c02:	ac 01       	movw	r20, r24
    2c04:	c7 01       	movw	r24, r14
    2c06:	b6 01       	movw	r22, r12
    2c08:	09 d1       	rcall	.+530    	; 0x2e1c <__addsf3>
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e4       	ldi	r19, 0x40	; 64
    2c0e:	4c e1       	ldi	r20, 0x1C	; 28
    2c10:	56 e4       	ldi	r21, 0x46	; 70
    2c12:	b6 d2       	rcall	.+1388   	; 0x3180 <__mulsf3>
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	48 ec       	ldi	r20, 0xC8	; 200
    2c1a:	52 e4       	ldi	r21, 0x42	; 66
    2c1c:	67 d1       	rcall	.+718    	; 0x2eec <__divsf3>
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e4       	ldi	r19, 0x40	; 64
    2c22:	4c e1       	ldi	r20, 0x1C	; 28
    2c24:	56 e4       	ldi	r21, 0x46	; 70
    2c26:	fa d0       	rcall	.+500    	; 0x2e1c <__addsf3>
    2c28:	c9 d1       	rcall	.+914    	; 0x2fbc <__fixunssfsi>
		dPotSetNomRes(newNomRes);
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	f2 d1       	rcall	.+996    	; 0x3014 <__floatunsisf>
};

static double nomRes = DPOT_NOM_RES;

void dPotSetNomRes(double newNomRes){
	nomRes = newNomRes;
    2c30:	60 93 92 20 	sts	0x2092, r22
    2c34:	70 93 93 20 	sts	0x2093, r23
    2c38:	80 93 94 20 	sts	0x2094, r24
    2c3c:	90 93 95 20 	sts	0x2095, r25
    2c40:	34 c0       	rjmp	.+104    	; 0x2caa <dPotCalibrate+0xf0>
		newNomRes = DPOT_NOM_RES + DPOT_NOM_RES * (high + low*pow(2,-8))/100;
		dPotSetNomRes(newNomRes);
		return newNomRes;
	}
	else{
		newNomRes = DPOT_NOM_RES - DPOT_NOM_RES * (high + low*pow(2,-8))/100;
    2c42:	70 e0       	ldi	r23, 0x00	; 0
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	e7 d1       	rcall	.+974    	; 0x3018 <__floatsisf>
    2c4a:	6b 01       	movw	r12, r22
    2c4c:	7c 01       	movw	r14, r24
    2c4e:	be 01       	movw	r22, r28
    2c50:	77 27       	eor	r23, r23
    2c52:	88 27       	eor	r24, r24
    2c54:	77 fd       	sbrc	r23, 7
    2c56:	80 95       	com	r24
    2c58:	98 2f       	mov	r25, r24
    2c5a:	de d1       	rcall	.+956    	; 0x3018 <__floatsisf>
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	5b e3       	ldi	r21, 0x3B	; 59
    2c64:	8d d2       	rcall	.+1306   	; 0x3180 <__mulsf3>
    2c66:	9b 01       	movw	r18, r22
    2c68:	ac 01       	movw	r20, r24
    2c6a:	c7 01       	movw	r24, r14
    2c6c:	b6 01       	movw	r22, r12
    2c6e:	d6 d0       	rcall	.+428    	; 0x2e1c <__addsf3>
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e4       	ldi	r19, 0x40	; 64
    2c74:	4c e1       	ldi	r20, 0x1C	; 28
    2c76:	56 e4       	ldi	r21, 0x46	; 70
    2c78:	83 d2       	rcall	.+1286   	; 0x3180 <__mulsf3>
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	48 ec       	ldi	r20, 0xC8	; 200
    2c80:	52 e4       	ldi	r21, 0x42	; 66
    2c82:	34 d1       	rcall	.+616    	; 0x2eec <__divsf3>
    2c84:	9b 01       	movw	r18, r22
    2c86:	ac 01       	movw	r20, r24
    2c88:	60 e0       	ldi	r22, 0x00	; 0
    2c8a:	70 e4       	ldi	r23, 0x40	; 64
    2c8c:	8c e1       	ldi	r24, 0x1C	; 28
    2c8e:	96 e4       	ldi	r25, 0x46	; 70
    2c90:	c4 d0       	rcall	.+392    	; 0x2e1a <__subsf3>
    2c92:	94 d1       	rcall	.+808    	; 0x2fbc <__fixunssfsi>
		dPotSetNomRes(newNomRes);
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	bd d1       	rcall	.+890    	; 0x3014 <__floatunsisf>
};

static double nomRes = DPOT_NOM_RES;

void dPotSetNomRes(double newNomRes){
	nomRes = newNomRes;
    2c9a:	60 93 92 20 	sts	0x2092, r22
    2c9e:	70 93 93 20 	sts	0x2093, r23
    2ca2:	80 93 94 20 	sts	0x2094, r24
    2ca6:	90 93 95 20 	sts	0x2095, r25
		newNomRes = DPOT_NOM_RES - DPOT_NOM_RES * (high + low*pow(2,-8))/100;
		dPotSetNomRes(newNomRes);
		return newNomRes;
	}
	
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	1f 91       	pop	r17
    2cb0:	ff 90       	pop	r15
    2cb2:	ef 90       	pop	r14
    2cb4:	df 90       	pop	r13
    2cb6:	cf 90       	pop	r12
    2cb8:	08 95       	ret

00002cba <getCharAsDigit>:
	
}

uint8_t getCharAsDigit(char c){
	
	switch(c){
    2cba:	99 27       	eor	r25, r25
    2cbc:	87 fd       	sbrc	r24, 7
    2cbe:	90 95       	com	r25
    2cc0:	a9 2f       	mov	r26, r25
    2cc2:	b9 2f       	mov	r27, r25
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	f0 97       	sbiw	r30, 0x30	; 48
    2cc8:	ea 30       	cpi	r30, 0x0A	; 10
    2cca:	f1 05       	cpc	r31, r1
    2ccc:	a8 f4       	brcc	.+42     	; 0x2cf8 <getCharAsDigit+0x3e>
    2cce:	eb 5f       	subi	r30, 0xFB	; 251
    2cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd2:	70 c6       	rjmp	.+3296   	; 0x39b4 <__tablejump2__>
		case '0':
		return 0;
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	08 95       	ret
		break;
		case '1':
		return 1;
		break;
		case '2':
		return 2;
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	08 95       	ret
		break;
		case '3':
		return 3;
    2cdc:	83 e0       	ldi	r24, 0x03	; 3
    2cde:	08 95       	ret
		break;
		case '4':
		return 4;
    2ce0:	84 e0       	ldi	r24, 0x04	; 4
    2ce2:	08 95       	ret
		break;
		case '5':
		return 5;
    2ce4:	85 e0       	ldi	r24, 0x05	; 5
    2ce6:	08 95       	ret
		break;
		case '6':
		return 6;
    2ce8:	86 e0       	ldi	r24, 0x06	; 6
    2cea:	08 95       	ret
		break;
		case '7':
		return 7;
    2cec:	87 e0       	ldi	r24, 0x07	; 7
    2cee:	08 95       	ret
		break;
		case '8':
		return 8;
    2cf0:	88 e0       	ldi	r24, 0x08	; 8
    2cf2:	08 95       	ret
		break;
		case '9':
		return 9;
    2cf4:	89 e0       	ldi	r24, 0x09	; 9
    2cf6:	08 95       	ret
		break;
		default:
		return -1;
    2cf8:	8f ef       	ldi	r24, 0xFF	; 255
    2cfa:	08 95       	ret
	switch(c){
		case '0':
		return 0;
		break;
		case '1':
		return 1;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
		break;
		default:
		return -1;
	}
	
}
    2cfe:	08 95       	ret

00002d00 <getIntAsString>:

char * getIntAsString(int num){
    2d00:	0f 93       	push	r16
    2d02:	1f 93       	push	r17
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	18 2f       	mov	r17, r24
    2d0a:	09 2f       	mov	r16, r25
	charArray[n] = '\0';
	
	char charArray[100];
	sprintf(charArray,"%u",num);
	*/
	char *charArray = calloc(64,sizeof(char)); //TODO Use charArray[64] and then memset(charArray, 0, sizeof(charArray[0]) * 64) to clear it so no need to free
    2d0c:	61 e0       	ldi	r22, 0x01	; 1
    2d0e:	70 e0       	ldi	r23, 0x00	; 0
    2d10:	80 e4       	ldi	r24, 0x40	; 64
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	55 d6       	rcall	.+3242   	; 0x39c0 <calloc>
    2d16:	d8 2f       	mov	r29, r24
    2d18:	c9 2f       	mov	r28, r25
	sprintf(charArray,"%d",num);
    2d1a:	0f 93       	push	r16
    2d1c:	1f 93       	push	r17
    2d1e:	26 e5       	ldi	r18, 0x56	; 86
    2d20:	31 e2       	ldi	r19, 0x21	; 33
    2d22:	3f 93       	push	r19
    2d24:	2f 93       	push	r18
    2d26:	9f 93       	push	r25
    2d28:	8f 93       	push	r24
    2d2a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <sprintf>
	
	return charArray;
    2d2e:	0f 90       	pop	r0
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	0f 90       	pop	r0
}
    2d3a:	8d 2f       	mov	r24, r29
    2d3c:	9c 2f       	mov	r25, r28
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	1f 91       	pop	r17
    2d44:	0f 91       	pop	r16
    2d46:	08 95       	ret

00002d48 <getDoubleAsString>:

char * getDoubleAsString(double num){
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	16 2f       	mov	r17, r22
    2d56:	07 2f       	mov	r16, r23
    2d58:	f8 2e       	mov	r15, r24
    2d5a:	e9 2e       	mov	r14, r25
	
	charArray[n+4] = '\0';*/
	//uint8_t n = log10(num) + 1;
	//char *charArray = calloc(n+3+1+1+1, sizeof(char)); //decimal point + 3 floating point resolution + . + \0 + minus (-) in case
	
	char *charArray = calloc(64,sizeof(char)); //TODO Use charArray[64] and then memset(charArray, 0, sizeof(charArray[0]) * 64) to clear it so no need to free
    2d5c:	61 e0       	ldi	r22, 0x01	; 1
    2d5e:	70 e0       	ldi	r23, 0x00	; 0
    2d60:	80 e4       	ldi	r24, 0x40	; 64
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	2d d6       	rcall	.+3162   	; 0x39c0 <calloc>
    2d66:	d8 2f       	mov	r29, r24
    2d68:	c9 2f       	mov	r28, r25
	sprintf(charArray,"%g",num);
    2d6a:	ef 92       	push	r14
    2d6c:	ff 92       	push	r15
    2d6e:	0f 93       	push	r16
    2d70:	1f 93       	push	r17
    2d72:	29 e5       	ldi	r18, 0x59	; 89
    2d74:	31 e2       	ldi	r19, 0x21	; 33
    2d76:	3f 93       	push	r19
    2d78:	2f 93       	push	r18
    2d7a:	9f 93       	push	r25
    2d7c:	8f 93       	push	r24
    2d7e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <sprintf>
	
	return charArray;
    2d82:	8d b7       	in	r24, 0x3d	; 61
    2d84:	9e b7       	in	r25, 0x3e	; 62
    2d86:	08 96       	adiw	r24, 0x08	; 8
    2d88:	8d bf       	out	0x3d, r24	; 61
    2d8a:	9e bf       	out	0x3e, r25	; 62
}
    2d8c:	8d 2f       	mov	r24, r29
    2d8e:	9c 2f       	mov	r25, r28
    2d90:	df 91       	pop	r29
    2d92:	cf 91       	pop	r28
    2d94:	1f 91       	pop	r17
    2d96:	0f 91       	pop	r16
    2d98:	ff 90       	pop	r15
    2d9a:	ef 90       	pop	r14
    2d9c:	08 95       	ret

00002d9e <main>:

int main (void)
{
	// Insert system clock initialization code here (sysclk_init()).

	board_init();
    2d9e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <board_init>
	sysclk_init();
    2da2:	0e 94 df 06 	call	0xdbe	; 0xdbe <sysclk_init>
	irq_initialize_vectors();
    2da6:	87 e0       	ldi	r24, 0x07	; 7
    2da8:	e0 ea       	ldi	r30, 0xA0	; 160
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    2dae:	78 94       	sei

	udc_start();
    2db0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <udc_start>
	
	adc_init();
    2db4:	0e 94 bb 02 	call	0x576	; 0x576 <adc_init>
	
	dPotInit();
    2db8:	16 de       	rcall	.-980    	; 0x29e6 <dPotInit>
	dPotEnableRDAC();
    2dba:	26 de       	rcall	.-948    	; 0x2a08 <dPotEnableRDAC>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2dbc:	c0 ee       	ldi	r28, 0xE0	; 224
    2dbe:	d7 e0       	ldi	r29, 0x07	; 7
    2dc0:	11 e0       	ldi	r17, 0x01	; 1
    2dc2:	b1 2e       	mov	r11, r17
    2dc4:	02 e0       	ldi	r16, 0x02	; 2
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2dc6:	c1 2c       	mov	r12, r1
    2dc8:	0f 2e       	mov	r0, r31
    2dca:	f9 e0       	ldi	r31, 0x09	; 9
    2dcc:	df 2e       	mov	r13, r31
    2dce:	f0 2d       	mov	r31, r0
    2dd0:	0f 2e       	mov	r0, r31
    2dd2:	fd e3       	ldi	r31, 0x3D	; 61
    2dd4:	ef 2e       	mov	r14, r31
    2dd6:	f0 2d       	mov	r31, r0
    2dd8:	f1 2c       	mov	r15, r1
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2dda:	be 82       	std	Y+6, r11	; 0x06
		
		//doubleAsString = getDoubleAsString(dPotReadFromMem(0x01));
		//udi_hid_generic_send_report_in(doubleAsString);
		//free(doubleAsString);
		LED_On(LED0);
		usbSendPVVVoltage();
    2ddc:	0e 94 a4 05 	call	0xb48	; 0xb48 <usbSendPVVVoltage>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2de0:	1d 83       	std	Y+5, r17	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2de2:	0e 83       	std	Y+6, r16	; 0x06
		LED_Off(LED0);
		LED_On(LED1);
		usbSendPVCCurrent();
    2de4:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <usbSendPVCCurrent>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2de8:	0d 83       	std	Y+5, r16	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2dea:	1e 83       	std	Y+6, r17	; 0x06
		LED_Off(LED1);
		LED_On(LED0);
		usbSendPVPower();
    2dec:	0e 94 22 06 	call	0xc44	; 0xc44 <usbSendPVPower>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2df0:	1d 83       	std	Y+5, r17	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2df2:	0e 83       	std	Y+6, r16	; 0x06
		LED_Off(LED0);
		LED_On(LED1);
		usbSendPVVoc();
    2df4:	0e 94 61 06 	call	0xcc2	; 0xcc2 <usbSendPVVoc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2df8:	0d 83       	std	Y+5, r16	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2dfa:	1e 83       	std	Y+6, r17	; 0x06
		LED_Off(LED1);
		LED_On(LED0);
		usbSendPVIsc();
    2dfc:	0e 94 a0 06 	call	0xd40	; 0xd40 <usbSendPVIsc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2e00:	1d 83       	std	Y+5, r17	; 0x05
    2e02:	8c 2d       	mov	r24, r12
    2e04:	9d 2d       	mov	r25, r13
    2e06:	ae 2d       	mov	r26, r14
    2e08:	bf 2d       	mov	r27, r15
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	a1 09       	sbc	r26, r1
    2e0e:	b1 09       	sbc	r27, r1
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	a1 05       	cpc	r26, r1
    2e14:	b1 05       	cpc	r27, r1
    2e16:	c9 f7       	brne	.-14     	; 0x2e0a <main+0x6c>
    2e18:	e0 cf       	rjmp	.-64     	; 0x2dda <main+0x3c>

00002e1a <__subsf3>:
    2e1a:	50 58       	subi	r21, 0x80	; 128

00002e1c <__addsf3>:
    2e1c:	bb 27       	eor	r27, r27
    2e1e:	aa 27       	eor	r26, r26
    2e20:	0e d0       	rcall	.+28     	; 0x2e3e <__addsf3x>
    2e22:	70 c1       	rjmp	.+736    	; 0x3104 <__fp_round>
    2e24:	61 d1       	rcall	.+706    	; 0x30e8 <__fp_pscA>
    2e26:	30 f0       	brcs	.+12     	; 0x2e34 <__addsf3+0x18>
    2e28:	66 d1       	rcall	.+716    	; 0x30f6 <__fp_pscB>
    2e2a:	20 f0       	brcs	.+8      	; 0x2e34 <__addsf3+0x18>
    2e2c:	31 f4       	brne	.+12     	; 0x2e3a <__addsf3+0x1e>
    2e2e:	9f 3f       	cpi	r25, 0xFF	; 255
    2e30:	11 f4       	brne	.+4      	; 0x2e36 <__addsf3+0x1a>
    2e32:	1e f4       	brtc	.+6      	; 0x2e3a <__addsf3+0x1e>
    2e34:	56 c1       	rjmp	.+684    	; 0x30e2 <__fp_nan>
    2e36:	0e f4       	brtc	.+2      	; 0x2e3a <__addsf3+0x1e>
    2e38:	e0 95       	com	r30
    2e3a:	e7 fb       	bst	r30, 7
    2e3c:	4c c1       	rjmp	.+664    	; 0x30d6 <__fp_inf>

00002e3e <__addsf3x>:
    2e3e:	e9 2f       	mov	r30, r25
    2e40:	72 d1       	rcall	.+740    	; 0x3126 <__fp_split3>
    2e42:	80 f3       	brcs	.-32     	; 0x2e24 <__addsf3+0x8>
    2e44:	ba 17       	cp	r27, r26
    2e46:	62 07       	cpc	r22, r18
    2e48:	73 07       	cpc	r23, r19
    2e4a:	84 07       	cpc	r24, r20
    2e4c:	95 07       	cpc	r25, r21
    2e4e:	18 f0       	brcs	.+6      	; 0x2e56 <__addsf3x+0x18>
    2e50:	71 f4       	brne	.+28     	; 0x2e6e <__addsf3x+0x30>
    2e52:	9e f5       	brtc	.+102    	; 0x2eba <__addsf3x+0x7c>
    2e54:	8a c1       	rjmp	.+788    	; 0x316a <__fp_zero>
    2e56:	0e f4       	brtc	.+2      	; 0x2e5a <__addsf3x+0x1c>
    2e58:	e0 95       	com	r30
    2e5a:	0b 2e       	mov	r0, r27
    2e5c:	ba 2f       	mov	r27, r26
    2e5e:	a0 2d       	mov	r26, r0
    2e60:	0b 01       	movw	r0, r22
    2e62:	b9 01       	movw	r22, r18
    2e64:	90 01       	movw	r18, r0
    2e66:	0c 01       	movw	r0, r24
    2e68:	ca 01       	movw	r24, r20
    2e6a:	a0 01       	movw	r20, r0
    2e6c:	11 24       	eor	r1, r1
    2e6e:	ff 27       	eor	r31, r31
    2e70:	59 1b       	sub	r21, r25
    2e72:	99 f0       	breq	.+38     	; 0x2e9a <__addsf3x+0x5c>
    2e74:	59 3f       	cpi	r21, 0xF9	; 249
    2e76:	50 f4       	brcc	.+20     	; 0x2e8c <__addsf3x+0x4e>
    2e78:	50 3e       	cpi	r21, 0xE0	; 224
    2e7a:	68 f1       	brcs	.+90     	; 0x2ed6 <__addsf3x+0x98>
    2e7c:	1a 16       	cp	r1, r26
    2e7e:	f0 40       	sbci	r31, 0x00	; 0
    2e80:	a2 2f       	mov	r26, r18
    2e82:	23 2f       	mov	r18, r19
    2e84:	34 2f       	mov	r19, r20
    2e86:	44 27       	eor	r20, r20
    2e88:	58 5f       	subi	r21, 0xF8	; 248
    2e8a:	f3 cf       	rjmp	.-26     	; 0x2e72 <__addsf3x+0x34>
    2e8c:	46 95       	lsr	r20
    2e8e:	37 95       	ror	r19
    2e90:	27 95       	ror	r18
    2e92:	a7 95       	ror	r26
    2e94:	f0 40       	sbci	r31, 0x00	; 0
    2e96:	53 95       	inc	r21
    2e98:	c9 f7       	brne	.-14     	; 0x2e8c <__addsf3x+0x4e>
    2e9a:	7e f4       	brtc	.+30     	; 0x2eba <__addsf3x+0x7c>
    2e9c:	1f 16       	cp	r1, r31
    2e9e:	ba 0b       	sbc	r27, r26
    2ea0:	62 0b       	sbc	r22, r18
    2ea2:	73 0b       	sbc	r23, r19
    2ea4:	84 0b       	sbc	r24, r20
    2ea6:	ba f0       	brmi	.+46     	; 0x2ed6 <__addsf3x+0x98>
    2ea8:	91 50       	subi	r25, 0x01	; 1
    2eaa:	a1 f0       	breq	.+40     	; 0x2ed4 <__addsf3x+0x96>
    2eac:	ff 0f       	add	r31, r31
    2eae:	bb 1f       	adc	r27, r27
    2eb0:	66 1f       	adc	r22, r22
    2eb2:	77 1f       	adc	r23, r23
    2eb4:	88 1f       	adc	r24, r24
    2eb6:	c2 f7       	brpl	.-16     	; 0x2ea8 <__addsf3x+0x6a>
    2eb8:	0e c0       	rjmp	.+28     	; 0x2ed6 <__addsf3x+0x98>
    2eba:	ba 0f       	add	r27, r26
    2ebc:	62 1f       	adc	r22, r18
    2ebe:	73 1f       	adc	r23, r19
    2ec0:	84 1f       	adc	r24, r20
    2ec2:	48 f4       	brcc	.+18     	; 0x2ed6 <__addsf3x+0x98>
    2ec4:	87 95       	ror	r24
    2ec6:	77 95       	ror	r23
    2ec8:	67 95       	ror	r22
    2eca:	b7 95       	ror	r27
    2ecc:	f7 95       	ror	r31
    2ece:	9e 3f       	cpi	r25, 0xFE	; 254
    2ed0:	08 f0       	brcs	.+2      	; 0x2ed4 <__addsf3x+0x96>
    2ed2:	b3 cf       	rjmp	.-154    	; 0x2e3a <__addsf3+0x1e>
    2ed4:	93 95       	inc	r25
    2ed6:	88 0f       	add	r24, r24
    2ed8:	08 f0       	brcs	.+2      	; 0x2edc <__addsf3x+0x9e>
    2eda:	99 27       	eor	r25, r25
    2edc:	ee 0f       	add	r30, r30
    2ede:	97 95       	ror	r25
    2ee0:	87 95       	ror	r24
    2ee2:	08 95       	ret

00002ee4 <__cmpsf2>:
    2ee4:	d4 d0       	rcall	.+424    	; 0x308e <__fp_cmp>
    2ee6:	08 f4       	brcc	.+2      	; 0x2eea <__cmpsf2+0x6>
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	08 95       	ret

00002eec <__divsf3>:
    2eec:	0c d0       	rcall	.+24     	; 0x2f06 <__divsf3x>
    2eee:	0a c1       	rjmp	.+532    	; 0x3104 <__fp_round>
    2ef0:	02 d1       	rcall	.+516    	; 0x30f6 <__fp_pscB>
    2ef2:	40 f0       	brcs	.+16     	; 0x2f04 <__divsf3+0x18>
    2ef4:	f9 d0       	rcall	.+498    	; 0x30e8 <__fp_pscA>
    2ef6:	30 f0       	brcs	.+12     	; 0x2f04 <__divsf3+0x18>
    2ef8:	21 f4       	brne	.+8      	; 0x2f02 <__divsf3+0x16>
    2efa:	5f 3f       	cpi	r21, 0xFF	; 255
    2efc:	19 f0       	breq	.+6      	; 0x2f04 <__divsf3+0x18>
    2efe:	eb c0       	rjmp	.+470    	; 0x30d6 <__fp_inf>
    2f00:	51 11       	cpse	r21, r1
    2f02:	34 c1       	rjmp	.+616    	; 0x316c <__fp_szero>
    2f04:	ee c0       	rjmp	.+476    	; 0x30e2 <__fp_nan>

00002f06 <__divsf3x>:
    2f06:	0f d1       	rcall	.+542    	; 0x3126 <__fp_split3>
    2f08:	98 f3       	brcs	.-26     	; 0x2ef0 <__divsf3+0x4>

00002f0a <__divsf3_pse>:
    2f0a:	99 23       	and	r25, r25
    2f0c:	c9 f3       	breq	.-14     	; 0x2f00 <__divsf3+0x14>
    2f0e:	55 23       	and	r21, r21
    2f10:	b1 f3       	breq	.-20     	; 0x2efe <__divsf3+0x12>
    2f12:	95 1b       	sub	r25, r21
    2f14:	55 0b       	sbc	r21, r21
    2f16:	bb 27       	eor	r27, r27
    2f18:	aa 27       	eor	r26, r26
    2f1a:	62 17       	cp	r22, r18
    2f1c:	73 07       	cpc	r23, r19
    2f1e:	84 07       	cpc	r24, r20
    2f20:	38 f0       	brcs	.+14     	; 0x2f30 <__divsf3_pse+0x26>
    2f22:	9f 5f       	subi	r25, 0xFF	; 255
    2f24:	5f 4f       	sbci	r21, 0xFF	; 255
    2f26:	22 0f       	add	r18, r18
    2f28:	33 1f       	adc	r19, r19
    2f2a:	44 1f       	adc	r20, r20
    2f2c:	aa 1f       	adc	r26, r26
    2f2e:	a9 f3       	breq	.-22     	; 0x2f1a <__divsf3_pse+0x10>
    2f30:	33 d0       	rcall	.+102    	; 0x2f98 <__divsf3_pse+0x8e>
    2f32:	0e 2e       	mov	r0, r30
    2f34:	3a f0       	brmi	.+14     	; 0x2f44 <__divsf3_pse+0x3a>
    2f36:	e0 e8       	ldi	r30, 0x80	; 128
    2f38:	30 d0       	rcall	.+96     	; 0x2f9a <__divsf3_pse+0x90>
    2f3a:	91 50       	subi	r25, 0x01	; 1
    2f3c:	50 40       	sbci	r21, 0x00	; 0
    2f3e:	e6 95       	lsr	r30
    2f40:	00 1c       	adc	r0, r0
    2f42:	ca f7       	brpl	.-14     	; 0x2f36 <__divsf3_pse+0x2c>
    2f44:	29 d0       	rcall	.+82     	; 0x2f98 <__divsf3_pse+0x8e>
    2f46:	fe 2f       	mov	r31, r30
    2f48:	27 d0       	rcall	.+78     	; 0x2f98 <__divsf3_pse+0x8e>
    2f4a:	66 0f       	add	r22, r22
    2f4c:	77 1f       	adc	r23, r23
    2f4e:	88 1f       	adc	r24, r24
    2f50:	bb 1f       	adc	r27, r27
    2f52:	26 17       	cp	r18, r22
    2f54:	37 07       	cpc	r19, r23
    2f56:	48 07       	cpc	r20, r24
    2f58:	ab 07       	cpc	r26, r27
    2f5a:	b0 e8       	ldi	r27, 0x80	; 128
    2f5c:	09 f0       	breq	.+2      	; 0x2f60 <__divsf3_pse+0x56>
    2f5e:	bb 0b       	sbc	r27, r27
    2f60:	80 2d       	mov	r24, r0
    2f62:	bf 01       	movw	r22, r30
    2f64:	ff 27       	eor	r31, r31
    2f66:	93 58       	subi	r25, 0x83	; 131
    2f68:	5f 4f       	sbci	r21, 0xFF	; 255
    2f6a:	2a f0       	brmi	.+10     	; 0x2f76 <__divsf3_pse+0x6c>
    2f6c:	9e 3f       	cpi	r25, 0xFE	; 254
    2f6e:	51 05       	cpc	r21, r1
    2f70:	68 f0       	brcs	.+26     	; 0x2f8c <__divsf3_pse+0x82>
    2f72:	b1 c0       	rjmp	.+354    	; 0x30d6 <__fp_inf>
    2f74:	fb c0       	rjmp	.+502    	; 0x316c <__fp_szero>
    2f76:	5f 3f       	cpi	r21, 0xFF	; 255
    2f78:	ec f3       	brlt	.-6      	; 0x2f74 <__divsf3_pse+0x6a>
    2f7a:	98 3e       	cpi	r25, 0xE8	; 232
    2f7c:	dc f3       	brlt	.-10     	; 0x2f74 <__divsf3_pse+0x6a>
    2f7e:	86 95       	lsr	r24
    2f80:	77 95       	ror	r23
    2f82:	67 95       	ror	r22
    2f84:	b7 95       	ror	r27
    2f86:	f7 95       	ror	r31
    2f88:	9f 5f       	subi	r25, 0xFF	; 255
    2f8a:	c9 f7       	brne	.-14     	; 0x2f7e <__divsf3_pse+0x74>
    2f8c:	88 0f       	add	r24, r24
    2f8e:	91 1d       	adc	r25, r1
    2f90:	96 95       	lsr	r25
    2f92:	87 95       	ror	r24
    2f94:	97 f9       	bld	r25, 7
    2f96:	08 95       	ret
    2f98:	e1 e0       	ldi	r30, 0x01	; 1
    2f9a:	66 0f       	add	r22, r22
    2f9c:	77 1f       	adc	r23, r23
    2f9e:	88 1f       	adc	r24, r24
    2fa0:	bb 1f       	adc	r27, r27
    2fa2:	62 17       	cp	r22, r18
    2fa4:	73 07       	cpc	r23, r19
    2fa6:	84 07       	cpc	r24, r20
    2fa8:	ba 07       	cpc	r27, r26
    2faa:	20 f0       	brcs	.+8      	; 0x2fb4 <__divsf3_pse+0xaa>
    2fac:	62 1b       	sub	r22, r18
    2fae:	73 0b       	sbc	r23, r19
    2fb0:	84 0b       	sbc	r24, r20
    2fb2:	ba 0b       	sbc	r27, r26
    2fb4:	ee 1f       	adc	r30, r30
    2fb6:	88 f7       	brcc	.-30     	; 0x2f9a <__divsf3_pse+0x90>
    2fb8:	e0 95       	com	r30
    2fba:	08 95       	ret

00002fbc <__fixunssfsi>:
    2fbc:	bc d0       	rcall	.+376    	; 0x3136 <__fp_splitA>
    2fbe:	88 f0       	brcs	.+34     	; 0x2fe2 <__fixunssfsi+0x26>
    2fc0:	9f 57       	subi	r25, 0x7F	; 127
    2fc2:	90 f0       	brcs	.+36     	; 0x2fe8 <__fixunssfsi+0x2c>
    2fc4:	b9 2f       	mov	r27, r25
    2fc6:	99 27       	eor	r25, r25
    2fc8:	b7 51       	subi	r27, 0x17	; 23
    2fca:	a0 f0       	brcs	.+40     	; 0x2ff4 <__fixunssfsi+0x38>
    2fcc:	d1 f0       	breq	.+52     	; 0x3002 <__fixunssfsi+0x46>
    2fce:	66 0f       	add	r22, r22
    2fd0:	77 1f       	adc	r23, r23
    2fd2:	88 1f       	adc	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	1a f0       	brmi	.+6      	; 0x2fde <__fixunssfsi+0x22>
    2fd8:	ba 95       	dec	r27
    2fda:	c9 f7       	brne	.-14     	; 0x2fce <__fixunssfsi+0x12>
    2fdc:	12 c0       	rjmp	.+36     	; 0x3002 <__fixunssfsi+0x46>
    2fde:	b1 30       	cpi	r27, 0x01	; 1
    2fe0:	81 f0       	breq	.+32     	; 0x3002 <__fixunssfsi+0x46>
    2fe2:	c3 d0       	rcall	.+390    	; 0x316a <__fp_zero>
    2fe4:	b1 e0       	ldi	r27, 0x01	; 1
    2fe6:	08 95       	ret
    2fe8:	c0 c0       	rjmp	.+384    	; 0x316a <__fp_zero>
    2fea:	67 2f       	mov	r22, r23
    2fec:	78 2f       	mov	r23, r24
    2fee:	88 27       	eor	r24, r24
    2ff0:	b8 5f       	subi	r27, 0xF8	; 248
    2ff2:	39 f0       	breq	.+14     	; 0x3002 <__fixunssfsi+0x46>
    2ff4:	b9 3f       	cpi	r27, 0xF9	; 249
    2ff6:	cc f3       	brlt	.-14     	; 0x2fea <__fixunssfsi+0x2e>
    2ff8:	86 95       	lsr	r24
    2ffa:	77 95       	ror	r23
    2ffc:	67 95       	ror	r22
    2ffe:	b3 95       	inc	r27
    3000:	d9 f7       	brne	.-10     	; 0x2ff8 <__fixunssfsi+0x3c>
    3002:	3e f4       	brtc	.+14     	; 0x3012 <__fixunssfsi+0x56>
    3004:	90 95       	com	r25
    3006:	80 95       	com	r24
    3008:	70 95       	com	r23
    300a:	61 95       	neg	r22
    300c:	7f 4f       	sbci	r23, 0xFF	; 255
    300e:	8f 4f       	sbci	r24, 0xFF	; 255
    3010:	9f 4f       	sbci	r25, 0xFF	; 255
    3012:	08 95       	ret

00003014 <__floatunsisf>:
    3014:	e8 94       	clt
    3016:	09 c0       	rjmp	.+18     	; 0x302a <__floatsisf+0x12>

00003018 <__floatsisf>:
    3018:	97 fb       	bst	r25, 7
    301a:	3e f4       	brtc	.+14     	; 0x302a <__floatsisf+0x12>
    301c:	90 95       	com	r25
    301e:	80 95       	com	r24
    3020:	70 95       	com	r23
    3022:	61 95       	neg	r22
    3024:	7f 4f       	sbci	r23, 0xFF	; 255
    3026:	8f 4f       	sbci	r24, 0xFF	; 255
    3028:	9f 4f       	sbci	r25, 0xFF	; 255
    302a:	99 23       	and	r25, r25
    302c:	a9 f0       	breq	.+42     	; 0x3058 <__floatsisf+0x40>
    302e:	f9 2f       	mov	r31, r25
    3030:	96 e9       	ldi	r25, 0x96	; 150
    3032:	bb 27       	eor	r27, r27
    3034:	93 95       	inc	r25
    3036:	f6 95       	lsr	r31
    3038:	87 95       	ror	r24
    303a:	77 95       	ror	r23
    303c:	67 95       	ror	r22
    303e:	b7 95       	ror	r27
    3040:	f1 11       	cpse	r31, r1
    3042:	f8 cf       	rjmp	.-16     	; 0x3034 <__floatsisf+0x1c>
    3044:	fa f4       	brpl	.+62     	; 0x3084 <__floatsisf+0x6c>
    3046:	bb 0f       	add	r27, r27
    3048:	11 f4       	brne	.+4      	; 0x304e <__floatsisf+0x36>
    304a:	60 ff       	sbrs	r22, 0
    304c:	1b c0       	rjmp	.+54     	; 0x3084 <__floatsisf+0x6c>
    304e:	6f 5f       	subi	r22, 0xFF	; 255
    3050:	7f 4f       	sbci	r23, 0xFF	; 255
    3052:	8f 4f       	sbci	r24, 0xFF	; 255
    3054:	9f 4f       	sbci	r25, 0xFF	; 255
    3056:	16 c0       	rjmp	.+44     	; 0x3084 <__floatsisf+0x6c>
    3058:	88 23       	and	r24, r24
    305a:	11 f0       	breq	.+4      	; 0x3060 <__floatsisf+0x48>
    305c:	96 e9       	ldi	r25, 0x96	; 150
    305e:	11 c0       	rjmp	.+34     	; 0x3082 <__floatsisf+0x6a>
    3060:	77 23       	and	r23, r23
    3062:	21 f0       	breq	.+8      	; 0x306c <__floatsisf+0x54>
    3064:	9e e8       	ldi	r25, 0x8E	; 142
    3066:	87 2f       	mov	r24, r23
    3068:	76 2f       	mov	r23, r22
    306a:	05 c0       	rjmp	.+10     	; 0x3076 <__floatsisf+0x5e>
    306c:	66 23       	and	r22, r22
    306e:	71 f0       	breq	.+28     	; 0x308c <__floatsisf+0x74>
    3070:	96 e8       	ldi	r25, 0x86	; 134
    3072:	86 2f       	mov	r24, r22
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	60 e0       	ldi	r22, 0x00	; 0
    3078:	2a f0       	brmi	.+10     	; 0x3084 <__floatsisf+0x6c>
    307a:	9a 95       	dec	r25
    307c:	66 0f       	add	r22, r22
    307e:	77 1f       	adc	r23, r23
    3080:	88 1f       	adc	r24, r24
    3082:	da f7       	brpl	.-10     	; 0x307a <__floatsisf+0x62>
    3084:	88 0f       	add	r24, r24
    3086:	96 95       	lsr	r25
    3088:	87 95       	ror	r24
    308a:	97 f9       	bld	r25, 7
    308c:	08 95       	ret

0000308e <__fp_cmp>:
    308e:	99 0f       	add	r25, r25
    3090:	00 08       	sbc	r0, r0
    3092:	55 0f       	add	r21, r21
    3094:	aa 0b       	sbc	r26, r26
    3096:	e0 e8       	ldi	r30, 0x80	; 128
    3098:	fe ef       	ldi	r31, 0xFE	; 254
    309a:	16 16       	cp	r1, r22
    309c:	17 06       	cpc	r1, r23
    309e:	e8 07       	cpc	r30, r24
    30a0:	f9 07       	cpc	r31, r25
    30a2:	c0 f0       	brcs	.+48     	; 0x30d4 <__fp_cmp+0x46>
    30a4:	12 16       	cp	r1, r18
    30a6:	13 06       	cpc	r1, r19
    30a8:	e4 07       	cpc	r30, r20
    30aa:	f5 07       	cpc	r31, r21
    30ac:	98 f0       	brcs	.+38     	; 0x30d4 <__fp_cmp+0x46>
    30ae:	62 1b       	sub	r22, r18
    30b0:	73 0b       	sbc	r23, r19
    30b2:	84 0b       	sbc	r24, r20
    30b4:	95 0b       	sbc	r25, r21
    30b6:	39 f4       	brne	.+14     	; 0x30c6 <__fp_cmp+0x38>
    30b8:	0a 26       	eor	r0, r26
    30ba:	61 f0       	breq	.+24     	; 0x30d4 <__fp_cmp+0x46>
    30bc:	23 2b       	or	r18, r19
    30be:	24 2b       	or	r18, r20
    30c0:	25 2b       	or	r18, r21
    30c2:	21 f4       	brne	.+8      	; 0x30cc <__fp_cmp+0x3e>
    30c4:	08 95       	ret
    30c6:	0a 26       	eor	r0, r26
    30c8:	09 f4       	brne	.+2      	; 0x30cc <__fp_cmp+0x3e>
    30ca:	a1 40       	sbci	r26, 0x01	; 1
    30cc:	a6 95       	lsr	r26
    30ce:	8f ef       	ldi	r24, 0xFF	; 255
    30d0:	81 1d       	adc	r24, r1
    30d2:	81 1d       	adc	r24, r1
    30d4:	08 95       	ret

000030d6 <__fp_inf>:
    30d6:	97 f9       	bld	r25, 7
    30d8:	9f 67       	ori	r25, 0x7F	; 127
    30da:	80 e8       	ldi	r24, 0x80	; 128
    30dc:	70 e0       	ldi	r23, 0x00	; 0
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	08 95       	ret

000030e2 <__fp_nan>:
    30e2:	9f ef       	ldi	r25, 0xFF	; 255
    30e4:	80 ec       	ldi	r24, 0xC0	; 192
    30e6:	08 95       	ret

000030e8 <__fp_pscA>:
    30e8:	00 24       	eor	r0, r0
    30ea:	0a 94       	dec	r0
    30ec:	16 16       	cp	r1, r22
    30ee:	17 06       	cpc	r1, r23
    30f0:	18 06       	cpc	r1, r24
    30f2:	09 06       	cpc	r0, r25
    30f4:	08 95       	ret

000030f6 <__fp_pscB>:
    30f6:	00 24       	eor	r0, r0
    30f8:	0a 94       	dec	r0
    30fa:	12 16       	cp	r1, r18
    30fc:	13 06       	cpc	r1, r19
    30fe:	14 06       	cpc	r1, r20
    3100:	05 06       	cpc	r0, r21
    3102:	08 95       	ret

00003104 <__fp_round>:
    3104:	09 2e       	mov	r0, r25
    3106:	03 94       	inc	r0
    3108:	00 0c       	add	r0, r0
    310a:	11 f4       	brne	.+4      	; 0x3110 <__fp_round+0xc>
    310c:	88 23       	and	r24, r24
    310e:	52 f0       	brmi	.+20     	; 0x3124 <__fp_round+0x20>
    3110:	bb 0f       	add	r27, r27
    3112:	40 f4       	brcc	.+16     	; 0x3124 <__fp_round+0x20>
    3114:	bf 2b       	or	r27, r31
    3116:	11 f4       	brne	.+4      	; 0x311c <__fp_round+0x18>
    3118:	60 ff       	sbrs	r22, 0
    311a:	04 c0       	rjmp	.+8      	; 0x3124 <__fp_round+0x20>
    311c:	6f 5f       	subi	r22, 0xFF	; 255
    311e:	7f 4f       	sbci	r23, 0xFF	; 255
    3120:	8f 4f       	sbci	r24, 0xFF	; 255
    3122:	9f 4f       	sbci	r25, 0xFF	; 255
    3124:	08 95       	ret

00003126 <__fp_split3>:
    3126:	57 fd       	sbrc	r21, 7
    3128:	90 58       	subi	r25, 0x80	; 128
    312a:	44 0f       	add	r20, r20
    312c:	55 1f       	adc	r21, r21
    312e:	59 f0       	breq	.+22     	; 0x3146 <__fp_splitA+0x10>
    3130:	5f 3f       	cpi	r21, 0xFF	; 255
    3132:	71 f0       	breq	.+28     	; 0x3150 <__fp_splitA+0x1a>
    3134:	47 95       	ror	r20

00003136 <__fp_splitA>:
    3136:	88 0f       	add	r24, r24
    3138:	97 fb       	bst	r25, 7
    313a:	99 1f       	adc	r25, r25
    313c:	61 f0       	breq	.+24     	; 0x3156 <__fp_splitA+0x20>
    313e:	9f 3f       	cpi	r25, 0xFF	; 255
    3140:	79 f0       	breq	.+30     	; 0x3160 <__fp_splitA+0x2a>
    3142:	87 95       	ror	r24
    3144:	08 95       	ret
    3146:	12 16       	cp	r1, r18
    3148:	13 06       	cpc	r1, r19
    314a:	14 06       	cpc	r1, r20
    314c:	55 1f       	adc	r21, r21
    314e:	f2 cf       	rjmp	.-28     	; 0x3134 <__fp_split3+0xe>
    3150:	46 95       	lsr	r20
    3152:	f1 df       	rcall	.-30     	; 0x3136 <__fp_splitA>
    3154:	08 c0       	rjmp	.+16     	; 0x3166 <__fp_splitA+0x30>
    3156:	16 16       	cp	r1, r22
    3158:	17 06       	cpc	r1, r23
    315a:	18 06       	cpc	r1, r24
    315c:	99 1f       	adc	r25, r25
    315e:	f1 cf       	rjmp	.-30     	; 0x3142 <__fp_splitA+0xc>
    3160:	86 95       	lsr	r24
    3162:	71 05       	cpc	r23, r1
    3164:	61 05       	cpc	r22, r1
    3166:	08 94       	sec
    3168:	08 95       	ret

0000316a <__fp_zero>:
    316a:	e8 94       	clt

0000316c <__fp_szero>:
    316c:	bb 27       	eor	r27, r27
    316e:	66 27       	eor	r22, r22
    3170:	77 27       	eor	r23, r23
    3172:	cb 01       	movw	r24, r22
    3174:	97 f9       	bld	r25, 7
    3176:	08 95       	ret

00003178 <__gesf2>:
    3178:	8a df       	rcall	.-236    	; 0x308e <__fp_cmp>
    317a:	08 f4       	brcc	.+2      	; 0x317e <__gesf2+0x6>
    317c:	8f ef       	ldi	r24, 0xFF	; 255
    317e:	08 95       	ret

00003180 <__mulsf3>:
    3180:	0b d0       	rcall	.+22     	; 0x3198 <__mulsf3x>
    3182:	c0 cf       	rjmp	.-128    	; 0x3104 <__fp_round>
    3184:	b1 df       	rcall	.-158    	; 0x30e8 <__fp_pscA>
    3186:	28 f0       	brcs	.+10     	; 0x3192 <__mulsf3+0x12>
    3188:	b6 df       	rcall	.-148    	; 0x30f6 <__fp_pscB>
    318a:	18 f0       	brcs	.+6      	; 0x3192 <__mulsf3+0x12>
    318c:	95 23       	and	r25, r21
    318e:	09 f0       	breq	.+2      	; 0x3192 <__mulsf3+0x12>
    3190:	a2 cf       	rjmp	.-188    	; 0x30d6 <__fp_inf>
    3192:	a7 cf       	rjmp	.-178    	; 0x30e2 <__fp_nan>
    3194:	11 24       	eor	r1, r1
    3196:	ea cf       	rjmp	.-44     	; 0x316c <__fp_szero>

00003198 <__mulsf3x>:
    3198:	c6 df       	rcall	.-116    	; 0x3126 <__fp_split3>
    319a:	a0 f3       	brcs	.-24     	; 0x3184 <__mulsf3+0x4>

0000319c <__mulsf3_pse>:
    319c:	95 9f       	mul	r25, r21
    319e:	d1 f3       	breq	.-12     	; 0x3194 <__mulsf3+0x14>
    31a0:	95 0f       	add	r25, r21
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	55 1f       	adc	r21, r21
    31a6:	62 9f       	mul	r22, r18
    31a8:	f0 01       	movw	r30, r0
    31aa:	72 9f       	mul	r23, r18
    31ac:	bb 27       	eor	r27, r27
    31ae:	f0 0d       	add	r31, r0
    31b0:	b1 1d       	adc	r27, r1
    31b2:	63 9f       	mul	r22, r19
    31b4:	aa 27       	eor	r26, r26
    31b6:	f0 0d       	add	r31, r0
    31b8:	b1 1d       	adc	r27, r1
    31ba:	aa 1f       	adc	r26, r26
    31bc:	64 9f       	mul	r22, r20
    31be:	66 27       	eor	r22, r22
    31c0:	b0 0d       	add	r27, r0
    31c2:	a1 1d       	adc	r26, r1
    31c4:	66 1f       	adc	r22, r22
    31c6:	82 9f       	mul	r24, r18
    31c8:	22 27       	eor	r18, r18
    31ca:	b0 0d       	add	r27, r0
    31cc:	a1 1d       	adc	r26, r1
    31ce:	62 1f       	adc	r22, r18
    31d0:	73 9f       	mul	r23, r19
    31d2:	b0 0d       	add	r27, r0
    31d4:	a1 1d       	adc	r26, r1
    31d6:	62 1f       	adc	r22, r18
    31d8:	83 9f       	mul	r24, r19
    31da:	a0 0d       	add	r26, r0
    31dc:	61 1d       	adc	r22, r1
    31de:	22 1f       	adc	r18, r18
    31e0:	74 9f       	mul	r23, r20
    31e2:	33 27       	eor	r19, r19
    31e4:	a0 0d       	add	r26, r0
    31e6:	61 1d       	adc	r22, r1
    31e8:	23 1f       	adc	r18, r19
    31ea:	84 9f       	mul	r24, r20
    31ec:	60 0d       	add	r22, r0
    31ee:	21 1d       	adc	r18, r1
    31f0:	82 2f       	mov	r24, r18
    31f2:	76 2f       	mov	r23, r22
    31f4:	6a 2f       	mov	r22, r26
    31f6:	11 24       	eor	r1, r1
    31f8:	9f 57       	subi	r25, 0x7F	; 127
    31fa:	50 40       	sbci	r21, 0x00	; 0
    31fc:	8a f0       	brmi	.+34     	; 0x3220 <__mulsf3_pse+0x84>
    31fe:	e1 f0       	breq	.+56     	; 0x3238 <__mulsf3_pse+0x9c>
    3200:	88 23       	and	r24, r24
    3202:	4a f0       	brmi	.+18     	; 0x3216 <__mulsf3_pse+0x7a>
    3204:	ee 0f       	add	r30, r30
    3206:	ff 1f       	adc	r31, r31
    3208:	bb 1f       	adc	r27, r27
    320a:	66 1f       	adc	r22, r22
    320c:	77 1f       	adc	r23, r23
    320e:	88 1f       	adc	r24, r24
    3210:	91 50       	subi	r25, 0x01	; 1
    3212:	50 40       	sbci	r21, 0x00	; 0
    3214:	a9 f7       	brne	.-22     	; 0x3200 <__mulsf3_pse+0x64>
    3216:	9e 3f       	cpi	r25, 0xFE	; 254
    3218:	51 05       	cpc	r21, r1
    321a:	70 f0       	brcs	.+28     	; 0x3238 <__mulsf3_pse+0x9c>
    321c:	5c cf       	rjmp	.-328    	; 0x30d6 <__fp_inf>
    321e:	a6 cf       	rjmp	.-180    	; 0x316c <__fp_szero>
    3220:	5f 3f       	cpi	r21, 0xFF	; 255
    3222:	ec f3       	brlt	.-6      	; 0x321e <__mulsf3_pse+0x82>
    3224:	98 3e       	cpi	r25, 0xE8	; 232
    3226:	dc f3       	brlt	.-10     	; 0x321e <__mulsf3_pse+0x82>
    3228:	86 95       	lsr	r24
    322a:	77 95       	ror	r23
    322c:	67 95       	ror	r22
    322e:	b7 95       	ror	r27
    3230:	f7 95       	ror	r31
    3232:	e7 95       	ror	r30
    3234:	9f 5f       	subi	r25, 0xFF	; 255
    3236:	c1 f7       	brne	.-16     	; 0x3228 <__mulsf3_pse+0x8c>
    3238:	fe 2b       	or	r31, r30
    323a:	88 0f       	add	r24, r24
    323c:	91 1d       	adc	r25, r1
    323e:	96 95       	lsr	r25
    3240:	87 95       	ror	r24
    3242:	97 f9       	bld	r25, 7
    3244:	08 95       	ret

00003246 <vfprintf>:
    3246:	2f 92       	push	r2
    3248:	3f 92       	push	r3
    324a:	4f 92       	push	r4
    324c:	5f 92       	push	r5
    324e:	6f 92       	push	r6
    3250:	7f 92       	push	r7
    3252:	8f 92       	push	r8
    3254:	9f 92       	push	r9
    3256:	af 92       	push	r10
    3258:	bf 92       	push	r11
    325a:	cf 92       	push	r12
    325c:	df 92       	push	r13
    325e:	ef 92       	push	r14
    3260:	ff 92       	push	r15
    3262:	0f 93       	push	r16
    3264:	1f 93       	push	r17
    3266:	cf 93       	push	r28
    3268:	df 93       	push	r29
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
    326e:	63 97       	sbiw	r28, 0x13	; 19
    3270:	cd bf       	out	0x3d, r28	; 61
    3272:	de bf       	out	0x3e, r29	; 62
    3274:	7c 01       	movw	r14, r24
    3276:	1b 01       	movw	r2, r22
    3278:	6a 01       	movw	r12, r20
    327a:	fc 01       	movw	r30, r24
    327c:	16 82       	std	Z+6, r1	; 0x06
    327e:	17 82       	std	Z+7, r1	; 0x07
    3280:	83 81       	ldd	r24, Z+3	; 0x03
    3282:	81 ff       	sbrs	r24, 1
    3284:	49 c3       	rjmp	.+1682   	; 0x3918 <vfprintf+0x6d2>
    3286:	be 01       	movw	r22, r28
    3288:	6f 5f       	subi	r22, 0xFF	; 255
    328a:	7f 4f       	sbci	r23, 0xFF	; 255
    328c:	4b 01       	movw	r8, r22
    328e:	f7 01       	movw	r30, r14
    3290:	93 81       	ldd	r25, Z+3	; 0x03
    3292:	f1 01       	movw	r30, r2
    3294:	93 fd       	sbrc	r25, 3
    3296:	85 91       	lpm	r24, Z+
    3298:	93 ff       	sbrs	r25, 3
    329a:	81 91       	ld	r24, Z+
    329c:	1f 01       	movw	r2, r30
    329e:	88 23       	and	r24, r24
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <vfprintf+0x5e>
    32a2:	36 c3       	rjmp	.+1644   	; 0x3910 <vfprintf+0x6ca>
    32a4:	85 32       	cpi	r24, 0x25	; 37
    32a6:	39 f4       	brne	.+14     	; 0x32b6 <vfprintf+0x70>
    32a8:	93 fd       	sbrc	r25, 3
    32aa:	85 91       	lpm	r24, Z+
    32ac:	93 ff       	sbrs	r25, 3
    32ae:	81 91       	ld	r24, Z+
    32b0:	1f 01       	movw	r2, r30
    32b2:	85 32       	cpi	r24, 0x25	; 37
    32b4:	31 f4       	brne	.+12     	; 0x32c2 <vfprintf+0x7c>
    32b6:	b7 01       	movw	r22, r14
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	cc d5       	rcall	.+2968   	; 0x3e54 <fputc>
    32bc:	56 01       	movw	r10, r12
    32be:	65 01       	movw	r12, r10
    32c0:	e6 cf       	rjmp	.-52     	; 0x328e <vfprintf+0x48>
    32c2:	10 e0       	ldi	r17, 0x00	; 0
    32c4:	51 2c       	mov	r5, r1
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	20 32       	cpi	r18, 0x20	; 32
    32ca:	a0 f4       	brcc	.+40     	; 0x32f4 <vfprintf+0xae>
    32cc:	8b 32       	cpi	r24, 0x2B	; 43
    32ce:	69 f0       	breq	.+26     	; 0x32ea <vfprintf+0xa4>
    32d0:	30 f4       	brcc	.+12     	; 0x32de <vfprintf+0x98>
    32d2:	80 32       	cpi	r24, 0x20	; 32
    32d4:	59 f0       	breq	.+22     	; 0x32ec <vfprintf+0xa6>
    32d6:	83 32       	cpi	r24, 0x23	; 35
    32d8:	69 f4       	brne	.+26     	; 0x32f4 <vfprintf+0xae>
    32da:	20 61       	ori	r18, 0x10	; 16
    32dc:	2c c0       	rjmp	.+88     	; 0x3336 <vfprintf+0xf0>
    32de:	8d 32       	cpi	r24, 0x2D	; 45
    32e0:	39 f0       	breq	.+14     	; 0x32f0 <vfprintf+0xaa>
    32e2:	80 33       	cpi	r24, 0x30	; 48
    32e4:	39 f4       	brne	.+14     	; 0x32f4 <vfprintf+0xae>
    32e6:	21 60       	ori	r18, 0x01	; 1
    32e8:	26 c0       	rjmp	.+76     	; 0x3336 <vfprintf+0xf0>
    32ea:	22 60       	ori	r18, 0x02	; 2
    32ec:	24 60       	ori	r18, 0x04	; 4
    32ee:	23 c0       	rjmp	.+70     	; 0x3336 <vfprintf+0xf0>
    32f0:	28 60       	ori	r18, 0x08	; 8
    32f2:	21 c0       	rjmp	.+66     	; 0x3336 <vfprintf+0xf0>
    32f4:	27 fd       	sbrc	r18, 7
    32f6:	27 c0       	rjmp	.+78     	; 0x3346 <vfprintf+0x100>
    32f8:	30 ed       	ldi	r19, 0xD0	; 208
    32fa:	38 0f       	add	r19, r24
    32fc:	3a 30       	cpi	r19, 0x0A	; 10
    32fe:	78 f4       	brcc	.+30     	; 0x331e <vfprintf+0xd8>
    3300:	26 ff       	sbrs	r18, 6
    3302:	06 c0       	rjmp	.+12     	; 0x3310 <vfprintf+0xca>
    3304:	fa e0       	ldi	r31, 0x0A	; 10
    3306:	1f 9f       	mul	r17, r31
    3308:	30 0d       	add	r19, r0
    330a:	11 24       	eor	r1, r1
    330c:	13 2f       	mov	r17, r19
    330e:	13 c0       	rjmp	.+38     	; 0x3336 <vfprintf+0xf0>
    3310:	6a e0       	ldi	r22, 0x0A	; 10
    3312:	56 9e       	mul	r5, r22
    3314:	30 0d       	add	r19, r0
    3316:	11 24       	eor	r1, r1
    3318:	53 2e       	mov	r5, r19
    331a:	20 62       	ori	r18, 0x20	; 32
    331c:	0c c0       	rjmp	.+24     	; 0x3336 <vfprintf+0xf0>
    331e:	8e 32       	cpi	r24, 0x2E	; 46
    3320:	21 f4       	brne	.+8      	; 0x332a <vfprintf+0xe4>
    3322:	26 fd       	sbrc	r18, 6
    3324:	f5 c2       	rjmp	.+1514   	; 0x3910 <vfprintf+0x6ca>
    3326:	20 64       	ori	r18, 0x40	; 64
    3328:	06 c0       	rjmp	.+12     	; 0x3336 <vfprintf+0xf0>
    332a:	8c 36       	cpi	r24, 0x6C	; 108
    332c:	11 f4       	brne	.+4      	; 0x3332 <vfprintf+0xec>
    332e:	20 68       	ori	r18, 0x80	; 128
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <vfprintf+0xf0>
    3332:	88 36       	cpi	r24, 0x68	; 104
    3334:	41 f4       	brne	.+16     	; 0x3346 <vfprintf+0x100>
    3336:	f1 01       	movw	r30, r2
    3338:	93 fd       	sbrc	r25, 3
    333a:	85 91       	lpm	r24, Z+
    333c:	93 ff       	sbrs	r25, 3
    333e:	81 91       	ld	r24, Z+
    3340:	1f 01       	movw	r2, r30
    3342:	81 11       	cpse	r24, r1
    3344:	c1 cf       	rjmp	.-126    	; 0x32c8 <vfprintf+0x82>
    3346:	9b eb       	ldi	r25, 0xBB	; 187
    3348:	98 0f       	add	r25, r24
    334a:	93 30       	cpi	r25, 0x03	; 3
    334c:	18 f4       	brcc	.+6      	; 0x3354 <vfprintf+0x10e>
    334e:	20 61       	ori	r18, 0x10	; 16
    3350:	80 5e       	subi	r24, 0xE0	; 224
    3352:	06 c0       	rjmp	.+12     	; 0x3360 <vfprintf+0x11a>
    3354:	9b e9       	ldi	r25, 0x9B	; 155
    3356:	98 0f       	add	r25, r24
    3358:	93 30       	cpi	r25, 0x03	; 3
    335a:	08 f0       	brcs	.+2      	; 0x335e <vfprintf+0x118>
    335c:	9a c1       	rjmp	.+820    	; 0x3692 <vfprintf+0x44c>
    335e:	2f 7e       	andi	r18, 0xEF	; 239
    3360:	26 ff       	sbrs	r18, 6
    3362:	16 e0       	ldi	r17, 0x06	; 6
    3364:	2f 73       	andi	r18, 0x3F	; 63
    3366:	72 2e       	mov	r7, r18
    3368:	85 36       	cpi	r24, 0x65	; 101
    336a:	21 f4       	brne	.+8      	; 0x3374 <vfprintf+0x12e>
    336c:	f2 2f       	mov	r31, r18
    336e:	f0 64       	ori	r31, 0x40	; 64
    3370:	7f 2e       	mov	r7, r31
    3372:	08 c0       	rjmp	.+16     	; 0x3384 <vfprintf+0x13e>
    3374:	86 36       	cpi	r24, 0x66	; 102
    3376:	21 f4       	brne	.+8      	; 0x3380 <vfprintf+0x13a>
    3378:	62 2f       	mov	r22, r18
    337a:	60 68       	ori	r22, 0x80	; 128
    337c:	76 2e       	mov	r7, r22
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <vfprintf+0x13e>
    3380:	11 11       	cpse	r17, r1
    3382:	11 50       	subi	r17, 0x01	; 1
    3384:	77 fe       	sbrs	r7, 7
    3386:	07 c0       	rjmp	.+14     	; 0x3396 <vfprintf+0x150>
    3388:	1c 33       	cpi	r17, 0x3C	; 60
    338a:	48 f4       	brcc	.+18     	; 0x339e <vfprintf+0x158>
    338c:	44 24       	eor	r4, r4
    338e:	43 94       	inc	r4
    3390:	41 0e       	add	r4, r17
    3392:	27 e0       	ldi	r18, 0x07	; 7
    3394:	0b c0       	rjmp	.+22     	; 0x33ac <vfprintf+0x166>
    3396:	18 30       	cpi	r17, 0x08	; 8
    3398:	30 f4       	brcc	.+12     	; 0x33a6 <vfprintf+0x160>
    339a:	21 2f       	mov	r18, r17
    339c:	06 c0       	rjmp	.+12     	; 0x33aa <vfprintf+0x164>
    339e:	27 e0       	ldi	r18, 0x07	; 7
    33a0:	4c e3       	ldi	r20, 0x3C	; 60
    33a2:	44 2e       	mov	r4, r20
    33a4:	03 c0       	rjmp	.+6      	; 0x33ac <vfprintf+0x166>
    33a6:	27 e0       	ldi	r18, 0x07	; 7
    33a8:	17 e0       	ldi	r17, 0x07	; 7
    33aa:	41 2c       	mov	r4, r1
    33ac:	56 01       	movw	r10, r12
    33ae:	74 e0       	ldi	r23, 0x04	; 4
    33b0:	a7 0e       	add	r10, r23
    33b2:	b1 1c       	adc	r11, r1
    33b4:	f6 01       	movw	r30, r12
    33b6:	60 81       	ld	r22, Z
    33b8:	71 81       	ldd	r23, Z+1	; 0x01
    33ba:	82 81       	ldd	r24, Z+2	; 0x02
    33bc:	93 81       	ldd	r25, Z+3	; 0x03
    33be:	04 2d       	mov	r16, r4
    33c0:	a4 01       	movw	r20, r8
    33c2:	3f d4       	rcall	.+2174   	; 0x3c42 <__ftoa_engine>
    33c4:	6c 01       	movw	r12, r24
    33c6:	09 81       	ldd	r16, Y+1	; 0x01
    33c8:	00 ff       	sbrs	r16, 0
    33ca:	02 c0       	rjmp	.+4      	; 0x33d0 <vfprintf+0x18a>
    33cc:	03 ff       	sbrs	r16, 3
    33ce:	06 c0       	rjmp	.+12     	; 0x33dc <vfprintf+0x196>
    33d0:	71 fc       	sbrc	r7, 1
    33d2:	07 c0       	rjmp	.+14     	; 0x33e2 <vfprintf+0x19c>
    33d4:	72 fc       	sbrc	r7, 2
    33d6:	08 c0       	rjmp	.+16     	; 0x33e8 <vfprintf+0x1a2>
    33d8:	61 2c       	mov	r6, r1
    33da:	08 c0       	rjmp	.+16     	; 0x33ec <vfprintf+0x1a6>
    33dc:	3d e2       	ldi	r19, 0x2D	; 45
    33de:	63 2e       	mov	r6, r19
    33e0:	05 c0       	rjmp	.+10     	; 0x33ec <vfprintf+0x1a6>
    33e2:	2b e2       	ldi	r18, 0x2B	; 43
    33e4:	62 2e       	mov	r6, r18
    33e6:	02 c0       	rjmp	.+4      	; 0x33ec <vfprintf+0x1a6>
    33e8:	90 e2       	ldi	r25, 0x20	; 32
    33ea:	69 2e       	mov	r6, r25
    33ec:	80 2f       	mov	r24, r16
    33ee:	8c 70       	andi	r24, 0x0C	; 12
    33f0:	81 f1       	breq	.+96     	; 0x3452 <vfprintf+0x20c>
    33f2:	66 20       	and	r6, r6
    33f4:	11 f0       	breq	.+4      	; 0x33fa <vfprintf+0x1b4>
    33f6:	84 e0       	ldi	r24, 0x04	; 4
    33f8:	01 c0       	rjmp	.+2      	; 0x33fc <vfprintf+0x1b6>
    33fa:	83 e0       	ldi	r24, 0x03	; 3
    33fc:	85 15       	cp	r24, r5
    33fe:	10 f0       	brcs	.+4      	; 0x3404 <vfprintf+0x1be>
    3400:	51 2c       	mov	r5, r1
    3402:	0a c0       	rjmp	.+20     	; 0x3418 <vfprintf+0x1d2>
    3404:	58 1a       	sub	r5, r24
    3406:	73 fc       	sbrc	r7, 3
    3408:	07 c0       	rjmp	.+14     	; 0x3418 <vfprintf+0x1d2>
    340a:	b7 01       	movw	r22, r14
    340c:	80 e2       	ldi	r24, 0x20	; 32
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	21 d5       	rcall	.+2626   	; 0x3e54 <fputc>
    3412:	5a 94       	dec	r5
    3414:	d1 f7       	brne	.-12     	; 0x340a <vfprintf+0x1c4>
    3416:	f4 cf       	rjmp	.-24     	; 0x3400 <vfprintf+0x1ba>
    3418:	66 20       	and	r6, r6
    341a:	21 f0       	breq	.+8      	; 0x3424 <vfprintf+0x1de>
    341c:	b7 01       	movw	r22, r14
    341e:	86 2d       	mov	r24, r6
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	18 d5       	rcall	.+2608   	; 0x3e54 <fputc>
    3424:	03 fd       	sbrc	r16, 3
    3426:	03 c0       	rjmp	.+6      	; 0x342e <vfprintf+0x1e8>
    3428:	02 e2       	ldi	r16, 0x22	; 34
    342a:	12 e0       	ldi	r17, 0x02	; 2
    342c:	02 c0       	rjmp	.+4      	; 0x3432 <vfprintf+0x1ec>
    342e:	0e e1       	ldi	r16, 0x1E	; 30
    3430:	12 e0       	ldi	r17, 0x02	; 2
    3432:	f7 2d       	mov	r31, r7
    3434:	f0 71       	andi	r31, 0x10	; 16
    3436:	7f 2e       	mov	r7, r31
    3438:	f8 01       	movw	r30, r16
    343a:	84 91       	lpm	r24, Z
    343c:	88 23       	and	r24, r24
    343e:	09 f4       	brne	.+2      	; 0x3442 <vfprintf+0x1fc>
    3440:	5e c2       	rjmp	.+1212   	; 0x38fe <vfprintf+0x6b8>
    3442:	71 10       	cpse	r7, r1
    3444:	80 52       	subi	r24, 0x20	; 32
    3446:	b7 01       	movw	r22, r14
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	04 d5       	rcall	.+2568   	; 0x3e54 <fputc>
    344c:	0f 5f       	subi	r16, 0xFF	; 255
    344e:	1f 4f       	sbci	r17, 0xFF	; 255
    3450:	f3 cf       	rjmp	.-26     	; 0x3438 <vfprintf+0x1f2>
    3452:	77 fe       	sbrs	r7, 7
    3454:	0f c0       	rjmp	.+30     	; 0x3474 <vfprintf+0x22e>
    3456:	4c 0c       	add	r4, r12
    3458:	04 ff       	sbrs	r16, 4
    345a:	04 c0       	rjmp	.+8      	; 0x3464 <vfprintf+0x21e>
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	81 33       	cpi	r24, 0x31	; 49
    3460:	09 f4       	brne	.+2      	; 0x3464 <vfprintf+0x21e>
    3462:	4a 94       	dec	r4
    3464:	14 14       	cp	r1, r4
    3466:	74 f5       	brge	.+92     	; 0x34c4 <vfprintf+0x27e>
    3468:	f8 e0       	ldi	r31, 0x08	; 8
    346a:	f4 15       	cp	r31, r4
    346c:	78 f5       	brcc	.+94     	; 0x34cc <vfprintf+0x286>
    346e:	88 e0       	ldi	r24, 0x08	; 8
    3470:	48 2e       	mov	r4, r24
    3472:	2c c0       	rjmp	.+88     	; 0x34cc <vfprintf+0x286>
    3474:	76 fc       	sbrc	r7, 6
    3476:	2a c0       	rjmp	.+84     	; 0x34cc <vfprintf+0x286>
    3478:	81 2f       	mov	r24, r17
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	8c 15       	cp	r24, r12
    347e:	9d 05       	cpc	r25, r13
    3480:	9c f0       	brlt	.+38     	; 0x34a8 <vfprintf+0x262>
    3482:	6c ef       	ldi	r22, 0xFC	; 252
    3484:	c6 16       	cp	r12, r22
    3486:	6f ef       	ldi	r22, 0xFF	; 255
    3488:	d6 06       	cpc	r13, r22
    348a:	74 f0       	brlt	.+28     	; 0x34a8 <vfprintf+0x262>
    348c:	77 2d       	mov	r23, r7
    348e:	70 68       	ori	r23, 0x80	; 128
    3490:	77 2e       	mov	r7, r23
    3492:	0a c0       	rjmp	.+20     	; 0x34a8 <vfprintf+0x262>
    3494:	e2 e0       	ldi	r30, 0x02	; 2
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	ec 0f       	add	r30, r28
    349a:	fd 1f       	adc	r31, r29
    349c:	e1 0f       	add	r30, r17
    349e:	f1 1d       	adc	r31, r1
    34a0:	80 81       	ld	r24, Z
    34a2:	80 33       	cpi	r24, 0x30	; 48
    34a4:	19 f4       	brne	.+6      	; 0x34ac <vfprintf+0x266>
    34a6:	11 50       	subi	r17, 0x01	; 1
    34a8:	11 11       	cpse	r17, r1
    34aa:	f4 cf       	rjmp	.-24     	; 0x3494 <vfprintf+0x24e>
    34ac:	77 fe       	sbrs	r7, 7
    34ae:	0e c0       	rjmp	.+28     	; 0x34cc <vfprintf+0x286>
    34b0:	44 24       	eor	r4, r4
    34b2:	43 94       	inc	r4
    34b4:	41 0e       	add	r4, r17
    34b6:	81 2f       	mov	r24, r17
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	c8 16       	cp	r12, r24
    34bc:	d9 06       	cpc	r13, r25
    34be:	2c f4       	brge	.+10     	; 0x34ca <vfprintf+0x284>
    34c0:	1c 19       	sub	r17, r12
    34c2:	04 c0       	rjmp	.+8      	; 0x34cc <vfprintf+0x286>
    34c4:	44 24       	eor	r4, r4
    34c6:	43 94       	inc	r4
    34c8:	01 c0       	rjmp	.+2      	; 0x34cc <vfprintf+0x286>
    34ca:	10 e0       	ldi	r17, 0x00	; 0
    34cc:	77 fe       	sbrs	r7, 7
    34ce:	07 c0       	rjmp	.+14     	; 0x34de <vfprintf+0x298>
    34d0:	1c 14       	cp	r1, r12
    34d2:	1d 04       	cpc	r1, r13
    34d4:	3c f4       	brge	.+14     	; 0x34e4 <vfprintf+0x29e>
    34d6:	96 01       	movw	r18, r12
    34d8:	2f 5f       	subi	r18, 0xFF	; 255
    34da:	3f 4f       	sbci	r19, 0xFF	; 255
    34dc:	05 c0       	rjmp	.+10     	; 0x34e8 <vfprintf+0x2a2>
    34de:	25 e0       	ldi	r18, 0x05	; 5
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	02 c0       	rjmp	.+4      	; 0x34e8 <vfprintf+0x2a2>
    34e4:	21 e0       	ldi	r18, 0x01	; 1
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	66 20       	and	r6, r6
    34ea:	11 f0       	breq	.+4      	; 0x34f0 <vfprintf+0x2aa>
    34ec:	2f 5f       	subi	r18, 0xFF	; 255
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	11 23       	and	r17, r17
    34f2:	31 f0       	breq	.+12     	; 0x3500 <vfprintf+0x2ba>
    34f4:	41 2f       	mov	r20, r17
    34f6:	50 e0       	ldi	r21, 0x00	; 0
    34f8:	4f 5f       	subi	r20, 0xFF	; 255
    34fa:	5f 4f       	sbci	r21, 0xFF	; 255
    34fc:	24 0f       	add	r18, r20
    34fe:	35 1f       	adc	r19, r21
    3500:	45 2d       	mov	r20, r5
    3502:	50 e0       	ldi	r21, 0x00	; 0
    3504:	24 17       	cp	r18, r20
    3506:	35 07       	cpc	r19, r21
    3508:	14 f4       	brge	.+4      	; 0x350e <vfprintf+0x2c8>
    350a:	52 1a       	sub	r5, r18
    350c:	01 c0       	rjmp	.+2      	; 0x3510 <vfprintf+0x2ca>
    350e:	51 2c       	mov	r5, r1
    3510:	87 2d       	mov	r24, r7
    3512:	89 70       	andi	r24, 0x09	; 9
    3514:	41 f4       	brne	.+16     	; 0x3526 <vfprintf+0x2e0>
    3516:	55 20       	and	r5, r5
    3518:	31 f0       	breq	.+12     	; 0x3526 <vfprintf+0x2e0>
    351a:	b7 01       	movw	r22, r14
    351c:	80 e2       	ldi	r24, 0x20	; 32
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	99 d4       	rcall	.+2354   	; 0x3e54 <fputc>
    3522:	5a 94       	dec	r5
    3524:	f8 cf       	rjmp	.-16     	; 0x3516 <vfprintf+0x2d0>
    3526:	66 20       	and	r6, r6
    3528:	21 f0       	breq	.+8      	; 0x3532 <vfprintf+0x2ec>
    352a:	b7 01       	movw	r22, r14
    352c:	86 2d       	mov	r24, r6
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	91 d4       	rcall	.+2338   	; 0x3e54 <fputc>
    3532:	73 fc       	sbrc	r7, 3
    3534:	08 c0       	rjmp	.+16     	; 0x3546 <vfprintf+0x300>
    3536:	55 20       	and	r5, r5
    3538:	31 f0       	breq	.+12     	; 0x3546 <vfprintf+0x300>
    353a:	b7 01       	movw	r22, r14
    353c:	80 e3       	ldi	r24, 0x30	; 48
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	89 d4       	rcall	.+2322   	; 0x3e54 <fputc>
    3542:	5a 94       	dec	r5
    3544:	f8 cf       	rjmp	.-16     	; 0x3536 <vfprintf+0x2f0>
    3546:	77 fe       	sbrs	r7, 7
    3548:	5d c0       	rjmp	.+186    	; 0x3604 <vfprintf+0x3be>
    354a:	9c 2d       	mov	r25, r12
    354c:	8d 2d       	mov	r24, r13
    354e:	d7 fe       	sbrs	r13, 7
    3550:	02 c0       	rjmp	.+4      	; 0x3556 <vfprintf+0x310>
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	69 2e       	mov	r6, r25
    3558:	78 2e       	mov	r7, r24
    355a:	40 e0       	ldi	r20, 0x00	; 0
    355c:	50 e0       	ldi	r21, 0x00	; 0
    355e:	c6 01       	movw	r24, r12
    3560:	84 19       	sub	r24, r4
    3562:	91 09       	sbc	r25, r1
    3564:	8c 87       	std	Y+12, r24	; 0x0c
    3566:	9d 87       	std	Y+13, r25	; 0x0d
    3568:	96 01       	movw	r18, r12
    356a:	26 19       	sub	r18, r6
    356c:	37 09       	sbc	r19, r7
    356e:	28 0d       	add	r18, r8
    3570:	39 1d       	adc	r19, r9
    3572:	81 2f       	mov	r24, r17
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	ee 27       	eor	r30, r30
    3578:	ff 27       	eor	r31, r31
    357a:	e8 1b       	sub	r30, r24
    357c:	f9 0b       	sbc	r31, r25
    357e:	ee 87       	std	Y+14, r30	; 0x0e
    3580:	ff 87       	std	Y+15, r31	; 0x0f
    3582:	ff ef       	ldi	r31, 0xFF	; 255
    3584:	6f 16       	cp	r6, r31
    3586:	7f 06       	cpc	r7, r31
    3588:	61 f4       	brne	.+24     	; 0x35a2 <vfprintf+0x35c>
    358a:	b7 01       	movw	r22, r14
    358c:	8e e2       	ldi	r24, 0x2E	; 46
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	2b 8b       	std	Y+19, r18	; 0x13
    3592:	3a 8b       	std	Y+18, r19	; 0x12
    3594:	48 8b       	std	Y+16, r20	; 0x10
    3596:	59 8b       	std	Y+17, r21	; 0x11
    3598:	5d d4       	rcall	.+2234   	; 0x3e54 <fputc>
    359a:	59 89       	ldd	r21, Y+17	; 0x11
    359c:	48 89       	ldd	r20, Y+16	; 0x10
    359e:	3a 89       	ldd	r19, Y+18	; 0x12
    35a0:	2b 89       	ldd	r18, Y+19	; 0x13
    35a2:	c6 14       	cp	r12, r6
    35a4:	d7 04       	cpc	r13, r7
    35a6:	54 f0       	brlt	.+20     	; 0x35bc <vfprintf+0x376>
    35a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    35aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    35ac:	66 15       	cp	r22, r6
    35ae:	77 05       	cpc	r23, r7
    35b0:	2c f4       	brge	.+10     	; 0x35bc <vfprintf+0x376>
    35b2:	f9 01       	movw	r30, r18
    35b4:	e4 0f       	add	r30, r20
    35b6:	f5 1f       	adc	r31, r21
    35b8:	81 81       	ldd	r24, Z+1	; 0x01
    35ba:	01 c0       	rjmp	.+2      	; 0x35be <vfprintf+0x378>
    35bc:	80 e3       	ldi	r24, 0x30	; 48
    35be:	71 e0       	ldi	r23, 0x01	; 1
    35c0:	67 1a       	sub	r6, r23
    35c2:	71 08       	sbc	r7, r1
    35c4:	4f 5f       	subi	r20, 0xFF	; 255
    35c6:	5f 4f       	sbci	r21, 0xFF	; 255
    35c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    35ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    35cc:	6e 16       	cp	r6, r30
    35ce:	7f 06       	cpc	r7, r31
    35d0:	64 f0       	brlt	.+24     	; 0x35ea <vfprintf+0x3a4>
    35d2:	b7 01       	movw	r22, r14
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	2b 8b       	std	Y+19, r18	; 0x13
    35d8:	3a 8b       	std	Y+18, r19	; 0x12
    35da:	48 8b       	std	Y+16, r20	; 0x10
    35dc:	59 8b       	std	Y+17, r21	; 0x11
    35de:	3a d4       	rcall	.+2164   	; 0x3e54 <fputc>
    35e0:	2b 89       	ldd	r18, Y+19	; 0x13
    35e2:	3a 89       	ldd	r19, Y+18	; 0x12
    35e4:	48 89       	ldd	r20, Y+16	; 0x10
    35e6:	59 89       	ldd	r21, Y+17	; 0x11
    35e8:	cc cf       	rjmp	.-104    	; 0x3582 <vfprintf+0x33c>
    35ea:	6c 14       	cp	r6, r12
    35ec:	7d 04       	cpc	r7, r13
    35ee:	39 f4       	brne	.+14     	; 0x35fe <vfprintf+0x3b8>
    35f0:	9a 81       	ldd	r25, Y+2	; 0x02
    35f2:	96 33       	cpi	r25, 0x36	; 54
    35f4:	18 f4       	brcc	.+6      	; 0x35fc <vfprintf+0x3b6>
    35f6:	95 33       	cpi	r25, 0x35	; 53
    35f8:	11 f4       	brne	.+4      	; 0x35fe <vfprintf+0x3b8>
    35fa:	04 ff       	sbrs	r16, 4
    35fc:	81 e3       	ldi	r24, 0x31	; 49
    35fe:	b7 01       	movw	r22, r14
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	45 c0       	rjmp	.+138    	; 0x368e <vfprintf+0x448>
    3604:	8a 81       	ldd	r24, Y+2	; 0x02
    3606:	81 33       	cpi	r24, 0x31	; 49
    3608:	09 f0       	breq	.+2      	; 0x360c <vfprintf+0x3c6>
    360a:	0f 7e       	andi	r16, 0xEF	; 239
    360c:	b7 01       	movw	r22, r14
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	21 d4       	rcall	.+2114   	; 0x3e54 <fputc>
    3612:	11 11       	cpse	r17, r1
    3614:	05 c0       	rjmp	.+10     	; 0x3620 <vfprintf+0x3da>
    3616:	74 fe       	sbrs	r7, 4
    3618:	16 c0       	rjmp	.+44     	; 0x3646 <vfprintf+0x400>
    361a:	85 e4       	ldi	r24, 0x45	; 69
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	15 c0       	rjmp	.+42     	; 0x364a <vfprintf+0x404>
    3620:	b7 01       	movw	r22, r14
    3622:	8e e2       	ldi	r24, 0x2E	; 46
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	16 d4       	rcall	.+2092   	; 0x3e54 <fputc>
    3628:	82 e0       	ldi	r24, 0x02	; 2
    362a:	66 24       	eor	r6, r6
    362c:	63 94       	inc	r6
    362e:	68 0e       	add	r6, r24
    3630:	f4 01       	movw	r30, r8
    3632:	e8 0f       	add	r30, r24
    3634:	f1 1d       	adc	r31, r1
    3636:	80 81       	ld	r24, Z
    3638:	b7 01       	movw	r22, r14
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	0b d4       	rcall	.+2070   	; 0x3e54 <fputc>
    363e:	11 50       	subi	r17, 0x01	; 1
    3640:	51 f3       	breq	.-44     	; 0x3616 <vfprintf+0x3d0>
    3642:	86 2d       	mov	r24, r6
    3644:	f2 cf       	rjmp	.-28     	; 0x362a <vfprintf+0x3e4>
    3646:	85 e6       	ldi	r24, 0x65	; 101
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	b7 01       	movw	r22, r14
    364c:	03 d4       	rcall	.+2054   	; 0x3e54 <fputc>
    364e:	d7 fc       	sbrc	r13, 7
    3650:	05 c0       	rjmp	.+10     	; 0x365c <vfprintf+0x416>
    3652:	c1 14       	cp	r12, r1
    3654:	d1 04       	cpc	r13, r1
    3656:	39 f4       	brne	.+14     	; 0x3666 <vfprintf+0x420>
    3658:	04 ff       	sbrs	r16, 4
    365a:	05 c0       	rjmp	.+10     	; 0x3666 <vfprintf+0x420>
    365c:	d1 94       	neg	r13
    365e:	c1 94       	neg	r12
    3660:	d1 08       	sbc	r13, r1
    3662:	8d e2       	ldi	r24, 0x2D	; 45
    3664:	01 c0       	rjmp	.+2      	; 0x3668 <vfprintf+0x422>
    3666:	8b e2       	ldi	r24, 0x2B	; 43
    3668:	b7 01       	movw	r22, r14
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	f3 d3       	rcall	.+2022   	; 0x3e54 <fputc>
    366e:	80 e3       	ldi	r24, 0x30	; 48
    3670:	6a e0       	ldi	r22, 0x0A	; 10
    3672:	c6 16       	cp	r12, r22
    3674:	d1 04       	cpc	r13, r1
    3676:	2c f0       	brlt	.+10     	; 0x3682 <vfprintf+0x43c>
    3678:	8f 5f       	subi	r24, 0xFF	; 255
    367a:	fa e0       	ldi	r31, 0x0A	; 10
    367c:	cf 1a       	sub	r12, r31
    367e:	d1 08       	sbc	r13, r1
    3680:	f7 cf       	rjmp	.-18     	; 0x3670 <vfprintf+0x42a>
    3682:	b7 01       	movw	r22, r14
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	e6 d3       	rcall	.+1996   	; 0x3e54 <fputc>
    3688:	b7 01       	movw	r22, r14
    368a:	c6 01       	movw	r24, r12
    368c:	c0 96       	adiw	r24, 0x30	; 48
    368e:	e2 d3       	rcall	.+1988   	; 0x3e54 <fputc>
    3690:	36 c1       	rjmp	.+620    	; 0x38fe <vfprintf+0x6b8>
    3692:	83 36       	cpi	r24, 0x63	; 99
    3694:	31 f0       	breq	.+12     	; 0x36a2 <vfprintf+0x45c>
    3696:	83 37       	cpi	r24, 0x73	; 115
    3698:	79 f0       	breq	.+30     	; 0x36b8 <vfprintf+0x472>
    369a:	83 35       	cpi	r24, 0x53	; 83
    369c:	09 f0       	breq	.+2      	; 0x36a0 <vfprintf+0x45a>
    369e:	54 c0       	rjmp	.+168    	; 0x3748 <vfprintf+0x502>
    36a0:	20 c0       	rjmp	.+64     	; 0x36e2 <vfprintf+0x49c>
    36a2:	56 01       	movw	r10, r12
    36a4:	72 e0       	ldi	r23, 0x02	; 2
    36a6:	a7 0e       	add	r10, r23
    36a8:	b1 1c       	adc	r11, r1
    36aa:	f6 01       	movw	r30, r12
    36ac:	80 81       	ld	r24, Z
    36ae:	89 83       	std	Y+1, r24	; 0x01
    36b0:	01 e0       	ldi	r16, 0x01	; 1
    36b2:	10 e0       	ldi	r17, 0x00	; 0
    36b4:	64 01       	movw	r12, r8
    36b6:	13 c0       	rjmp	.+38     	; 0x36de <vfprintf+0x498>
    36b8:	56 01       	movw	r10, r12
    36ba:	f2 e0       	ldi	r31, 0x02	; 2
    36bc:	af 0e       	add	r10, r31
    36be:	b1 1c       	adc	r11, r1
    36c0:	f6 01       	movw	r30, r12
    36c2:	c0 80       	ld	r12, Z
    36c4:	d1 80       	ldd	r13, Z+1	; 0x01
    36c6:	26 ff       	sbrs	r18, 6
    36c8:	03 c0       	rjmp	.+6      	; 0x36d0 <vfprintf+0x48a>
    36ca:	61 2f       	mov	r22, r17
    36cc:	70 e0       	ldi	r23, 0x00	; 0
    36ce:	02 c0       	rjmp	.+4      	; 0x36d4 <vfprintf+0x48e>
    36d0:	6f ef       	ldi	r22, 0xFF	; 255
    36d2:	7f ef       	ldi	r23, 0xFF	; 255
    36d4:	c6 01       	movw	r24, r12
    36d6:	2b 8b       	std	Y+19, r18	; 0x13
    36d8:	b2 d3       	rcall	.+1892   	; 0x3e3e <strnlen>
    36da:	8c 01       	movw	r16, r24
    36dc:	2b 89       	ldd	r18, Y+19	; 0x13
    36de:	2f 77       	andi	r18, 0x7F	; 127
    36e0:	14 c0       	rjmp	.+40     	; 0x370a <vfprintf+0x4c4>
    36e2:	56 01       	movw	r10, r12
    36e4:	f2 e0       	ldi	r31, 0x02	; 2
    36e6:	af 0e       	add	r10, r31
    36e8:	b1 1c       	adc	r11, r1
    36ea:	f6 01       	movw	r30, r12
    36ec:	c0 80       	ld	r12, Z
    36ee:	d1 80       	ldd	r13, Z+1	; 0x01
    36f0:	26 ff       	sbrs	r18, 6
    36f2:	03 c0       	rjmp	.+6      	; 0x36fa <vfprintf+0x4b4>
    36f4:	61 2f       	mov	r22, r17
    36f6:	70 e0       	ldi	r23, 0x00	; 0
    36f8:	02 c0       	rjmp	.+4      	; 0x36fe <vfprintf+0x4b8>
    36fa:	6f ef       	ldi	r22, 0xFF	; 255
    36fc:	7f ef       	ldi	r23, 0xFF	; 255
    36fe:	c6 01       	movw	r24, r12
    3700:	2b 8b       	std	Y+19, r18	; 0x13
    3702:	77 d3       	rcall	.+1774   	; 0x3df2 <strnlen_P>
    3704:	8c 01       	movw	r16, r24
    3706:	2b 89       	ldd	r18, Y+19	; 0x13
    3708:	20 68       	ori	r18, 0x80	; 128
    370a:	72 2e       	mov	r7, r18
    370c:	23 fd       	sbrc	r18, 3
    370e:	18 c0       	rjmp	.+48     	; 0x3740 <vfprintf+0x4fa>
    3710:	85 2d       	mov	r24, r5
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	08 17       	cp	r16, r24
    3716:	19 07       	cpc	r17, r25
    3718:	98 f4       	brcc	.+38     	; 0x3740 <vfprintf+0x4fa>
    371a:	b7 01       	movw	r22, r14
    371c:	80 e2       	ldi	r24, 0x20	; 32
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	99 d3       	rcall	.+1842   	; 0x3e54 <fputc>
    3722:	5a 94       	dec	r5
    3724:	f5 cf       	rjmp	.-22     	; 0x3710 <vfprintf+0x4ca>
    3726:	f6 01       	movw	r30, r12
    3728:	77 fc       	sbrc	r7, 7
    372a:	85 91       	lpm	r24, Z+
    372c:	77 fe       	sbrs	r7, 7
    372e:	81 91       	ld	r24, Z+
    3730:	6f 01       	movw	r12, r30
    3732:	b7 01       	movw	r22, r14
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	8e d3       	rcall	.+1820   	; 0x3e54 <fputc>
    3738:	51 10       	cpse	r5, r1
    373a:	5a 94       	dec	r5
    373c:	01 50       	subi	r16, 0x01	; 1
    373e:	11 09       	sbc	r17, r1
    3740:	01 15       	cp	r16, r1
    3742:	11 05       	cpc	r17, r1
    3744:	81 f7       	brne	.-32     	; 0x3726 <vfprintf+0x4e0>
    3746:	db c0       	rjmp	.+438    	; 0x38fe <vfprintf+0x6b8>
    3748:	84 36       	cpi	r24, 0x64	; 100
    374a:	11 f0       	breq	.+4      	; 0x3750 <vfprintf+0x50a>
    374c:	89 36       	cpi	r24, 0x69	; 105
    374e:	49 f5       	brne	.+82     	; 0x37a2 <vfprintf+0x55c>
    3750:	56 01       	movw	r10, r12
    3752:	27 ff       	sbrs	r18, 7
    3754:	09 c0       	rjmp	.+18     	; 0x3768 <vfprintf+0x522>
    3756:	f4 e0       	ldi	r31, 0x04	; 4
    3758:	af 0e       	add	r10, r31
    375a:	b1 1c       	adc	r11, r1
    375c:	f6 01       	movw	r30, r12
    375e:	60 81       	ld	r22, Z
    3760:	71 81       	ldd	r23, Z+1	; 0x01
    3762:	82 81       	ldd	r24, Z+2	; 0x02
    3764:	93 81       	ldd	r25, Z+3	; 0x03
    3766:	0a c0       	rjmp	.+20     	; 0x377c <vfprintf+0x536>
    3768:	f2 e0       	ldi	r31, 0x02	; 2
    376a:	af 0e       	add	r10, r31
    376c:	b1 1c       	adc	r11, r1
    376e:	f6 01       	movw	r30, r12
    3770:	60 81       	ld	r22, Z
    3772:	71 81       	ldd	r23, Z+1	; 0x01
    3774:	88 27       	eor	r24, r24
    3776:	77 fd       	sbrc	r23, 7
    3778:	80 95       	com	r24
    377a:	98 2f       	mov	r25, r24
    377c:	02 2f       	mov	r16, r18
    377e:	0f 76       	andi	r16, 0x6F	; 111
    3780:	97 ff       	sbrs	r25, 7
    3782:	08 c0       	rjmp	.+16     	; 0x3794 <vfprintf+0x54e>
    3784:	90 95       	com	r25
    3786:	80 95       	com	r24
    3788:	70 95       	com	r23
    378a:	61 95       	neg	r22
    378c:	7f 4f       	sbci	r23, 0xFF	; 255
    378e:	8f 4f       	sbci	r24, 0xFF	; 255
    3790:	9f 4f       	sbci	r25, 0xFF	; 255
    3792:	00 68       	ori	r16, 0x80	; 128
    3794:	2a e0       	ldi	r18, 0x0A	; 10
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	a4 01       	movw	r20, r8
    379a:	b6 d3       	rcall	.+1900   	; 0x3f08 <__ultoa_invert>
    379c:	c8 2e       	mov	r12, r24
    379e:	c8 18       	sub	r12, r8
    37a0:	3d c0       	rjmp	.+122    	; 0x381c <vfprintf+0x5d6>
    37a2:	02 2f       	mov	r16, r18
    37a4:	85 37       	cpi	r24, 0x75	; 117
    37a6:	21 f4       	brne	.+8      	; 0x37b0 <vfprintf+0x56a>
    37a8:	0f 7e       	andi	r16, 0xEF	; 239
    37aa:	2a e0       	ldi	r18, 0x0A	; 10
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	1d c0       	rjmp	.+58     	; 0x37ea <vfprintf+0x5a4>
    37b0:	09 7f       	andi	r16, 0xF9	; 249
    37b2:	8f 36       	cpi	r24, 0x6F	; 111
    37b4:	91 f0       	breq	.+36     	; 0x37da <vfprintf+0x594>
    37b6:	18 f4       	brcc	.+6      	; 0x37be <vfprintf+0x578>
    37b8:	88 35       	cpi	r24, 0x58	; 88
    37ba:	59 f0       	breq	.+22     	; 0x37d2 <vfprintf+0x58c>
    37bc:	a9 c0       	rjmp	.+338    	; 0x3910 <vfprintf+0x6ca>
    37be:	80 37       	cpi	r24, 0x70	; 112
    37c0:	19 f0       	breq	.+6      	; 0x37c8 <vfprintf+0x582>
    37c2:	88 37       	cpi	r24, 0x78	; 120
    37c4:	11 f0       	breq	.+4      	; 0x37ca <vfprintf+0x584>
    37c6:	a4 c0       	rjmp	.+328    	; 0x3910 <vfprintf+0x6ca>
    37c8:	00 61       	ori	r16, 0x10	; 16
    37ca:	04 ff       	sbrs	r16, 4
    37cc:	09 c0       	rjmp	.+18     	; 0x37e0 <vfprintf+0x59a>
    37ce:	04 60       	ori	r16, 0x04	; 4
    37d0:	07 c0       	rjmp	.+14     	; 0x37e0 <vfprintf+0x59a>
    37d2:	24 ff       	sbrs	r18, 4
    37d4:	08 c0       	rjmp	.+16     	; 0x37e6 <vfprintf+0x5a0>
    37d6:	06 60       	ori	r16, 0x06	; 6
    37d8:	06 c0       	rjmp	.+12     	; 0x37e6 <vfprintf+0x5a0>
    37da:	28 e0       	ldi	r18, 0x08	; 8
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	05 c0       	rjmp	.+10     	; 0x37ea <vfprintf+0x5a4>
    37e0:	20 e1       	ldi	r18, 0x10	; 16
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	02 c0       	rjmp	.+4      	; 0x37ea <vfprintf+0x5a4>
    37e6:	20 e1       	ldi	r18, 0x10	; 16
    37e8:	32 e0       	ldi	r19, 0x02	; 2
    37ea:	56 01       	movw	r10, r12
    37ec:	07 ff       	sbrs	r16, 7
    37ee:	09 c0       	rjmp	.+18     	; 0x3802 <vfprintf+0x5bc>
    37f0:	f4 e0       	ldi	r31, 0x04	; 4
    37f2:	af 0e       	add	r10, r31
    37f4:	b1 1c       	adc	r11, r1
    37f6:	f6 01       	movw	r30, r12
    37f8:	60 81       	ld	r22, Z
    37fa:	71 81       	ldd	r23, Z+1	; 0x01
    37fc:	82 81       	ldd	r24, Z+2	; 0x02
    37fe:	93 81       	ldd	r25, Z+3	; 0x03
    3800:	08 c0       	rjmp	.+16     	; 0x3812 <vfprintf+0x5cc>
    3802:	f2 e0       	ldi	r31, 0x02	; 2
    3804:	af 0e       	add	r10, r31
    3806:	b1 1c       	adc	r11, r1
    3808:	f6 01       	movw	r30, r12
    380a:	60 81       	ld	r22, Z
    380c:	71 81       	ldd	r23, Z+1	; 0x01
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	a4 01       	movw	r20, r8
    3814:	79 d3       	rcall	.+1778   	; 0x3f08 <__ultoa_invert>
    3816:	c8 2e       	mov	r12, r24
    3818:	c8 18       	sub	r12, r8
    381a:	0f 77       	andi	r16, 0x7F	; 127
    381c:	06 ff       	sbrs	r16, 6
    381e:	0b c0       	rjmp	.+22     	; 0x3836 <vfprintf+0x5f0>
    3820:	20 2f       	mov	r18, r16
    3822:	2e 7f       	andi	r18, 0xFE	; 254
    3824:	c1 16       	cp	r12, r17
    3826:	50 f4       	brcc	.+20     	; 0x383c <vfprintf+0x5f6>
    3828:	04 ff       	sbrs	r16, 4
    382a:	0a c0       	rjmp	.+20     	; 0x3840 <vfprintf+0x5fa>
    382c:	02 fd       	sbrc	r16, 2
    382e:	08 c0       	rjmp	.+16     	; 0x3840 <vfprintf+0x5fa>
    3830:	20 2f       	mov	r18, r16
    3832:	2e 7e       	andi	r18, 0xEE	; 238
    3834:	05 c0       	rjmp	.+10     	; 0x3840 <vfprintf+0x5fa>
    3836:	dc 2c       	mov	r13, r12
    3838:	20 2f       	mov	r18, r16
    383a:	03 c0       	rjmp	.+6      	; 0x3842 <vfprintf+0x5fc>
    383c:	dc 2c       	mov	r13, r12
    383e:	01 c0       	rjmp	.+2      	; 0x3842 <vfprintf+0x5fc>
    3840:	d1 2e       	mov	r13, r17
    3842:	24 ff       	sbrs	r18, 4
    3844:	0d c0       	rjmp	.+26     	; 0x3860 <vfprintf+0x61a>
    3846:	fe 01       	movw	r30, r28
    3848:	ec 0d       	add	r30, r12
    384a:	f1 1d       	adc	r31, r1
    384c:	80 81       	ld	r24, Z
    384e:	80 33       	cpi	r24, 0x30	; 48
    3850:	11 f4       	brne	.+4      	; 0x3856 <vfprintf+0x610>
    3852:	29 7e       	andi	r18, 0xE9	; 233
    3854:	09 c0       	rjmp	.+18     	; 0x3868 <vfprintf+0x622>
    3856:	22 ff       	sbrs	r18, 2
    3858:	06 c0       	rjmp	.+12     	; 0x3866 <vfprintf+0x620>
    385a:	d3 94       	inc	r13
    385c:	d3 94       	inc	r13
    385e:	04 c0       	rjmp	.+8      	; 0x3868 <vfprintf+0x622>
    3860:	82 2f       	mov	r24, r18
    3862:	86 78       	andi	r24, 0x86	; 134
    3864:	09 f0       	breq	.+2      	; 0x3868 <vfprintf+0x622>
    3866:	d3 94       	inc	r13
    3868:	23 fd       	sbrc	r18, 3
    386a:	12 c0       	rjmp	.+36     	; 0x3890 <vfprintf+0x64a>
    386c:	20 ff       	sbrs	r18, 0
    386e:	06 c0       	rjmp	.+12     	; 0x387c <vfprintf+0x636>
    3870:	1c 2d       	mov	r17, r12
    3872:	d5 14       	cp	r13, r5
    3874:	18 f4       	brcc	.+6      	; 0x387c <vfprintf+0x636>
    3876:	15 0d       	add	r17, r5
    3878:	1d 19       	sub	r17, r13
    387a:	d5 2c       	mov	r13, r5
    387c:	d5 14       	cp	r13, r5
    387e:	60 f4       	brcc	.+24     	; 0x3898 <vfprintf+0x652>
    3880:	b7 01       	movw	r22, r14
    3882:	80 e2       	ldi	r24, 0x20	; 32
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	2b 8b       	std	Y+19, r18	; 0x13
    3888:	e5 d2       	rcall	.+1482   	; 0x3e54 <fputc>
    388a:	d3 94       	inc	r13
    388c:	2b 89       	ldd	r18, Y+19	; 0x13
    388e:	f6 cf       	rjmp	.-20     	; 0x387c <vfprintf+0x636>
    3890:	d5 14       	cp	r13, r5
    3892:	10 f4       	brcc	.+4      	; 0x3898 <vfprintf+0x652>
    3894:	5d 18       	sub	r5, r13
    3896:	01 c0       	rjmp	.+2      	; 0x389a <vfprintf+0x654>
    3898:	51 2c       	mov	r5, r1
    389a:	24 ff       	sbrs	r18, 4
    389c:	11 c0       	rjmp	.+34     	; 0x38c0 <vfprintf+0x67a>
    389e:	b7 01       	movw	r22, r14
    38a0:	80 e3       	ldi	r24, 0x30	; 48
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	2b 8b       	std	Y+19, r18	; 0x13
    38a6:	d6 d2       	rcall	.+1452   	; 0x3e54 <fputc>
    38a8:	2b 89       	ldd	r18, Y+19	; 0x13
    38aa:	22 ff       	sbrs	r18, 2
    38ac:	16 c0       	rjmp	.+44     	; 0x38da <vfprintf+0x694>
    38ae:	21 ff       	sbrs	r18, 1
    38b0:	03 c0       	rjmp	.+6      	; 0x38b8 <vfprintf+0x672>
    38b2:	88 e5       	ldi	r24, 0x58	; 88
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <vfprintf+0x676>
    38b8:	88 e7       	ldi	r24, 0x78	; 120
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	b7 01       	movw	r22, r14
    38be:	0c c0       	rjmp	.+24     	; 0x38d8 <vfprintf+0x692>
    38c0:	82 2f       	mov	r24, r18
    38c2:	86 78       	andi	r24, 0x86	; 134
    38c4:	51 f0       	breq	.+20     	; 0x38da <vfprintf+0x694>
    38c6:	21 fd       	sbrc	r18, 1
    38c8:	02 c0       	rjmp	.+4      	; 0x38ce <vfprintf+0x688>
    38ca:	80 e2       	ldi	r24, 0x20	; 32
    38cc:	01 c0       	rjmp	.+2      	; 0x38d0 <vfprintf+0x68a>
    38ce:	8b e2       	ldi	r24, 0x2B	; 43
    38d0:	27 fd       	sbrc	r18, 7
    38d2:	8d e2       	ldi	r24, 0x2D	; 45
    38d4:	b7 01       	movw	r22, r14
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	bd d2       	rcall	.+1402   	; 0x3e54 <fputc>
    38da:	c1 16       	cp	r12, r17
    38dc:	30 f4       	brcc	.+12     	; 0x38ea <vfprintf+0x6a4>
    38de:	b7 01       	movw	r22, r14
    38e0:	80 e3       	ldi	r24, 0x30	; 48
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	b7 d2       	rcall	.+1390   	; 0x3e54 <fputc>
    38e6:	11 50       	subi	r17, 0x01	; 1
    38e8:	f8 cf       	rjmp	.-16     	; 0x38da <vfprintf+0x694>
    38ea:	ca 94       	dec	r12
    38ec:	f4 01       	movw	r30, r8
    38ee:	ec 0d       	add	r30, r12
    38f0:	f1 1d       	adc	r31, r1
    38f2:	80 81       	ld	r24, Z
    38f4:	b7 01       	movw	r22, r14
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	ad d2       	rcall	.+1370   	; 0x3e54 <fputc>
    38fa:	c1 10       	cpse	r12, r1
    38fc:	f6 cf       	rjmp	.-20     	; 0x38ea <vfprintf+0x6a4>
    38fe:	55 20       	and	r5, r5
    3900:	09 f4       	brne	.+2      	; 0x3904 <vfprintf+0x6be>
    3902:	dd cc       	rjmp	.-1606   	; 0x32be <vfprintf+0x78>
    3904:	b7 01       	movw	r22, r14
    3906:	80 e2       	ldi	r24, 0x20	; 32
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	a4 d2       	rcall	.+1352   	; 0x3e54 <fputc>
    390c:	5a 94       	dec	r5
    390e:	f7 cf       	rjmp	.-18     	; 0x38fe <vfprintf+0x6b8>
    3910:	f7 01       	movw	r30, r14
    3912:	86 81       	ldd	r24, Z+6	; 0x06
    3914:	97 81       	ldd	r25, Z+7	; 0x07
    3916:	02 c0       	rjmp	.+4      	; 0x391c <vfprintf+0x6d6>
    3918:	8f ef       	ldi	r24, 0xFF	; 255
    391a:	9f ef       	ldi	r25, 0xFF	; 255
    391c:	63 96       	adiw	r28, 0x13	; 19
    391e:	cd bf       	out	0x3d, r28	; 61
    3920:	de bf       	out	0x3e, r29	; 62
    3922:	df 91       	pop	r29
    3924:	cf 91       	pop	r28
    3926:	1f 91       	pop	r17
    3928:	0f 91       	pop	r16
    392a:	ff 90       	pop	r15
    392c:	ef 90       	pop	r14
    392e:	df 90       	pop	r13
    3930:	cf 90       	pop	r12
    3932:	bf 90       	pop	r11
    3934:	af 90       	pop	r10
    3936:	9f 90       	pop	r9
    3938:	8f 90       	pop	r8
    393a:	7f 90       	pop	r7
    393c:	6f 90       	pop	r6
    393e:	5f 90       	pop	r5
    3940:	4f 90       	pop	r4
    3942:	3f 90       	pop	r3
    3944:	2f 90       	pop	r2
    3946:	08 95       	ret

00003948 <__udivmodhi4>:
    3948:	aa 1b       	sub	r26, r26
    394a:	bb 1b       	sub	r27, r27
    394c:	51 e1       	ldi	r21, 0x11	; 17
    394e:	07 c0       	rjmp	.+14     	; 0x395e <__udivmodhi4_ep>

00003950 <__udivmodhi4_loop>:
    3950:	aa 1f       	adc	r26, r26
    3952:	bb 1f       	adc	r27, r27
    3954:	a6 17       	cp	r26, r22
    3956:	b7 07       	cpc	r27, r23
    3958:	10 f0       	brcs	.+4      	; 0x395e <__udivmodhi4_ep>
    395a:	a6 1b       	sub	r26, r22
    395c:	b7 0b       	sbc	r27, r23

0000395e <__udivmodhi4_ep>:
    395e:	88 1f       	adc	r24, r24
    3960:	99 1f       	adc	r25, r25
    3962:	5a 95       	dec	r21
    3964:	a9 f7       	brne	.-22     	; 0x3950 <__udivmodhi4_loop>
    3966:	80 95       	com	r24
    3968:	90 95       	com	r25
    396a:	bc 01       	movw	r22, r24
    396c:	cd 01       	movw	r24, r26
    396e:	08 95       	ret

00003970 <__udivmodsi4>:
    3970:	a1 e2       	ldi	r26, 0x21	; 33
    3972:	1a 2e       	mov	r1, r26
    3974:	aa 1b       	sub	r26, r26
    3976:	bb 1b       	sub	r27, r27
    3978:	fd 01       	movw	r30, r26
    397a:	0d c0       	rjmp	.+26     	; 0x3996 <__udivmodsi4_ep>

0000397c <__udivmodsi4_loop>:
    397c:	aa 1f       	adc	r26, r26
    397e:	bb 1f       	adc	r27, r27
    3980:	ee 1f       	adc	r30, r30
    3982:	ff 1f       	adc	r31, r31
    3984:	a2 17       	cp	r26, r18
    3986:	b3 07       	cpc	r27, r19
    3988:	e4 07       	cpc	r30, r20
    398a:	f5 07       	cpc	r31, r21
    398c:	20 f0       	brcs	.+8      	; 0x3996 <__udivmodsi4_ep>
    398e:	a2 1b       	sub	r26, r18
    3990:	b3 0b       	sbc	r27, r19
    3992:	e4 0b       	sbc	r30, r20
    3994:	f5 0b       	sbc	r31, r21

00003996 <__udivmodsi4_ep>:
    3996:	66 1f       	adc	r22, r22
    3998:	77 1f       	adc	r23, r23
    399a:	88 1f       	adc	r24, r24
    399c:	99 1f       	adc	r25, r25
    399e:	1a 94       	dec	r1
    39a0:	69 f7       	brne	.-38     	; 0x397c <__udivmodsi4_loop>
    39a2:	60 95       	com	r22
    39a4:	70 95       	com	r23
    39a6:	80 95       	com	r24
    39a8:	90 95       	com	r25
    39aa:	9b 01       	movw	r18, r22
    39ac:	ac 01       	movw	r20, r24
    39ae:	bd 01       	movw	r22, r26
    39b0:	cf 01       	movw	r24, r30
    39b2:	08 95       	ret

000039b4 <__tablejump2__>:
    39b4:	ee 0f       	add	r30, r30
    39b6:	ff 1f       	adc	r31, r31

000039b8 <__tablejump__>:
    39b8:	05 90       	lpm	r0, Z+
    39ba:	f4 91       	lpm	r31, Z
    39bc:	e0 2d       	mov	r30, r0
    39be:	19 94       	eijmp

000039c0 <calloc>:
    39c0:	0f 93       	push	r16
    39c2:	1f 93       	push	r17
    39c4:	cf 93       	push	r28
    39c6:	df 93       	push	r29
    39c8:	86 9f       	mul	r24, r22
    39ca:	80 01       	movw	r16, r0
    39cc:	87 9f       	mul	r24, r23
    39ce:	10 0d       	add	r17, r0
    39d0:	96 9f       	mul	r25, r22
    39d2:	10 0d       	add	r17, r0
    39d4:	11 24       	eor	r1, r1
    39d6:	c8 01       	movw	r24, r16
    39d8:	0d d0       	rcall	.+26     	; 0x39f4 <malloc>
    39da:	ec 01       	movw	r28, r24
    39dc:	00 97       	sbiw	r24, 0x00	; 0
    39de:	21 f0       	breq	.+8      	; 0x39e8 <calloc+0x28>
    39e0:	a8 01       	movw	r20, r16
    39e2:	60 e0       	ldi	r22, 0x00	; 0
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	19 d2       	rcall	.+1074   	; 0x3e1a <memset>
    39e8:	ce 01       	movw	r24, r28
    39ea:	df 91       	pop	r29
    39ec:	cf 91       	pop	r28
    39ee:	1f 91       	pop	r17
    39f0:	0f 91       	pop	r16
    39f2:	08 95       	ret

000039f4 <malloc>:
    39f4:	cf 93       	push	r28
    39f6:	df 93       	push	r29
    39f8:	82 30       	cpi	r24, 0x02	; 2
    39fa:	91 05       	cpc	r25, r1
    39fc:	10 f4       	brcc	.+4      	; 0x3a02 <malloc+0xe>
    39fe:	82 e0       	ldi	r24, 0x02	; 2
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	e0 91 0d 23 	lds	r30, 0x230D
    3a06:	f0 91 0e 23 	lds	r31, 0x230E
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	a0 e0       	ldi	r26, 0x00	; 0
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	30 97       	sbiw	r30, 0x00	; 0
    3a14:	39 f1       	breq	.+78     	; 0x3a64 <malloc+0x70>
    3a16:	40 81       	ld	r20, Z
    3a18:	51 81       	ldd	r21, Z+1	; 0x01
    3a1a:	48 17       	cp	r20, r24
    3a1c:	59 07       	cpc	r21, r25
    3a1e:	b8 f0       	brcs	.+46     	; 0x3a4e <malloc+0x5a>
    3a20:	48 17       	cp	r20, r24
    3a22:	59 07       	cpc	r21, r25
    3a24:	71 f4       	brne	.+28     	; 0x3a42 <malloc+0x4e>
    3a26:	82 81       	ldd	r24, Z+2	; 0x02
    3a28:	93 81       	ldd	r25, Z+3	; 0x03
    3a2a:	10 97       	sbiw	r26, 0x00	; 0
    3a2c:	29 f0       	breq	.+10     	; 0x3a38 <malloc+0x44>
    3a2e:	12 96       	adiw	r26, 0x02	; 2
    3a30:	8d 93       	st	X+, r24
    3a32:	9c 93       	st	X, r25
    3a34:	13 97       	sbiw	r26, 0x03	; 3
    3a36:	2c c0       	rjmp	.+88     	; 0x3a90 <malloc+0x9c>
    3a38:	80 93 0d 23 	sts	0x230D, r24
    3a3c:	90 93 0e 23 	sts	0x230E, r25
    3a40:	27 c0       	rjmp	.+78     	; 0x3a90 <malloc+0x9c>
    3a42:	21 15       	cp	r18, r1
    3a44:	31 05       	cpc	r19, r1
    3a46:	31 f0       	breq	.+12     	; 0x3a54 <malloc+0x60>
    3a48:	42 17       	cp	r20, r18
    3a4a:	53 07       	cpc	r21, r19
    3a4c:	18 f0       	brcs	.+6      	; 0x3a54 <malloc+0x60>
    3a4e:	a9 01       	movw	r20, r18
    3a50:	db 01       	movw	r26, r22
    3a52:	01 c0       	rjmp	.+2      	; 0x3a56 <malloc+0x62>
    3a54:	ef 01       	movw	r28, r30
    3a56:	9a 01       	movw	r18, r20
    3a58:	bd 01       	movw	r22, r26
    3a5a:	df 01       	movw	r26, r30
    3a5c:	02 80       	ldd	r0, Z+2	; 0x02
    3a5e:	f3 81       	ldd	r31, Z+3	; 0x03
    3a60:	e0 2d       	mov	r30, r0
    3a62:	d7 cf       	rjmp	.-82     	; 0x3a12 <malloc+0x1e>
    3a64:	21 15       	cp	r18, r1
    3a66:	31 05       	cpc	r19, r1
    3a68:	f9 f0       	breq	.+62     	; 0x3aa8 <malloc+0xb4>
    3a6a:	28 1b       	sub	r18, r24
    3a6c:	39 0b       	sbc	r19, r25
    3a6e:	24 30       	cpi	r18, 0x04	; 4
    3a70:	31 05       	cpc	r19, r1
    3a72:	80 f4       	brcc	.+32     	; 0x3a94 <malloc+0xa0>
    3a74:	8a 81       	ldd	r24, Y+2	; 0x02
    3a76:	9b 81       	ldd	r25, Y+3	; 0x03
    3a78:	61 15       	cp	r22, r1
    3a7a:	71 05       	cpc	r23, r1
    3a7c:	21 f0       	breq	.+8      	; 0x3a86 <malloc+0x92>
    3a7e:	fb 01       	movw	r30, r22
    3a80:	82 83       	std	Z+2, r24	; 0x02
    3a82:	93 83       	std	Z+3, r25	; 0x03
    3a84:	04 c0       	rjmp	.+8      	; 0x3a8e <malloc+0x9a>
    3a86:	80 93 0d 23 	sts	0x230D, r24
    3a8a:	90 93 0e 23 	sts	0x230E, r25
    3a8e:	fe 01       	movw	r30, r28
    3a90:	32 96       	adiw	r30, 0x02	; 2
    3a92:	44 c0       	rjmp	.+136    	; 0x3b1c <malloc+0x128>
    3a94:	fe 01       	movw	r30, r28
    3a96:	e2 0f       	add	r30, r18
    3a98:	f3 1f       	adc	r31, r19
    3a9a:	81 93       	st	Z+, r24
    3a9c:	91 93       	st	Z+, r25
    3a9e:	22 50       	subi	r18, 0x02	; 2
    3aa0:	31 09       	sbc	r19, r1
    3aa2:	28 83       	st	Y, r18
    3aa4:	39 83       	std	Y+1, r19	; 0x01
    3aa6:	3a c0       	rjmp	.+116    	; 0x3b1c <malloc+0x128>
    3aa8:	20 91 0b 23 	lds	r18, 0x230B
    3aac:	30 91 0c 23 	lds	r19, 0x230C
    3ab0:	23 2b       	or	r18, r19
    3ab2:	41 f4       	brne	.+16     	; 0x3ac4 <malloc+0xd0>
    3ab4:	20 91 02 20 	lds	r18, 0x2002
    3ab8:	30 91 03 20 	lds	r19, 0x2003
    3abc:	20 93 0b 23 	sts	0x230B, r18
    3ac0:	30 93 0c 23 	sts	0x230C, r19
    3ac4:	20 91 00 20 	lds	r18, 0x2000
    3ac8:	30 91 01 20 	lds	r19, 0x2001
    3acc:	21 15       	cp	r18, r1
    3ace:	31 05       	cpc	r19, r1
    3ad0:	41 f4       	brne	.+16     	; 0x3ae2 <malloc+0xee>
    3ad2:	2d b7       	in	r18, 0x3d	; 61
    3ad4:	3e b7       	in	r19, 0x3e	; 62
    3ad6:	40 91 04 20 	lds	r20, 0x2004
    3ada:	50 91 05 20 	lds	r21, 0x2005
    3ade:	24 1b       	sub	r18, r20
    3ae0:	35 0b       	sbc	r19, r21
    3ae2:	e0 91 0b 23 	lds	r30, 0x230B
    3ae6:	f0 91 0c 23 	lds	r31, 0x230C
    3aea:	e2 17       	cp	r30, r18
    3aec:	f3 07       	cpc	r31, r19
    3aee:	a0 f4       	brcc	.+40     	; 0x3b18 <malloc+0x124>
    3af0:	2e 1b       	sub	r18, r30
    3af2:	3f 0b       	sbc	r19, r31
    3af4:	28 17       	cp	r18, r24
    3af6:	39 07       	cpc	r19, r25
    3af8:	78 f0       	brcs	.+30     	; 0x3b18 <malloc+0x124>
    3afa:	ac 01       	movw	r20, r24
    3afc:	4e 5f       	subi	r20, 0xFE	; 254
    3afe:	5f 4f       	sbci	r21, 0xFF	; 255
    3b00:	24 17       	cp	r18, r20
    3b02:	35 07       	cpc	r19, r21
    3b04:	48 f0       	brcs	.+18     	; 0x3b18 <malloc+0x124>
    3b06:	4e 0f       	add	r20, r30
    3b08:	5f 1f       	adc	r21, r31
    3b0a:	40 93 0b 23 	sts	0x230B, r20
    3b0e:	50 93 0c 23 	sts	0x230C, r21
    3b12:	81 93       	st	Z+, r24
    3b14:	91 93       	st	Z+, r25
    3b16:	02 c0       	rjmp	.+4      	; 0x3b1c <malloc+0x128>
    3b18:	e0 e0       	ldi	r30, 0x00	; 0
    3b1a:	f0 e0       	ldi	r31, 0x00	; 0
    3b1c:	cf 01       	movw	r24, r30
    3b1e:	df 91       	pop	r29
    3b20:	cf 91       	pop	r28
    3b22:	08 95       	ret

00003b24 <free>:
    3b24:	cf 93       	push	r28
    3b26:	df 93       	push	r29
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	09 f4       	brne	.+2      	; 0x3b2e <free+0xa>
    3b2c:	87 c0       	rjmp	.+270    	; 0x3c3c <free+0x118>
    3b2e:	fc 01       	movw	r30, r24
    3b30:	32 97       	sbiw	r30, 0x02	; 2
    3b32:	12 82       	std	Z+2, r1	; 0x02
    3b34:	13 82       	std	Z+3, r1	; 0x03
    3b36:	c0 91 0d 23 	lds	r28, 0x230D
    3b3a:	d0 91 0e 23 	lds	r29, 0x230E
    3b3e:	20 97       	sbiw	r28, 0x00	; 0
    3b40:	81 f4       	brne	.+32     	; 0x3b62 <free+0x3e>
    3b42:	20 81       	ld	r18, Z
    3b44:	31 81       	ldd	r19, Z+1	; 0x01
    3b46:	28 0f       	add	r18, r24
    3b48:	39 1f       	adc	r19, r25
    3b4a:	80 91 0b 23 	lds	r24, 0x230B
    3b4e:	90 91 0c 23 	lds	r25, 0x230C
    3b52:	82 17       	cp	r24, r18
    3b54:	93 07       	cpc	r25, r19
    3b56:	79 f5       	brne	.+94     	; 0x3bb6 <free+0x92>
    3b58:	e0 93 0b 23 	sts	0x230B, r30
    3b5c:	f0 93 0c 23 	sts	0x230C, r31
    3b60:	6d c0       	rjmp	.+218    	; 0x3c3c <free+0x118>
    3b62:	de 01       	movw	r26, r28
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	ae 17       	cp	r26, r30
    3b6a:	bf 07       	cpc	r27, r31
    3b6c:	50 f4       	brcc	.+20     	; 0x3b82 <free+0x5e>
    3b6e:	12 96       	adiw	r26, 0x02	; 2
    3b70:	4d 91       	ld	r20, X+
    3b72:	5c 91       	ld	r21, X
    3b74:	13 97       	sbiw	r26, 0x03	; 3
    3b76:	9d 01       	movw	r18, r26
    3b78:	41 15       	cp	r20, r1
    3b7a:	51 05       	cpc	r21, r1
    3b7c:	09 f1       	breq	.+66     	; 0x3bc0 <free+0x9c>
    3b7e:	da 01       	movw	r26, r20
    3b80:	f3 cf       	rjmp	.-26     	; 0x3b68 <free+0x44>
    3b82:	a2 83       	std	Z+2, r26	; 0x02
    3b84:	b3 83       	std	Z+3, r27	; 0x03
    3b86:	40 81       	ld	r20, Z
    3b88:	51 81       	ldd	r21, Z+1	; 0x01
    3b8a:	84 0f       	add	r24, r20
    3b8c:	95 1f       	adc	r25, r21
    3b8e:	8a 17       	cp	r24, r26
    3b90:	9b 07       	cpc	r25, r27
    3b92:	71 f4       	brne	.+28     	; 0x3bb0 <free+0x8c>
    3b94:	8d 91       	ld	r24, X+
    3b96:	9c 91       	ld	r25, X
    3b98:	11 97       	sbiw	r26, 0x01	; 1
    3b9a:	84 0f       	add	r24, r20
    3b9c:	95 1f       	adc	r25, r21
    3b9e:	02 96       	adiw	r24, 0x02	; 2
    3ba0:	80 83       	st	Z, r24
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	12 96       	adiw	r26, 0x02	; 2
    3ba6:	8d 91       	ld	r24, X+
    3ba8:	9c 91       	ld	r25, X
    3baa:	13 97       	sbiw	r26, 0x03	; 3
    3bac:	82 83       	std	Z+2, r24	; 0x02
    3bae:	93 83       	std	Z+3, r25	; 0x03
    3bb0:	21 15       	cp	r18, r1
    3bb2:	31 05       	cpc	r19, r1
    3bb4:	29 f4       	brne	.+10     	; 0x3bc0 <free+0x9c>
    3bb6:	e0 93 0d 23 	sts	0x230D, r30
    3bba:	f0 93 0e 23 	sts	0x230E, r31
    3bbe:	3e c0       	rjmp	.+124    	; 0x3c3c <free+0x118>
    3bc0:	d9 01       	movw	r26, r18
    3bc2:	12 96       	adiw	r26, 0x02	; 2
    3bc4:	ed 93       	st	X+, r30
    3bc6:	fc 93       	st	X, r31
    3bc8:	13 97       	sbiw	r26, 0x03	; 3
    3bca:	4d 91       	ld	r20, X+
    3bcc:	5d 91       	ld	r21, X+
    3bce:	a4 0f       	add	r26, r20
    3bd0:	b5 1f       	adc	r27, r21
    3bd2:	ea 17       	cp	r30, r26
    3bd4:	fb 07       	cpc	r31, r27
    3bd6:	79 f4       	brne	.+30     	; 0x3bf6 <free+0xd2>
    3bd8:	80 81       	ld	r24, Z
    3bda:	91 81       	ldd	r25, Z+1	; 0x01
    3bdc:	84 0f       	add	r24, r20
    3bde:	95 1f       	adc	r25, r21
    3be0:	02 96       	adiw	r24, 0x02	; 2
    3be2:	d9 01       	movw	r26, r18
    3be4:	8d 93       	st	X+, r24
    3be6:	9c 93       	st	X, r25
    3be8:	11 97       	sbiw	r26, 0x01	; 1
    3bea:	82 81       	ldd	r24, Z+2	; 0x02
    3bec:	93 81       	ldd	r25, Z+3	; 0x03
    3bee:	12 96       	adiw	r26, 0x02	; 2
    3bf0:	8d 93       	st	X+, r24
    3bf2:	9c 93       	st	X, r25
    3bf4:	13 97       	sbiw	r26, 0x03	; 3
    3bf6:	e0 e0       	ldi	r30, 0x00	; 0
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	19 f0       	breq	.+6      	; 0x3c08 <free+0xe4>
    3c02:	fe 01       	movw	r30, r28
    3c04:	ec 01       	movw	r28, r24
    3c06:	f9 cf       	rjmp	.-14     	; 0x3bfa <free+0xd6>
    3c08:	ce 01       	movw	r24, r28
    3c0a:	02 96       	adiw	r24, 0x02	; 2
    3c0c:	28 81       	ld	r18, Y
    3c0e:	39 81       	ldd	r19, Y+1	; 0x01
    3c10:	82 0f       	add	r24, r18
    3c12:	93 1f       	adc	r25, r19
    3c14:	20 91 0b 23 	lds	r18, 0x230B
    3c18:	30 91 0c 23 	lds	r19, 0x230C
    3c1c:	28 17       	cp	r18, r24
    3c1e:	39 07       	cpc	r19, r25
    3c20:	69 f4       	brne	.+26     	; 0x3c3c <free+0x118>
    3c22:	30 97       	sbiw	r30, 0x00	; 0
    3c24:	29 f4       	brne	.+10     	; 0x3c30 <free+0x10c>
    3c26:	10 92 0d 23 	sts	0x230D, r1
    3c2a:	10 92 0e 23 	sts	0x230E, r1
    3c2e:	02 c0       	rjmp	.+4      	; 0x3c34 <free+0x110>
    3c30:	12 82       	std	Z+2, r1	; 0x02
    3c32:	13 82       	std	Z+3, r1	; 0x03
    3c34:	c0 93 0b 23 	sts	0x230B, r28
    3c38:	d0 93 0c 23 	sts	0x230C, r29
    3c3c:	df 91       	pop	r29
    3c3e:	cf 91       	pop	r28
    3c40:	08 95       	ret

00003c42 <__ftoa_engine>:
    3c42:	28 30       	cpi	r18, 0x08	; 8
    3c44:	08 f0       	brcs	.+2      	; 0x3c48 <__ftoa_engine+0x6>
    3c46:	27 e0       	ldi	r18, 0x07	; 7
    3c48:	33 27       	eor	r19, r19
    3c4a:	da 01       	movw	r26, r20
    3c4c:	99 0f       	add	r25, r25
    3c4e:	31 1d       	adc	r19, r1
    3c50:	87 fd       	sbrc	r24, 7
    3c52:	91 60       	ori	r25, 0x01	; 1
    3c54:	00 96       	adiw	r24, 0x00	; 0
    3c56:	61 05       	cpc	r22, r1
    3c58:	71 05       	cpc	r23, r1
    3c5a:	39 f4       	brne	.+14     	; 0x3c6a <__ftoa_engine+0x28>
    3c5c:	32 60       	ori	r19, 0x02	; 2
    3c5e:	2e 5f       	subi	r18, 0xFE	; 254
    3c60:	3d 93       	st	X+, r19
    3c62:	30 e3       	ldi	r19, 0x30	; 48
    3c64:	2a 95       	dec	r18
    3c66:	e1 f7       	brne	.-8      	; 0x3c60 <__ftoa_engine+0x1e>
    3c68:	08 95       	ret
    3c6a:	9f 3f       	cpi	r25, 0xFF	; 255
    3c6c:	30 f0       	brcs	.+12     	; 0x3c7a <__ftoa_engine+0x38>
    3c6e:	80 38       	cpi	r24, 0x80	; 128
    3c70:	71 05       	cpc	r23, r1
    3c72:	61 05       	cpc	r22, r1
    3c74:	09 f0       	breq	.+2      	; 0x3c78 <__ftoa_engine+0x36>
    3c76:	3c 5f       	subi	r19, 0xFC	; 252
    3c78:	3c 5f       	subi	r19, 0xFC	; 252
    3c7a:	3d 93       	st	X+, r19
    3c7c:	91 30       	cpi	r25, 0x01	; 1
    3c7e:	08 f0       	brcs	.+2      	; 0x3c82 <__ftoa_engine+0x40>
    3c80:	80 68       	ori	r24, 0x80	; 128
    3c82:	91 1d       	adc	r25, r1
    3c84:	df 93       	push	r29
    3c86:	cf 93       	push	r28
    3c88:	1f 93       	push	r17
    3c8a:	0f 93       	push	r16
    3c8c:	ff 92       	push	r15
    3c8e:	ef 92       	push	r14
    3c90:	19 2f       	mov	r17, r25
    3c92:	98 7f       	andi	r25, 0xF8	; 248
    3c94:	96 95       	lsr	r25
    3c96:	e9 2f       	mov	r30, r25
    3c98:	96 95       	lsr	r25
    3c9a:	96 95       	lsr	r25
    3c9c:	e9 0f       	add	r30, r25
    3c9e:	ff 27       	eor	r31, r31
    3ca0:	e0 58       	subi	r30, 0x80	; 128
    3ca2:	fd 4f       	sbci	r31, 0xFD	; 253
    3ca4:	99 27       	eor	r25, r25
    3ca6:	33 27       	eor	r19, r19
    3ca8:	ee 24       	eor	r14, r14
    3caa:	ff 24       	eor	r15, r15
    3cac:	a7 01       	movw	r20, r14
    3cae:	e7 01       	movw	r28, r14
    3cb0:	05 90       	lpm	r0, Z+
    3cb2:	08 94       	sec
    3cb4:	07 94       	ror	r0
    3cb6:	28 f4       	brcc	.+10     	; 0x3cc2 <__ftoa_engine+0x80>
    3cb8:	36 0f       	add	r19, r22
    3cba:	e7 1e       	adc	r14, r23
    3cbc:	f8 1e       	adc	r15, r24
    3cbe:	49 1f       	adc	r20, r25
    3cc0:	51 1d       	adc	r21, r1
    3cc2:	66 0f       	add	r22, r22
    3cc4:	77 1f       	adc	r23, r23
    3cc6:	88 1f       	adc	r24, r24
    3cc8:	99 1f       	adc	r25, r25
    3cca:	06 94       	lsr	r0
    3ccc:	a1 f7       	brne	.-24     	; 0x3cb6 <__ftoa_engine+0x74>
    3cce:	05 90       	lpm	r0, Z+
    3cd0:	07 94       	ror	r0
    3cd2:	28 f4       	brcc	.+10     	; 0x3cde <__ftoa_engine+0x9c>
    3cd4:	e7 0e       	add	r14, r23
    3cd6:	f8 1e       	adc	r15, r24
    3cd8:	49 1f       	adc	r20, r25
    3cda:	56 1f       	adc	r21, r22
    3cdc:	c1 1d       	adc	r28, r1
    3cde:	77 0f       	add	r23, r23
    3ce0:	88 1f       	adc	r24, r24
    3ce2:	99 1f       	adc	r25, r25
    3ce4:	66 1f       	adc	r22, r22
    3ce6:	06 94       	lsr	r0
    3ce8:	a1 f7       	brne	.-24     	; 0x3cd2 <__ftoa_engine+0x90>
    3cea:	05 90       	lpm	r0, Z+
    3cec:	07 94       	ror	r0
    3cee:	28 f4       	brcc	.+10     	; 0x3cfa <__ftoa_engine+0xb8>
    3cf0:	f8 0e       	add	r15, r24
    3cf2:	49 1f       	adc	r20, r25
    3cf4:	56 1f       	adc	r21, r22
    3cf6:	c7 1f       	adc	r28, r23
    3cf8:	d1 1d       	adc	r29, r1
    3cfa:	88 0f       	add	r24, r24
    3cfc:	99 1f       	adc	r25, r25
    3cfe:	66 1f       	adc	r22, r22
    3d00:	77 1f       	adc	r23, r23
    3d02:	06 94       	lsr	r0
    3d04:	a1 f7       	brne	.-24     	; 0x3cee <__ftoa_engine+0xac>
    3d06:	05 90       	lpm	r0, Z+
    3d08:	07 94       	ror	r0
    3d0a:	20 f4       	brcc	.+8      	; 0x3d14 <__ftoa_engine+0xd2>
    3d0c:	49 0f       	add	r20, r25
    3d0e:	56 1f       	adc	r21, r22
    3d10:	c7 1f       	adc	r28, r23
    3d12:	d8 1f       	adc	r29, r24
    3d14:	99 0f       	add	r25, r25
    3d16:	66 1f       	adc	r22, r22
    3d18:	77 1f       	adc	r23, r23
    3d1a:	88 1f       	adc	r24, r24
    3d1c:	06 94       	lsr	r0
    3d1e:	a9 f7       	brne	.-22     	; 0x3d0a <__ftoa_engine+0xc8>
    3d20:	84 91       	lpm	r24, Z
    3d22:	10 95       	com	r17
    3d24:	17 70       	andi	r17, 0x07	; 7
    3d26:	41 f0       	breq	.+16     	; 0x3d38 <__ftoa_engine+0xf6>
    3d28:	d6 95       	lsr	r29
    3d2a:	c7 95       	ror	r28
    3d2c:	57 95       	ror	r21
    3d2e:	47 95       	ror	r20
    3d30:	f7 94       	ror	r15
    3d32:	e7 94       	ror	r14
    3d34:	1a 95       	dec	r17
    3d36:	c1 f7       	brne	.-16     	; 0x3d28 <__ftoa_engine+0xe6>
    3d38:	e6 e2       	ldi	r30, 0x26	; 38
    3d3a:	f2 e0       	ldi	r31, 0x02	; 2
    3d3c:	68 94       	set
    3d3e:	15 90       	lpm	r1, Z+
    3d40:	15 91       	lpm	r17, Z+
    3d42:	35 91       	lpm	r19, Z+
    3d44:	65 91       	lpm	r22, Z+
    3d46:	95 91       	lpm	r25, Z+
    3d48:	05 90       	lpm	r0, Z+
    3d4a:	7f e2       	ldi	r23, 0x2F	; 47
    3d4c:	73 95       	inc	r23
    3d4e:	e1 18       	sub	r14, r1
    3d50:	f1 0a       	sbc	r15, r17
    3d52:	43 0b       	sbc	r20, r19
    3d54:	56 0b       	sbc	r21, r22
    3d56:	c9 0b       	sbc	r28, r25
    3d58:	d0 09       	sbc	r29, r0
    3d5a:	c0 f7       	brcc	.-16     	; 0x3d4c <__ftoa_engine+0x10a>
    3d5c:	e1 0c       	add	r14, r1
    3d5e:	f1 1e       	adc	r15, r17
    3d60:	43 1f       	adc	r20, r19
    3d62:	56 1f       	adc	r21, r22
    3d64:	c9 1f       	adc	r28, r25
    3d66:	d0 1d       	adc	r29, r0
    3d68:	7e f4       	brtc	.+30     	; 0x3d88 <__ftoa_engine+0x146>
    3d6a:	70 33       	cpi	r23, 0x30	; 48
    3d6c:	11 f4       	brne	.+4      	; 0x3d72 <__ftoa_engine+0x130>
    3d6e:	8a 95       	dec	r24
    3d70:	e6 cf       	rjmp	.-52     	; 0x3d3e <__ftoa_engine+0xfc>
    3d72:	e8 94       	clt
    3d74:	01 50       	subi	r16, 0x01	; 1
    3d76:	30 f0       	brcs	.+12     	; 0x3d84 <__ftoa_engine+0x142>
    3d78:	08 0f       	add	r16, r24
    3d7a:	0a f4       	brpl	.+2      	; 0x3d7e <__ftoa_engine+0x13c>
    3d7c:	00 27       	eor	r16, r16
    3d7e:	02 17       	cp	r16, r18
    3d80:	08 f4       	brcc	.+2      	; 0x3d84 <__ftoa_engine+0x142>
    3d82:	20 2f       	mov	r18, r16
    3d84:	23 95       	inc	r18
    3d86:	02 2f       	mov	r16, r18
    3d88:	7a 33       	cpi	r23, 0x3A	; 58
    3d8a:	28 f0       	brcs	.+10     	; 0x3d96 <__ftoa_engine+0x154>
    3d8c:	79 e3       	ldi	r23, 0x39	; 57
    3d8e:	7d 93       	st	X+, r23
    3d90:	2a 95       	dec	r18
    3d92:	e9 f7       	brne	.-6      	; 0x3d8e <__ftoa_engine+0x14c>
    3d94:	10 c0       	rjmp	.+32     	; 0x3db6 <__ftoa_engine+0x174>
    3d96:	7d 93       	st	X+, r23
    3d98:	2a 95       	dec	r18
    3d9a:	89 f6       	brne	.-94     	; 0x3d3e <__ftoa_engine+0xfc>
    3d9c:	06 94       	lsr	r0
    3d9e:	97 95       	ror	r25
    3da0:	67 95       	ror	r22
    3da2:	37 95       	ror	r19
    3da4:	17 95       	ror	r17
    3da6:	17 94       	ror	r1
    3da8:	e1 18       	sub	r14, r1
    3daa:	f1 0a       	sbc	r15, r17
    3dac:	43 0b       	sbc	r20, r19
    3dae:	56 0b       	sbc	r21, r22
    3db0:	c9 0b       	sbc	r28, r25
    3db2:	d0 09       	sbc	r29, r0
    3db4:	98 f0       	brcs	.+38     	; 0x3ddc <__ftoa_engine+0x19a>
    3db6:	23 95       	inc	r18
    3db8:	7e 91       	ld	r23, -X
    3dba:	73 95       	inc	r23
    3dbc:	7a 33       	cpi	r23, 0x3A	; 58
    3dbe:	08 f0       	brcs	.+2      	; 0x3dc2 <__ftoa_engine+0x180>
    3dc0:	70 e3       	ldi	r23, 0x30	; 48
    3dc2:	7c 93       	st	X, r23
    3dc4:	20 13       	cpse	r18, r16
    3dc6:	b8 f7       	brcc	.-18     	; 0x3db6 <__ftoa_engine+0x174>
    3dc8:	7e 91       	ld	r23, -X
    3dca:	70 61       	ori	r23, 0x10	; 16
    3dcc:	7d 93       	st	X+, r23
    3dce:	30 f0       	brcs	.+12     	; 0x3ddc <__ftoa_engine+0x19a>
    3dd0:	83 95       	inc	r24
    3dd2:	71 e3       	ldi	r23, 0x31	; 49
    3dd4:	7d 93       	st	X+, r23
    3dd6:	70 e3       	ldi	r23, 0x30	; 48
    3dd8:	2a 95       	dec	r18
    3dda:	e1 f7       	brne	.-8      	; 0x3dd4 <__ftoa_engine+0x192>
    3ddc:	11 24       	eor	r1, r1
    3dde:	ef 90       	pop	r14
    3de0:	ff 90       	pop	r15
    3de2:	0f 91       	pop	r16
    3de4:	1f 91       	pop	r17
    3de6:	cf 91       	pop	r28
    3de8:	df 91       	pop	r29
    3dea:	99 27       	eor	r25, r25
    3dec:	87 fd       	sbrc	r24, 7
    3dee:	90 95       	com	r25
    3df0:	08 95       	ret

00003df2 <strnlen_P>:
    3df2:	fc 01       	movw	r30, r24
    3df4:	05 90       	lpm	r0, Z+
    3df6:	61 50       	subi	r22, 0x01	; 1
    3df8:	70 40       	sbci	r23, 0x00	; 0
    3dfa:	01 10       	cpse	r0, r1
    3dfc:	d8 f7       	brcc	.-10     	; 0x3df4 <strnlen_P+0x2>
    3dfe:	80 95       	com	r24
    3e00:	90 95       	com	r25
    3e02:	8e 0f       	add	r24, r30
    3e04:	9f 1f       	adc	r25, r31
    3e06:	08 95       	ret

00003e08 <memcpy>:
    3e08:	fb 01       	movw	r30, r22
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	02 c0       	rjmp	.+4      	; 0x3e12 <memcpy+0xa>
    3e0e:	01 90       	ld	r0, Z+
    3e10:	0d 92       	st	X+, r0
    3e12:	41 50       	subi	r20, 0x01	; 1
    3e14:	50 40       	sbci	r21, 0x00	; 0
    3e16:	d8 f7       	brcc	.-10     	; 0x3e0e <memcpy+0x6>
    3e18:	08 95       	ret

00003e1a <memset>:
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	01 c0       	rjmp	.+2      	; 0x3e20 <memset+0x6>
    3e1e:	6d 93       	st	X+, r22
    3e20:	41 50       	subi	r20, 0x01	; 1
    3e22:	50 40       	sbci	r21, 0x00	; 0
    3e24:	e0 f7       	brcc	.-8      	; 0x3e1e <memset+0x4>
    3e26:	08 95       	ret

00003e28 <strcat>:
    3e28:	fb 01       	movw	r30, r22
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	0d 90       	ld	r0, X+
    3e2e:	00 20       	and	r0, r0
    3e30:	e9 f7       	brne	.-6      	; 0x3e2c <strcat+0x4>
    3e32:	11 97       	sbiw	r26, 0x01	; 1
    3e34:	01 90       	ld	r0, Z+
    3e36:	0d 92       	st	X+, r0
    3e38:	00 20       	and	r0, r0
    3e3a:	e1 f7       	brne	.-8      	; 0x3e34 <strcat+0xc>
    3e3c:	08 95       	ret

00003e3e <strnlen>:
    3e3e:	fc 01       	movw	r30, r24
    3e40:	61 50       	subi	r22, 0x01	; 1
    3e42:	70 40       	sbci	r23, 0x00	; 0
    3e44:	01 90       	ld	r0, Z+
    3e46:	01 10       	cpse	r0, r1
    3e48:	d8 f7       	brcc	.-10     	; 0x3e40 <strnlen+0x2>
    3e4a:	80 95       	com	r24
    3e4c:	90 95       	com	r25
    3e4e:	8e 0f       	add	r24, r30
    3e50:	9f 1f       	adc	r25, r31
    3e52:	08 95       	ret

00003e54 <fputc>:
    3e54:	0f 93       	push	r16
    3e56:	1f 93       	push	r17
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29
    3e5c:	18 2f       	mov	r17, r24
    3e5e:	09 2f       	mov	r16, r25
    3e60:	eb 01       	movw	r28, r22
    3e62:	8b 81       	ldd	r24, Y+3	; 0x03
    3e64:	81 fd       	sbrc	r24, 1
    3e66:	03 c0       	rjmp	.+6      	; 0x3e6e <fputc+0x1a>
    3e68:	8f ef       	ldi	r24, 0xFF	; 255
    3e6a:	9f ef       	ldi	r25, 0xFF	; 255
    3e6c:	20 c0       	rjmp	.+64     	; 0x3eae <fputc+0x5a>
    3e6e:	82 ff       	sbrs	r24, 2
    3e70:	10 c0       	rjmp	.+32     	; 0x3e92 <fputc+0x3e>
    3e72:	4e 81       	ldd	r20, Y+6	; 0x06
    3e74:	5f 81       	ldd	r21, Y+7	; 0x07
    3e76:	2c 81       	ldd	r18, Y+4	; 0x04
    3e78:	3d 81       	ldd	r19, Y+5	; 0x05
    3e7a:	42 17       	cp	r20, r18
    3e7c:	53 07       	cpc	r21, r19
    3e7e:	7c f4       	brge	.+30     	; 0x3e9e <fputc+0x4a>
    3e80:	e8 81       	ld	r30, Y
    3e82:	f9 81       	ldd	r31, Y+1	; 0x01
    3e84:	9f 01       	movw	r18, r30
    3e86:	2f 5f       	subi	r18, 0xFF	; 255
    3e88:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8a:	28 83       	st	Y, r18
    3e8c:	39 83       	std	Y+1, r19	; 0x01
    3e8e:	10 83       	st	Z, r17
    3e90:	06 c0       	rjmp	.+12     	; 0x3e9e <fputc+0x4a>
    3e92:	e8 85       	ldd	r30, Y+8	; 0x08
    3e94:	f9 85       	ldd	r31, Y+9	; 0x09
    3e96:	81 2f       	mov	r24, r17
    3e98:	19 95       	eicall
    3e9a:	89 2b       	or	r24, r25
    3e9c:	29 f7       	brne	.-54     	; 0x3e68 <fputc+0x14>
    3e9e:	2e 81       	ldd	r18, Y+6	; 0x06
    3ea0:	3f 81       	ldd	r19, Y+7	; 0x07
    3ea2:	2f 5f       	subi	r18, 0xFF	; 255
    3ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea6:	2e 83       	std	Y+6, r18	; 0x06
    3ea8:	3f 83       	std	Y+7, r19	; 0x07
    3eaa:	81 2f       	mov	r24, r17
    3eac:	90 2f       	mov	r25, r16
    3eae:	df 91       	pop	r29
    3eb0:	cf 91       	pop	r28
    3eb2:	1f 91       	pop	r17
    3eb4:	0f 91       	pop	r16
    3eb6:	08 95       	ret

00003eb8 <sprintf>:
    3eb8:	0f 93       	push	r16
    3eba:	1f 93       	push	r17
    3ebc:	cf 93       	push	r28
    3ebe:	df 93       	push	r29
    3ec0:	cd b7       	in	r28, 0x3d	; 61
    3ec2:	de b7       	in	r29, 0x3e	; 62
    3ec4:	2e 97       	sbiw	r28, 0x0e	; 14
    3ec6:	cd bf       	out	0x3d, r28	; 61
    3ec8:	de bf       	out	0x3e, r29	; 62
    3eca:	0e 89       	ldd	r16, Y+22	; 0x16
    3ecc:	1f 89       	ldd	r17, Y+23	; 0x17
    3ece:	86 e0       	ldi	r24, 0x06	; 6
    3ed0:	8c 83       	std	Y+4, r24	; 0x04
    3ed2:	09 83       	std	Y+1, r16	; 0x01
    3ed4:	1a 83       	std	Y+2, r17	; 0x02
    3ed6:	8f ef       	ldi	r24, 0xFF	; 255
    3ed8:	9f e7       	ldi	r25, 0x7F	; 127
    3eda:	8d 83       	std	Y+5, r24	; 0x05
    3edc:	9e 83       	std	Y+6, r25	; 0x06
    3ede:	ae 01       	movw	r20, r28
    3ee0:	46 5e       	subi	r20, 0xE6	; 230
    3ee2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ee4:	68 8d       	ldd	r22, Y+24	; 0x18
    3ee6:	79 8d       	ldd	r23, Y+25	; 0x19
    3ee8:	ce 01       	movw	r24, r28
    3eea:	01 96       	adiw	r24, 0x01	; 1
    3eec:	ac d9       	rcall	.-3240   	; 0x3246 <vfprintf>
    3eee:	ef 81       	ldd	r30, Y+7	; 0x07
    3ef0:	f8 85       	ldd	r31, Y+8	; 0x08
    3ef2:	e0 0f       	add	r30, r16
    3ef4:	f1 1f       	adc	r31, r17
    3ef6:	10 82       	st	Z, r1
    3ef8:	2e 96       	adiw	r28, 0x0e	; 14
    3efa:	cd bf       	out	0x3d, r28	; 61
    3efc:	de bf       	out	0x3e, r29	; 62
    3efe:	df 91       	pop	r29
    3f00:	cf 91       	pop	r28
    3f02:	1f 91       	pop	r17
    3f04:	0f 91       	pop	r16
    3f06:	08 95       	ret

00003f08 <__ultoa_invert>:
    3f08:	fa 01       	movw	r30, r20
    3f0a:	aa 27       	eor	r26, r26
    3f0c:	28 30       	cpi	r18, 0x08	; 8
    3f0e:	51 f1       	breq	.+84     	; 0x3f64 <__ultoa_invert+0x5c>
    3f10:	20 31       	cpi	r18, 0x10	; 16
    3f12:	81 f1       	breq	.+96     	; 0x3f74 <__ultoa_invert+0x6c>
    3f14:	e8 94       	clt
    3f16:	6f 93       	push	r22
    3f18:	6e 7f       	andi	r22, 0xFE	; 254
    3f1a:	6e 5f       	subi	r22, 0xFE	; 254
    3f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f20:	9f 4f       	sbci	r25, 0xFF	; 255
    3f22:	af 4f       	sbci	r26, 0xFF	; 255
    3f24:	b1 e0       	ldi	r27, 0x01	; 1
    3f26:	3e d0       	rcall	.+124    	; 0x3fa4 <__ultoa_invert+0x9c>
    3f28:	b4 e0       	ldi	r27, 0x04	; 4
    3f2a:	3c d0       	rcall	.+120    	; 0x3fa4 <__ultoa_invert+0x9c>
    3f2c:	67 0f       	add	r22, r23
    3f2e:	78 1f       	adc	r23, r24
    3f30:	89 1f       	adc	r24, r25
    3f32:	9a 1f       	adc	r25, r26
    3f34:	a1 1d       	adc	r26, r1
    3f36:	68 0f       	add	r22, r24
    3f38:	79 1f       	adc	r23, r25
    3f3a:	8a 1f       	adc	r24, r26
    3f3c:	91 1d       	adc	r25, r1
    3f3e:	a1 1d       	adc	r26, r1
    3f40:	6a 0f       	add	r22, r26
    3f42:	71 1d       	adc	r23, r1
    3f44:	81 1d       	adc	r24, r1
    3f46:	91 1d       	adc	r25, r1
    3f48:	a1 1d       	adc	r26, r1
    3f4a:	20 d0       	rcall	.+64     	; 0x3f8c <__ultoa_invert+0x84>
    3f4c:	09 f4       	brne	.+2      	; 0x3f50 <__ultoa_invert+0x48>
    3f4e:	68 94       	set
    3f50:	3f 91       	pop	r19
    3f52:	2a e0       	ldi	r18, 0x0A	; 10
    3f54:	26 9f       	mul	r18, r22
    3f56:	11 24       	eor	r1, r1
    3f58:	30 19       	sub	r19, r0
    3f5a:	30 5d       	subi	r19, 0xD0	; 208
    3f5c:	31 93       	st	Z+, r19
    3f5e:	de f6       	brtc	.-74     	; 0x3f16 <__ultoa_invert+0xe>
    3f60:	cf 01       	movw	r24, r30
    3f62:	08 95       	ret
    3f64:	46 2f       	mov	r20, r22
    3f66:	47 70       	andi	r20, 0x07	; 7
    3f68:	40 5d       	subi	r20, 0xD0	; 208
    3f6a:	41 93       	st	Z+, r20
    3f6c:	b3 e0       	ldi	r27, 0x03	; 3
    3f6e:	0f d0       	rcall	.+30     	; 0x3f8e <__ultoa_invert+0x86>
    3f70:	c9 f7       	brne	.-14     	; 0x3f64 <__ultoa_invert+0x5c>
    3f72:	f6 cf       	rjmp	.-20     	; 0x3f60 <__ultoa_invert+0x58>
    3f74:	46 2f       	mov	r20, r22
    3f76:	4f 70       	andi	r20, 0x0F	; 15
    3f78:	40 5d       	subi	r20, 0xD0	; 208
    3f7a:	4a 33       	cpi	r20, 0x3A	; 58
    3f7c:	18 f0       	brcs	.+6      	; 0x3f84 <__ultoa_invert+0x7c>
    3f7e:	49 5d       	subi	r20, 0xD9	; 217
    3f80:	31 fd       	sbrc	r19, 1
    3f82:	40 52       	subi	r20, 0x20	; 32
    3f84:	41 93       	st	Z+, r20
    3f86:	02 d0       	rcall	.+4      	; 0x3f8c <__ultoa_invert+0x84>
    3f88:	a9 f7       	brne	.-22     	; 0x3f74 <__ultoa_invert+0x6c>
    3f8a:	ea cf       	rjmp	.-44     	; 0x3f60 <__ultoa_invert+0x58>
    3f8c:	b4 e0       	ldi	r27, 0x04	; 4
    3f8e:	a6 95       	lsr	r26
    3f90:	97 95       	ror	r25
    3f92:	87 95       	ror	r24
    3f94:	77 95       	ror	r23
    3f96:	67 95       	ror	r22
    3f98:	ba 95       	dec	r27
    3f9a:	c9 f7       	brne	.-14     	; 0x3f8e <__ultoa_invert+0x86>
    3f9c:	00 97       	sbiw	r24, 0x00	; 0
    3f9e:	61 05       	cpc	r22, r1
    3fa0:	71 05       	cpc	r23, r1
    3fa2:	08 95       	ret
    3fa4:	9b 01       	movw	r18, r22
    3fa6:	ac 01       	movw	r20, r24
    3fa8:	0a 2e       	mov	r0, r26
    3faa:	06 94       	lsr	r0
    3fac:	57 95       	ror	r21
    3fae:	47 95       	ror	r20
    3fb0:	37 95       	ror	r19
    3fb2:	27 95       	ror	r18
    3fb4:	ba 95       	dec	r27
    3fb6:	c9 f7       	brne	.-14     	; 0x3faa <__ultoa_invert+0xa2>
    3fb8:	62 0f       	add	r22, r18
    3fba:	73 1f       	adc	r23, r19
    3fbc:	84 1f       	adc	r24, r20
    3fbe:	95 1f       	adc	r25, r21
    3fc0:	a0 1d       	adc	r26, r0
    3fc2:	08 95       	ret

00003fc4 <_exit>:
    3fc4:	f8 94       	cli

00003fc6 <__stop_program>:
    3fc6:	ff cf       	rjmp	.-2      	; 0x3fc6 <__stop_program>
